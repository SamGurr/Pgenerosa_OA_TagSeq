install.packages('devtools')
# Notes:
# This script is organized into 'chunks' of code, and the final chunk (called 'the essentials') is a minimal representation of this script.
install_version('rhdf5')
# load packages----
library(devtools)
install.packages('remotes')
# load packages----
library(devtools)
install.packages('sessioninfo')
# load packages----
library(devtools)
# Notes:
# This script is organized into 'chunks' of code, and the final chunk (called 'the essentials') is a minimal representation of this script.
install_version('rhdf5')
install_version('tximport')
install_version('beepr')
install_version('EnsDb.Hsapiens.v86')
# Notes:
# This script is organized into 'chunks' of code, and the final chunk (called 'the essentials') is a minimal representation of this script.
install_version('Rtools')
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
# Introduction to the Step 1 script----
# Step 1 Learning Objectives:
# 1 - Step 1 serves as your gateway to R scripts and, as such, you will learn the proper 'anatomy' for any R script.
# 2 - Learn how to install packages and load libraries into your R environment
# 3 - Understand the various file types that describe RNAseq data and how to import these files (e.g. kallisto read mapping data) into R
# 4 - Learn basic tools for annotation
Sys.which("make")
# Notes:
# This script is organized into 'chunks' of code, and the final chunk (called 'the essentials') is a minimal representation of this script.
install_version('rhdf5', type = "source")
# Notes:
# This script is organized into 'chunks' of code, and the final chunk (called 'the essentials') is a minimal representation of this script.
install.packages('rhdf5', type = "source")
install_version('tximport', type = "source")
# Notes:
# This script is organized into 'chunks' of code, and the final chunk (called 'the essentials') is a minimal representation of this script.
install.packages('rhdf5', type = "source")
install.packages('tximport', type = "source")
install.packages('ensembldb', type = "source")
install.packages('EnsDb.Hsapiens.v86', type = "source")
# load packages----
library(devtools)
# Notes:
# This script is organized into 'chunks' of code, and the final chunk (called 'the essentials') is a minimal representation of this script.
install_version('rhdf5', type = "source")
# Notes:
# This script is organized into 'chunks' of code, and the final chunk (called 'the essentials') is a minimal representation of this script.
install_version('rhdf5')
install_version('tximport')
install_version('ensembldb')
install_version('EnsDb.Hsapiens.v86')
install_version("tximport")
install_version(tximport)
# load packages----
library(devtools)
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library(tximport) # package for getting Kallisto results into R
library(ensembldb) #helps deal with ensembl
library(EnsDb.Hsapiens.v86) #replace with your organism-specific database package
library(beepr) #just for fun
install.packages('EnsDb.Hsapiens.v86')
BiocManager::install(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
BiocManager::install('EnsDb.Hsapiens.v86') #replace with your organism-specific database package
BiocManager::install('ensembldb') #helps deal with ensembl
BiocManager::install('ensembldb') #helps deal with ensembl
BiocManager::install('rhdf5') #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
BiocManager::install('tximport') # package for getting Kallisto results into R
# Introduction to the Step 1 script----
# Step 1 Learning Objectives:
# 1 - Step 1 serves as your gateway to R scripts and, as such, you will learn the proper 'anatomy' for any R script.
# 2 - Learn how to install packages and load libraries into your R environment
# 3 - Understand the various file types that describe RNAseq data and how to import these files (e.g. kallisto read mapping data) into R
# 4 - Learn basic tools for annotation
.libPaths()
# Introduction to the Step 1 script----
# Step 1 Learning Objectives:
# 1 - Step 1 serves as your gateway to R scripts and, as such, you will learn the proper 'anatomy' for any R script.
# 2 - Learn how to install packages and load libraries into your R environment
# 3 - Understand the various file types that describe RNAseq data and how to import these files (e.g. kallisto read mapping data) into R
# 4 - Learn basic tools for annotation
avail <- BiocManager::available()
length(avail)
# Introduction to the Step 1 script----
# Step 1 Learning Objectives:
# 1 - Step 1 serves as your gateway to R scripts and, as such, you will learn the proper 'anatomy' for any R script.
# 2 - Learn how to install packages and load libraries into your R environment
# 3 - Understand the various file types that describe RNAseq data and how to import these files (e.g. kallisto read mapping data) into R
# 4 - Learn basic tools for annotation
.libPaths()
# Notes:
# This script is organized into 'chunks' of code, and the final chunk (called 'the essentials') is a minimal representation of this script.
BiocManager::install(c('tximport','ensembldb','EnsDb.Hsapiens.v86'), lib = "C:/Users/samjg/Documents/R/win-library/4.0")
library(beepr) #just for fun
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library('tximport') # package for getting Kallisto results into R
library('ensembldb') #helps deal with ensembl
library('EnsDb.Hsapiens.v86') #replace with your organism-specific database package
library('rhdf5') #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library('tximport') # package for getting Kallisto results into R
library('ensembldb') #helps deal with ensembl
install.packages('rappdirs')
library('ensembldb') #helps deal with ensembl
# read in your study design ----
#there are LOTS of ways to read data into R, but the readr package (from tidyverse) is one of the simplest
targets <- read_tsv("studydesign.txt")
# OPTIONAL: get annotations using BiomaRt----
# The annotation method described in the code chunk above works great if an organism-specific data base package exists for your organisms of interest
# however, this is only the case for human, mouse and rat....
# so, this optional code chunk shows one way you can get annotation data for other target organisms
# in this example, we're retrieving 1:1 mappings between transcript identifiers and gene symbols for the domesticated dog (Canis familiaris)
library(biomaRt) # an alternative for annotation
listMarts() #default host is ensembl.org, and most current release of mammalian genomes
#choose the 'mart' you want to work with
myMart <- useMart(biomart="ENSEMBL_MART_ENSEMBL")
#take a look at all available datasets within the selected mart
available.datasets <- listDatasets(myMart)
available.datasets
#now grab the ensembl annotations for dog
dog.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "cfamiliaris_gene_ensembl")
dog.filters <- listFilters(dog.anno)
dog.filters
#now grab the ensembl annotations for dog
dog.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "cfamiliaris_gene_ensembl")
available.datasets
#now grab the ensembl annotations for dog
dog.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "choffmanni_gene_ensembl")
dog.filters <- listFilters(dog.anno)
dog.filters
dog.filters
#now grab the ensembl annotations for dog
dog.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "choffmanni_gene_ensembl")
dog.filters <- listFilters(dog.anno)
#now grab the ensembl annotations for dog
dog.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "choffmanni_gene_ensembl")
Tx.dog <- getBM(attributes=c('ensembl_transcript_id_version',
'external_gene_name'),
mart = dog.anno)
Tx.dog <- as_tibble(Tx.dog)
Tx.dog
#we need to rename the two columns we just retreived from biomart
Tx.dog <- dplyr::rename(Tx.dog, target_id = ensembl_transcript_id_version,
gene_name = external_gene_name)
library(ggplot2)
data.table <- read.table("kopt.data", header = FALSE, col.names= c("k1","k2","Similarity", "Contigs"))
library(ggplot2)
data.table <- read.table("kopt.data", header = FALSE, col.names= c("k1","k2","Similarity", "Contigs"))
# load packages:
library("factoextra")
library("ggfortify")
library("dplyr")
# set wd
setwd("C:/Users/samjg/Documents/My_Projects/Pgenerosa_RNAseq_Metabolomics/")
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/Heartbeat_data/20200911_TrialSamples_Peaks_Neg.csv", header=T)
TrialPosPeaks <- read.csv(file="Data/Metabolomics/Heartbeat_data/20200911_TrialSamples_Peaks_Pos.csv", header=T)
SampleReference <- read.csv(file="Data/Metabolomics/Heartbeat_data/References.csv", header=T)
# set wd
setwd("C:/Users/samjg/Documents/My_Projects/Pgenerosa_RNAseq_Metabolomics")
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/Heartbeat_data/20200911_TrialSamples_Peaks_Neg.csv", header=T)
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", header=T)
TrialPosPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Pos.csv", header=T)
SampleReference <- read.csv(file="Data/Metabolomics/References.csv", header=T)
TrialNegPeaks
# load data
TrialNegPeaks <- read.csv(file="/Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", header=T)
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", header=T)
TrialNegPeaks
# set wd
setwd("C:/Users/samjg/Documents/My_Projects/Pgenerosa_RNAseq_Metabolomics/")
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", header=T)
SampleReference <- read.csv(file="Data/Metabolomics/References.csv", header=T)
SampleReference <- read.csv(file="Data/Metabolomics/References.csv", header=T)
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", header=T)
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", header=F)
TrialNegPeaks
colnames(TrialNegPeaks)
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", header=T)
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", header=T, sep=',')
# load packages:
library("factoextra")
library("ggfortify")
library("dplyr")
# set wd
setwd("C:/Users/samjg/Documents/My_Projects/Pgenerosa_RNAseq_Metabolomics/")
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", header=T, sep=',')
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", header=T, sep=',')
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", header=T)
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", header=F)
TrialNegPeaks
TrialNegPeaks <- TrialNegPeaks[-1,]
TrialNegPeaks
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", header=F)
TrialNegPeaks2 <- TrialNegPeaks[,-1]
TrialNegPeaks2
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", header=T)
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", header=T)
TrialPosPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Pos.csv", header=T)
# set wd
setwd("C:/Users/samjg/Documents/My_Projects/Pgenerosa_RNAseq_Metabolomics/")
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", header=T)
TrialPosPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Pos.csv", header=T)
SampleReference <- read.csv(file="Data/Metabolomics/References.csv", header=T)
# load packages:
library("factoextra")
library("ggfortify")
library("dplyr")
# set wd
setwd("C:/Users/samjg/Documents/My_Projects/Pgenerosa_RNAseq_Metabolomics/")
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", header=T)
TrialPosPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Pos.csv", header=T)
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", header=T)
TrialPosPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Pos.csv", header=T)
SampleReference <- read.csv(file="Data/Metabolomics/References.csv", header=T)
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg", header=T)
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", header=T)
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", sep ="'")
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", sep =",")
TrialNegPeaks
SampleReference <- read.csv(file="Data/Metabolomics/References.csv", header=T)
SampleReference <- read.csv(file="Data/Metabolomics/References.csv", header=T, sep =",")
SampleReference <- read.csv(file="Data/Metabolomics/References.csv", sep =",")
SampleReference
# load packages:
library("factoextra")
library("ggfortify")
library("dplyr")
# set wd
setwd("C:/Users/samjg/Documents/My_Projects/Pgenerosa_RNAseq_Metabolomics/")
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", sep =",")
TrialPosPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Pos.csv", header=T)
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", sep =",")
TrialPosPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Pos.csv", sep =",")
SampleReference <- read.csv(file="Data/Metabolomics/References.csv", sep =",")
TrialPosPeaks
# choose columns
colnames(TrialNegPeaks)
# choose columns
list(colnames(TrialNegPeaks))
TrialNegPeaks_2 <- TrialNegPeaks[c(9,17:25),]
TrialNegPeaks_2
TrialNegPeaks_2 <- TrialNegPeaks[,c(9,17:25)]
TrialNegPeaks_2
TrialPosPeaks_2 -< TrialPosPeaks[,c(9,17:25)]
TrialPosPeaks_2
TrialPosPeaks_2 <- TrialPosPeaks[,c(9,17:25)]
TrialPosPeaks_2
library("tidyr")
SampleReference
TrialNegPeaks_long <- TrialNegPeaks_2 %>% tidyr::pivot_longer(!compound, names_to = "Metabolomics_ID", values_to = "values")
TrialNegPeaks_long
TrialNegPeaks_long_refs <- merge(TrialNegPeaks_long, SampleReference, "Metabolomics_ID")
TrialNegPeaks_long_refs
TrialNegPeaks_long_refs <- merge(TrialNegPeaks_long, SampleReference, by="Metabolomics_ID")
TrialNegPeaks_long_refs
TrialNegPeaks_long_refs <- merge(TrialNegPeaks_long, SampleReference, by=Metabolomics_ID)
TrialNegPeaks_long <- TrialNegPeaks_2 %>% tidyr::pivot_longer(!compound, names_to = "Metabolomics_ID", values_to = "values")
TrialNegPeaks_long
SampleReference
TrialNegPeaks_long
SampleReference
# load packages:
library("factoextra")
library("ggfortify")
library("dplyr")
library("tidyr")
# set wd
setwd("C:/Users/samjg/Documents/My_Projects/Pgenerosa_RNAseq_Metabolomics/")
# load data
TrialNegPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Neg.csv", sep =",")
SampleReference <- read.csv(file="Data/Metabolomics/References.csv", sep =",")
TrialPosPeaks <- read.csv(file="Data/Metabolomics/20200911_TrialSamples_Peaks_Pos.csv", sep =",")
# choose columns
list(colnames(TrialNegPeaks))
TrialNegPeaks_2 <- TrialNegPeaks[,c(9,17:25)]
TrialPosPeaks_2 <- TrialPosPeaks[,c(9,17:25)]
TrialNegPeaks_long <- TrialNegPeaks_2 %>% tidyr::pivot_longer(!compound, names_to = "Metabolomics_ID", values_to = "values")
TrialNegPeaks_long_refs <- merge(TrialNegPeaks_long, SampleReference, by=Metabolomics_ID)
SampleReference
TrialNegPeaks_long
SampleReference
TrialNegPeaks_long <- TrialNegPeaks_2 %>% tidyr::pivot_longer(!compound, names_to = "Metabolomics_ID", values_to = "values")
TrialNegPeaks_long_refs <- merge(TrialNegPeaks_long, SampleReference, by=Metabolomics_ID)
TrialNegPeaks_long_refs <- merge(TrialNegPeaks_long, SampleReference, by=Metabolomics_ID)
TrialNegPeaks_long
SampleReference
TrialNegPeaks_long_refs <- merge(TrialNegPeaks_long, SampleReference, by='Metabolomics_ID')
TrialNegPeaks_long_refs
TrialPosPeaks_long <- TrialPosPeaks_2 %>% tidyr::pivot_longer(!compound, names_to = "Metabolomics_ID", values_to = "values")
TrialPosPeaks_long_refs <- merge(TrialPosPeaks_long, SampleReference, by='Metabolomics_ID')
TrialPosPeaks_long_refs
TrialPosPeaks_long_refs
TrialPosPeaks_wide_refs <- TrialPosPeaks_long_refs %>% pivot_wider(names_from = compound, values_from = values)
TrialPosPeaks_wide_refs
TrialNegPeaks_wide_refs <- TrialNegPeaks_long_refs %>% pivot_wider(names_from = compound, values_from = values)
TrialNegPeaks_wide_refs
# PCA
list(colnames(TrialPosPeaks_wide_refs))
# PCA
list(colnames(TrialNegPeaks_wide_refs)) # negative peaks
list(colnames(TrialPosPeaks_wide_refs)) # positive peaks
:
S_negpeaks <- cov(TrialNegPeaks_wide_refs[,8:106])  # Find the covariance matrix S of the data. The grouping column is not included.
S_negpeaks
TrialNegPeaks_wide_refs
sum(diag(S_negpeaks)) # The total variance is defined as: ∑j=1ksjj Which is also equal to the sum of the eigenvalues of S
s.eigen_negpeaks <- eigen(S_negpeaks) # Compute the eigenvalues and corresponding eigenvectors of S.
s.eigen_negpeaks
# The eigenvectors represent the principal components of S.
# The eigenvalues of S are used to find the proportion of the total variance explained by the components.
for (s in s.eigen_negpeaks$values) {
print(s / sum(s.eigen_negpeaks$values))
}
# 0.8941043 PCA1
# 0.09588464 PCA 2
# The first two principal components account for 90% of the total variance.
# A scree graph of the eigenvalues can be plotted to visualize the proportion of
# variance explained by each subsequential eigenvalue.
plot(s.eigen_negpeaks$values, xlab = 'Eigenvalue Number', ylab = 'Eigenvalue Size', main = 'Scree Graph')
lines(s.eigen_negpeaks$values) # you can see a high drop off from PCA 1 to PCA 2
s.eigen_negpeaks$vectors
negpeaks.pca <- prcomp(TrialNegPeaks_wide_refs[,8:106])
negpeaks.pca
summary(negpeaks.pca)
TrialNegPeaks_wide_refs
negpeaks.plot <- autoplot(negpeaks.pca, data = TrialNegPeaks_wide_refs, colour = 'Treatment_second')
negpeaks.plot
negpeaks.pca
TrialNegPeaks_wide_refs
TrialNegPeaks_wide_refs
TrialPosPeaks_long_refs
TrialPosPeaks_wide_refs <- TrialPosPeaks_long_refs %>% pivot_wider(names_from = Metabolomics_ID, values_from = values)
TrialPosPeaks_wide_refs
TrialPosPeaks_long_refs
TrialPosPeaks_wide_refs
TrialPosPeaks_long_refs
TrialPosPeaks_long
TrialPosPeaks_wide_refs
TrialPosPeaks_long_refs
TrialPosPeaks_long
TrialPosPeaks_2
TrialPosPeaks_long
negpeaks.plot <- autoplot(negpeaks.pca, data = TrialNegPeaks_wide_refs, colour = 'compound')
negpeaks.plot
TrialNegPeaks_wide_refs
negpeaks.plot <- autoplot(negpeaks.pca, data = TrialNegPeaks_wide_refs, colour = 'Treatment_second')
negpeaks.plot
# NEGATIVE PEAKS
S_negpeaks <- cov(TrialNegPeaks_wide_refs[,8:106])  # Find the covariance matrix S of the data. The grouping column is not included.
S_negpeaks
TrialNegPeaks_wide_refs
# NEGATIVE PEAKS
S_negpeaks <- cov(TrialNegPeaks_wide_refs[,c(6,8:106)])  # Find the covariance matrix S of the data. The grouping column is not included.
# NEGATIVE PEAKS
S_negpeaks <- cov(TrialNegPeaks_wide_refs[,8:106])  # Find the covariance matrix S of the data. The grouping column is not included.
S_negpeaks
TrialNegPeaks_wide_refs[,8:106]
TrialNegPeaks_wide_refs
list(colnames(TrialPosPeaks_wide_refs)) # positive peaks
# PCA
list(colnames(TrialNegPeaks_wide_refs)) # negative peaks
sum(diag(S_negpeaks)) # The total variance is defined as: ∑j=1ksjj Which is also equal to the sum of the eigenvalues of S
# 0.8941043 PCA1
# 0.09588464 PCA 2
# The first two principal components account for 90% of the total variance.
# A scree graph of the eigenvalues can be plotted to visualize the proportion of
# variance explained by each subsequential eigenvalue.
# plotting PCA and summary status
plot(s.eigen_negpeaks$values, xlab = 'Eigenvalue Number', ylab = 'Eigenvalue Size', main = 'Scree Graph')
lines(s.eigen_negpeaks$values) # you can see a high drop off from PCA 1 to PCA 2
s.eigen_negpeaks$vectors
TrialNegPeaks_wide_refs
TrialPosPeaks_long_refs
TrialPosPeaks_2
negpeaks.plot$data
#Interpretation of principal components is still a heavily researched topic in statistics, and although the components
# may be readily interpreted in most settings, this is not always the case (Joliffe, 2002).
#One method of interpretation of the principal components is to calculate the correlation
# between the original data and the component. The autoplot() function also generates a nice
# data table with the original variables and the calculated PCs, which we will use here to find the correlations.
# First, compute the correlations between the data and the calculated components of the covariance matrix S.
comps <- negpeaks.plot$data[,c(1:2)]
comps
comps
cor(comps[,3:8], comps[,c(1:2,10)])
comps
cor(comps[,1:2], comps[,c(1:2,10)])
(
#Interpretation of principal components is still a heavily researched topic in statistics, and although the components
# may be readily interpreted in most settings, this is not always the case (Joliffe, 2002).
#One method of interpretation of the principal components is to calculate the correlation
# between the original data and the component. The autoplot() function also generates a nice
# data table with the original variables and the calculated PCs, which we will use here to find the correlations.
# First, compute the correlations between the data and the calculated components of the covariance matrix S.
comps <- negpeaks.plot$data[,c(1:2)]
comps
#Interpretation of principal components is still a heavily researched topic in statistics, and although the components
# may be readily interpreted in most settings, this is not always the case (Joliffe, 2002).
#One method of interpretation of the principal components is to calculate the correlation
# between the original data and the component. The autoplot() function also generates a nice
# data table with the original variables and the calculated PCs, which we will use here to find the correlations.
# First, compute the correlations between the data and the calculated components of the covariance matrix S.
comps <- negpeaks.plot$data[,c(1:2)]
comps
TrialPosPeaks_2
TrialPosPeaks_2
TrialPosPeaks_long
TrialPosPeaks_wide_refs
TrialPosPeaks_long_refs
TrialPosPeaks_wide_refs <- TrialPosPeaks_long_refs %>% pivot_wider(names_from = compound, values_from = values)
TrialPosPeaks_wide_refs
library(factoextra)
TrialPosPeaks_wide_refs
# PCA
list(colnames(TrialNegPeaks_wide_refs)) # negative peaks
list(colnames(TrialPosPeaks_wide_refs)) # positive peaks
# NEGATIVE PEAKS
TrialNegPeaks_treatprimary <- TrialNegPeaks_wide_refs[,c(6,8:106])
# NEGATIVE PEAKS
TrialNegPeaks_treatprimary <- TrialNegPeaks_wide_refs[,c(6,8:106)])
# NEGATIVE PEAKS
TrialNegPeaks_treatprimary <- TrialNegPeaks_wide_refs[,c(6,8:106)]
TrialNegPeaks_treatprimary
res.pca <- prcomp(TrialNegPeaks_treatprimary, scale = TRUE)
rownames(TrialNegPeaks_treatprimary) <- TrialNegPeaks_treatprimary[,1]
TrialNegPeaks_treatprimary
T
# NEGATIVE PEAKS
TrialNegPeaks_treatprimary2 <- TrialNegPeaks_treatprimary[,-1]
TrialNegPeaks_treatprimary2
rownames(TrialNegPeaks_treatprimary2) <- TrialNegPeaks_treatprimary[,1]
TrialNegPeaks_treatprimary2
rownames(TrialNegPeaks_treatprimary2) <- TrialNegPeaks_treatprimary[,1]
# NEGATIVE PEAKS
TrialNegPeaks_treatprimary <- TrialNegPeaks_wide_refs[,c(6,8:106)]
TrialNegPeaks_treatprimary
colnames(TrialNegPeaks_treatprimary)
TrialNegPeaks_treatprimary2 <- TrialNegPeaks_treatprimary %>% remove_rownames %>% column_to_rownames(var="Treatment_primary")
library("tidyverse")
TrialNegPeaks_treatprimary2 <- TrialNegPeaks_treatprimary %>% remove_rownames %>% column_to_rownames(var="Treatment_primary")
TrialNegPeaks_treatprimary2
TrialNegPeaks_treatprimary2 <- TrialNegPeaks_treatprimary %>% remove_rownames %>% column_to_rownames(var="Treatment_primary")
# NEGATIVE PEAKS
TrialNegPeaks_treatprimary <- TrialNegPeaks_wide_refs[,c(6,8:106)]
TrialNegPeaks_wide_refs
TrialNegPeaks_wide_refs
# NEGATIVE PEAKS
TrialNegPeaks_treatprimary <- TrialNegPeaks_wide_refs[,c(1,8:106)]
TrialNegPeaks_treatprimary2 <- TrialNegPeaks_treatprimary %>% remove_rownames %>% column_to_rownames(var="Metabolomics_ID")
TrialNegPeaks_treatprimary2
res.pca <- prcomp(TrialNegPeaks_treatprimary2, scale = TRUE)
fviz_eig(res.pca)
fviz_pca_ind(res.pca,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_pca_var(res.pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_pca_biplot(res.pca, repel = TRUE,
col.var = "#2E9FDF", # Variables color
col.ind = "#696969"  # Individuals color
)
TrialNegPeaks_wide_refs
TrialPosPeaks_wide_refs
TrialNegPeaks_treatprimary
TrialNegPeaks_wide_refs
TrialNegPeaks_wide_refs[c(4:9),c(1,8:106)]
TrialPosPeaks_wide_refs <- TrialPosPeaks_long_refs %>% pivot_wider(names_from = compound, values_from = values)
TrialNegPeaks_wide_refs[c(4:9),c(1,8:106)]
TrialPosPeaks_long_refs
TrialPosPeaks_wide_refs <- TrialPosPeaks_long_refs %>% pivot_wider(names_from = compound, values_from = values)
TrialPosPeaks_wide_refs
TrialNegPeaks_wide_refs[c(4:9),c(6,8:106)]
TrialNegPeaks_wide_refs
TrialNegPeaks_wide_refs[c(4:9),c(6,8:106)]
test2 <- test[, lapply(mean), by=Treatment_primary]
test
test <- TrialNegPeaks_wide_refs[c(4:9),c(6,8:106)] # only days 4 and 11 and calling treatment
test2 <- test[, lapply(mean), by=Treatment_primary]
test2
test
test2 <- test[, lapply(mean), by=Treatment_primary]
