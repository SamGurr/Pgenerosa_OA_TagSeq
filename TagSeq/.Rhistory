# Differential expression analysis
#=====================================================================================
# About: Log fold change shrinkage for visualization and ranking
# Run DESeq : Modeling counts with the specified design(dds) treatment effects
#======================================================================================= #
# ALL TREATMENTS AND TIMEPOINTS
dds.all.treatments <- DESeq(dds.all.treatments) # wait for this to complete....
resultsNames(dds.all.treatments) # view the names of your results model
cts.matrix.d0
dds.primary.d0 <- DESeq(dds.primary.d0) # wait for this to complete....
resultsNames(dds.primary.d0) # view the names of your results model 'Primary_Treatment_M_vs_A'
# Note: these are all different ways of looking at the same results...
res.d0 <- results(dds.primary.d0, name="Primary_Treatment_M_vs_A")
res.d0.contrasts <- results(dds.primary.d0, contrast=c("Primary_Treatment","M","A")) # alternative way of calling the results (i.e. Day_DAY21_vs_Day0)
res.d0
res.d0_Ordered <- res.d0[order(res.d0$pvalue),] # how to order based on p-valuel
res.d0_Ordered # ordered based on pvalue
sum(res.d0_Ordered$padj < 0.1, na.rm=TRUE) # 27 marginal DEGs
sum(res.d0_Ordered$padj < 0.05, na.rm=TRUE) # 14 significant DEGs
summary(res.d0)
# Plot dispersions
png("primary.d0-dispersions.png", 1000, 1000, pointsize=20)
plotDispEsts(dds.primary.d0, main="Dispersion plot")
dev.off()
# Plot dispersions
png("primary.d0-dispersions.png", 1000, 1000, pointsize=20)
plotDispEsts(dds.primary.d0, main="Dispersion plot_M_vs._A_Day0")
dev.off()
# Regularized log transformation for clustering/heatmaps, etc
rld.d0.primary <- rlogTransformation(res.d0)
# Regularized log transformation for clustering/heatmaps, etc
rld.d0.primary <- rlogTransformation(dds.primary.d0)
head(assay(rld))
head(assay(rld.d0.primary))
hist(assay(rld.d0.primary))
head(assay(res.d0))
hist(assay(res.d0))
# Colors for plots below
## Ugly:
## (mycols <- 1:length(unique(condition)))
## Use RColorBrewer, better
library(RColorBrewer)
(mycols <- brewer.pal(8, "Dark2")[1:length(unique(condition))])
rld.d0.primary
(mycols <- brewer.pal(8, "Dark2")[1:length(unique(Primary_Treatment))])
# Sample distance heatmap
sampleDists <- as.matrix(dist(t(assay(rld.d0.primary))))
sampleDists
png("M_vs._A_Day0-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[condition], RowSideColors=mycols[condition],
margin=c(10, 10), main="Sample Distance Matrix")
library(gplots)
png("M_vs._A_Day0-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[condition], RowSideColors=mycols[condition],
margin=c(10, 10), main="Sample Distance Matrix")
png("M_vs._A_Day0-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[condition], RowSideColors=mycols[Primary_Treatment],
margin=c(10, 10), main="Sample Distance Matrix")
(mycols <- brewer.pal(8, "Dark2")[1:length(unique(condition))])
rld.d0.primary
(mycols <- brewer.pal(8, "Dark2")[1:length(unique(Primary_Treatment))])
(mycols <- brewer.pal(8, "Dark2")[1:length(unique(condition))])
mycols <- brewer.pal(8, "Dark2")[1:length(unique(Primary_Treatment))])
mycols <- brewer.pal(8, "Dark2")[1:length(unique(Primary_Treatment))]
rld.d0.primary
mycols <- brewer.pal(8, "Dark2")[1:length(unique(rld.d0.primary$Primary_Treatment))]
png("M_vs._A_Day0-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[condition], RowSideColors=mycols[condition],
margin=c(10, 10), main="Sample Distance Matrix")
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[condition], RowSideColors=mycols[Primary_Treatment],
margin=c(10, 10), main="Sample Distance Matrix")
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[condition], RowSideColors=mycols[rld.d0.primary$Primary_Treatment],
margin=c(10, 10), main="Sample Distance Matrix")
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[rld.d0.primary$Primary_Treatment], RowSideColors=mycols[rld.d0.primary$Primary_Treatment],
margin=c(10, 10), main="Sample Distance Matrix")
png("M_vs._A_Day0-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[rld.d0.primary$Primary_Treatment], RowSideColors=mycols[rld.d0.primary$Primary_Treatment],
margin=c(10, 10), main="Sample Distance Matrix")
dev.off()
# Get differential expression results
resd0.primary <- results(dds.primary.d0)
table(resd0.primary$padj<0.05)
## Order by adjusted p-value
resd0.primary <- resd0.primary[order(resd0.primary$padj), ]
resd0.primary
## Merge with normalized count data
resdata.d0.primary  <- merge(as.data.frame(resd0.primary), as.data.frame(counts(dds.primary.d0, normalized=TRUE)), by="row.names", sort=FALSE)
resdata.d0.primary
names(resdata.d0.primary)[1] <- "Gene"
head(resdata.d0.primary)
## Write results
write.csv(resdata, file="D0.PrimaryTreatment_diffexpr-results.csv")
## Write results
write.csv(resdata.d0.primary, file="D0.PrimaryTreatment_diffexpr-results.csv")
## Examine plot of p-values
hist(resd0.primary$pvalue, breaks=50, col="grey")
## Examine plot of p-values
hist(resd0.primary$pvalue, col="grey") # view histogram
## Examine plot of p-values
hist(resd0.primary$pvalue, breaks=50, col="grey") # view histogram
## Examine independent filtering
attr(resd0.primary, "filterThreshold")
plot(attr(resd0.primary,"filterNumRej"), type="b", xlab="quantiles of baseMean", ylab="number of rejections")
## Examine independent filtering
attr(resd0.primary, "filterThreshold")
resd0.primary
## Volcano plot with "significant" genes labeled
volcanoplot <- function (resd0.primary, lfcthresh=2, sigthresh=0.05, main="Volcano Plot", legendpos="bottomright", labelsig=TRUE, textcx=1, ...) {
with(resd0.primary, plot(log2FoldChange, -log10(pvalue), pch=20, main=main, ...))
with(subset(resd0.primary, padj<sigthresh ), points(log2FoldChange, -log10(pvalue), pch=20, col="red", ...))
with(subset(resd0.primary, abs(log2FoldChange)>lfcthresh), points(log2FoldChange, -log10(pvalue), pch=20, col="orange", ...))
with(subset(resd0.primary, padj<sigthresh & abs(log2FoldChange)>lfcthresh), points(log2FoldChange, -log10(pvalue), pch=20, col="green", ...))
if (labelsig) {
require(calibrate)
with(subset(resd0.primary, padj<sigthresh & abs(log2FoldChange)>lfcthresh), textxy(log2FoldChange, -log10(pvalue), labs=Gene, cex=textcx, ...))
}
legend(legendpos, xjust=1, yjust=1, legend=c(paste("FDR<",sigthresh,sep=""), paste("|LogFC|>",lfcthresh,sep=""), "both"), pch=20, col=c("red","orange","green"))
}
volcanoplot
png("D0.PrimaryTreatment_diffexpr-volcanoplot.png", 1200, 1000, pointsize=20)
volcanoplot(resdata.d0.primary, lfcthresh=1, sigthresh=0.05, textcx=.8, xlim=c(-2.3, 2))
volcanoplot(resdata.d0.primary, lfcthresh=1, sigthresh=0.05, textcx=.8, xlim=c(-2.3, 2))
install.packages("calibrate")
library("calibrate")
volcanoplot(resdata.d0.primary, lfcthresh=1, sigthresh=0.05, textcx=.8, xlim=c(-2.3, 2))
dev.off()
volcanoplot(resdata.d0.primary, lfcthresh=1, sigthresh=0.05, textcx=.8, xlim=c(-4, 4))
dev.off()
volcanoplot(resdata.d0.primary, lfcthresh=1, sigthresh=0.05, textcx=.5, xlim=c(-4, 4))
dev.off()
volcanoplot(resdata.d0.primary, lfcthresh=1, sigthresh=0.05, textcx=.1, xlim=c(-4, 4))
dev.off()
## MA plot
## Could do with built-in DESeq2 function:
## DESeq2::plotMA(dds, ylim=c(-1,1), cex=1)
DO.primary_maplot <- function (resd0.primary, thresh=0.05, labelsig=TRUE, textcx=1, ...) {
with(res, plot(baseMean, log2FoldChange, pch=20, cex=.5, log="x", ...))
with(subset(resd0.primary, padj<thresh), points(baseMean, log2FoldChange, col="red", pch=20, cex=1.5))
if (labelsig) {
require(calibrate)
with(subset(resd0.primary, padj<thresh), textxy(baseMean, log2FoldChange, labs=Gene, cex=textcx, col=2))
}
}
DO.primary_maplot
png("Day0_primary_diffexpr-maplot.png", 1500, 1000, pointsize=20)
maplot(resdata.d0.primary, main="MA Plot")
maplot?
## Volcano plot with "significant" genes labeled
volcanoplot <- function (resd0.primary, lfcthresh=2, sigthresh=0.05, main="Volcano Plot", legendpos="bottomright", labelsig=TRUE, textcx=1, ...) {
with(resd0.primary, plot(log2FoldChange, -log10(pvalue), pch=20, main=main, ...))
with(subset(resd0.primary, padj<sigthresh ), points(log2FoldChange, -log10(pvalue), pch=20, col="red", ...))
with(subset(resd0.primary, abs(log2FoldChange)>lfcthresh), points(log2FoldChange, -log10(pvalue), pch=20, col="orange", ...))
with(subset(resd0.primary, padj<sigthresh & abs(log2FoldChange)>lfcthresh), points(log2FoldChange, -log10(pvalue), pch=20, col="green", ...))
if (labelsig) {
require(calibrate)
with(subset(resd0.primary, padj<sigthresh & abs(log2FoldChange)>lfcthresh), textxy(log2FoldChange, -log10(pvalue), labs=Gene, cex=textcx, ...))
}
legend(legendpos, xjust=1, yjust=1, legend=c(paste("FDR<",sigthresh,sep=""), paste("|LogFC|>",lfcthresh,sep=""), "both"), pch=20, col=c("red","orange","green"))
}
BiocManager::install("affycoretools")
library(affycoretools) # note: this was previously installed with the BiocManager::install("affycoretools")
png("Day0_primary_diffexpr-maplot.png", 1500, 1000, pointsize=20)
maplot(resdata.d0.primary, main="MA Plot")
dev.off()
## Volcano plot with "significant" genes labeled
volcanoplot <- function (resd0.primary, lfcthresh=2, sigthresh=0.05, main="Volcano Plot", legendpos="bottomright", labelsig=TRUE, textcx=1, ...) {
with(resd0.primary, plot(log2FoldChange, -log10(pvalue), pch=20, main=main, ...))
with(subset(resd0.primary, padj<sigthresh ), points(log2FoldChange, -log10(pvalue), pch=20, col="red", ...))
with(subset(resd0.primary, abs(log2FoldChange)>lfcthresh), points(log2FoldChange, -log10(pvalue), pch=20, col="orange", ...))
with(subset(resd0.primary, padj<sigthresh & abs(log2FoldChange)>lfcthresh), points(log2FoldChange, -log10(pvalue), pch=20, col="green", ...))
if (labelsig) {
require(calibrate)
with(subset(resd0.primary, padj<sigthresh & abs(log2FoldChange)>lfcthresh), textxy(log2FoldChange, -log10(pvalue), labs=Gene, cex=textcx, ...))
}
legend(legendpos, xjust=1, yjust=1, legend=c(paste("FDR<",sigthresh,sep=""), paste("|LogFC|>",lfcthresh,sep=""), "both"), pch=20, col=c("red","orange","green"))
}
png("D0.PrimaryTreatment_diffexpr-volcanoplot.png", 1200, 1000, pointsize=20)
volcanoplot(resdata.d0.primary, lfcthresh=1, sigthresh=0.05, textcx=.5, xlim=c(-4, 4))
dev.off()
# Principal components analysis ------------------------------------------------------------------------------------------------------ #
## Could do with built-in DESeq2 function:
## DESeq2::plotPCA(rld, intgroup="condition")
## I like mine better:
rld_pca.do.primary <- function (rld.d0.primary, intgroup = "condition", ntop = 500, colors=NULL, legendpos="bottomleft", main="PCA Biplot", textcx=1, ...) {
require(genefilter)
require(calibrate)
require(RColorBrewer)
rv = rowVars(assay(rld.d0.primary))
select = order(rv, decreasing = TRUE)[seq_len(min(ntop, length(rv)))]
pca = prcomp(t(assay(rld.d0.primary)[select, ]))
fac = factor(apply(as.data.frame(colData(rld.d0.primary)[, intgroup, drop = FALSE]), 1, paste, collapse = " : "))
if (is.null(colors)) {
if (nlevels(fac) >= 3) {
colors = brewer.pal(nlevels(fac), "Paired")
}   else {
colors = c("black", "red")
}
}
pc1var <- round(summary(pca)$importance[2,1]*100, digits=1)
pc2var <- round(summary(pca)$importance[2,2]*100, digits=1)
pc1lab <- paste0("PC1 (",as.character(pc1var),"%)")
pc2lab <- paste0("PC1 (",as.character(pc2var),"%)")
plot(PC2~PC1, data=as.data.frame(pca$x), bg=colors[fac], pch=21, xlab=pc1lab, ylab=pc2lab, main=main, ...)
with(as.data.frame(pca$x), textxy(PC1, PC2, labs=rownames(as.data.frame(pca$x)), cex=textcx))
legend(legendpos, legend=levels(fac), col=colors, pch=20)
#     rldyplot(PC2 ~ PC1, groups = fac, data = as.data.frame(pca$rld),
#            pch = 16, cerld = 2, aspect = "iso", col = colours, main = draw.key(key = list(rect = list(col = colours),
#                                                                                         terldt = list(levels(fac)), rep = FALSE)))
}
png("Day0.Primary.qc-pca.png", 1000, 1000, pointsize=20)
rld_pca(rld.d0.primary, colors=mycols, intgroup="condition", xlim=c(-75, 35))
rld_pca.do.primary(rld.d0.primary, colors=mycols, intgroup="condition", xlim=c(-75, 35))
rld_pca.do.primary(rld.d0.primary, colors=mycols, intgroup="Primary_Treatment", xlim=c(-75, 35))
dev.off()
## MA plot ------------------------------------------------------------------------------------------------------ #
## Could do with built-in DESeq2 function:
## DESeq2::plotMA(dds, ylim=c(-1,1), cex=1)
DO.primary_maplot <- function (resd0.primary, thresh=0.05, labelsig=TRUE, textcx=1, ...) {
with(res, plot(baseMean, log2FoldChange, pch=20, cex=.5, log="x", ...))
with(subset(resd0.primary, padj<thresh), points(baseMean, log2FoldChange, col="red", pch=20, cex=1.5))
if (labelsig) {
require(calibrate)
with(subset(resd0.primary, padj<thresh), textxy(baseMean, log2FoldChange, labs=Gene, cex=textcx, col=2))
}
}
png("Day0_primary_diffexpr-maplot.png", 1500, 1000, pointsize=20)
maplot(resdata.d0.primary, main="MA Plot")
maplot(resdata.d0.primary)
dev.off()
resultsNames(dds.primary.d0) # view the names of your results model 'Primary_Treatment_M_vs_A'
res.d0 <- results(dds.primary.d0, name="Primary_Treatment_M_vs_A")
res.d0.contrasts <- results(dds.primary.d0, contrast=c("Primary_Treatment","M","A")) # alternative way of calling the results (i.e. Day_DAY21_vs_Day0)
res.d0_Ordered <- res.d0[order(res.d0$pvalue),] # how to order based on p-valuel
res.d0_Ordered # ordered based on pvalue
sum(res.d0_Ordered$padj < 0.1, na.rm=TRUE) # 27 marginal DEGs
sum(res.d0_Ordered$padj < 0.05, na.rm=TRUE) # 14 significant DEGs
# Plot dispersions
png("Day0.PrimaryTreatment-dispersions.png", 1000, 1000, pointsize=20)
plotDispEsts(dds.primary.d0, main="Dispersion plot_M_vs._A_Day0")
dev.off()
# Regularized log transformation for clustering/heatmaps, etc
rld.d0.primary <- rlogTransformation(dds.primary.d0) # rlog transform (regularized log)
head(assay(rld.d0.primary)) # view first few rows
hist(assay(rld.d0.primary)) # view histogram
hist(assay(rld.d0.primary)) # view histogram
hist(assay(rld.d0.primary)) # view histogram
# Colors for plots below; Use RColorBrewer, better and assign mycols variable
mycols <- brewer.pal(8, "Dark2")[1:length(unique(rld.d0.primary$Primary_Treatment))]
mycols
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[rld.d0.primary$Primary_Treatment], RowSideColors=mycols[rld.d0.primary$Primary_Treatment],
margin=c(10, 10), main="Sample Distance Matrix")
png("Day0.PrimaryTreatment-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[rld.d0.primary$Primary_Treatment], RowSideColors=mycols[rld.d0.primary$Primary_Treatment],
margin=c(10, 10), main="Sample Distance Matrix")
dev.off()
# Get differential expression results
resd0.primary <- results(dds.primary.d0)
resd0.primary
res.d0
table(resd0.primary$padj<0.05)
## Order by adjusted p-value
resd0.primary <- resd0.primary[order(resd0.primary$padj), ]
resd0.primary
## Merge with normalized count data
resdata.d0.primary  <- merge(as.data.frame(resd0.primary), as.data.frame(counts(dds.primary.d0, normalized=TRUE)), by="row.names", sort=FALSE)
resdata.d0.primary
resd0.primary
dds.primary.d0
as.data.frame(counts(dds.primary.d0, normalized=TRUE))
as.data.frame(resd0.primary)
resultsNames(dds.all.treatments) # view the names of your results model
# Get differential expression results
res.ALL <- results(dds.all.treatments)
table(res.ALL$padj<0.05)
res.ALL
table(res.ALL$padj<0.05)
resultsNames(dds.all.treatments) # view the names of your results model
res.ALL <- results(dds.all.treatments, name="All_Treatment_M.d0_vs_A.d0")
table(res.test$padj<0.05)
res.test <- results(dds.all.treatments, name="All_Treatment_M.d0_vs_A.d0")
table(res.test$padj<0.05)
res.test.contrasts <- results(dds.all.treatments, contrast=c("All_Treatment","M.d0","A.d0")) # alternative way of calling the results (i.e. Day_DAY21_vs_Day0)
table(res.test.contrasts$padj<0.05)
# Get differential expression results
resd0.primary <- results(dds.primary.d0)
table(resd0.primary$padj<0.05)
res.d0 <- results(dds.primary.d0, name="Primary_Treatment_M_vs_A")
res.d0.contrasts <- results(dds.primary.d0, contrast=c("Primary_Treatment","M","A")) # alternative way of calling the results (i.e. Day_DAY21_vs_Day0)
table(res.d0$padj<0.05)
table(res.d0.contrasts$padj<0.05)
res.d0_Ordered <- res.d0[order(res.d0$pvalue),] # how to order based on p-valuel
res.d0_Ordered # ordered based on pvalue
sum(res.d0_Ordered$padj < 0.1, na.rm=TRUE) # 27 marginal DEGs
sum(res.d0_Ordered$padj < 0.05, na.rm=TRUE) # 14 significant DEGs
summary(res.d0)
sum(res.d0_Ordered$padj < 0.05, na.rm=TRUE) # 14 significant DEGs
summary(res.d0)
## Examine plot of p-values
hist(resd0.primary$pvalue, breaks=50, col="grey") # view histogram
dds.primary.d21 <- DESeq(dds.primary.d21) # wait for this to complete....
resultsNames(dds.primary.d21) # view the names of your results model 'Primary_Treatment_M_vs_A'
# Note: these are all different ways of looking at the same results...
res.d21 <- results(dds.primary.d21) # view DESeq2 results
table(res.d21$padj<0.05) # should be the same as 'resd0.primary'
res.d21 <- results(dds, name="Primary_Treatment_M_vs_A")
table(res.d21$padj<0.05) # should be the same as 'res.d21'
resultsNames(dds.primary.d21) # view the names of your results model 'Primary_Treatment_M_vs_A'
res.d21 <- results(dds, name="Primary_Treatment_M_vs_A")
res.d21 <- results(dds.primary.d21, name="Primary_Treatment_M_vs_A")
table(res.d21$padj<0.05) # should be the same as 'res.d21'
res.D21.contrasts <- results(dds.primary.d21, contrast=c("Primary_Treatment","M","A")) # alternative way of calling the results (i.e. Day_DAY21_vs_Day0)
table(res.D21.contrasts$padj<0.05) # should be the same as 'res.d21'
res.d21_Ordered <- res.d21[order(res.d21$pvalue),] # how to order based on p-value
res.d21_Ordered # ordered based on pvalue
sum(res.d21_Ordered$padj < 0.1, na.rm=TRUE) # 331 marginal DEGs
sum(res.d21_Ordered$padj < 0.05, na.rm=TRUE) # 196 significant DEGs
summary(res.d21)
## Merge with normalized count data --------------------------------------------------- #
resdata.d21.primary  <- merge(as.data.frame(res.d21), as.data.frame(counts(dds.primary.d21, normalized=TRUE)), by="row.names", sort=FALSE)
names(resdata.d21.primary)[1] <- "Gene"
head(resdata.d21.primary)
## Write results
write.csv(resdata.d21.primary, file="D21.PrimaryTreatment_diffexpr-results.csv")
# Plot dispersions -------------------------------------------------------------------- #
png("Day21.PrimaryTreatment-dispersions.png", 1000, 1000, pointsize=20)
plotDispEsts(dds.primary.d21, main="Day21.PrimaryTreatment_Dispersion plot")
dev.off()
# Regularized log transformation for clustering/heatmaps, etc ------------------------- #
rld.d21.primary <- rlogTransformation(dds.primary.d21) # rlog transform (regularized log)
# Colors for plots below; Use RColorBrewer, better and assign mycols variable --------- #
mycols <- brewer.pal(8, "Dark2")[1:length(unique(rld.d0.primary$Primary_Treatment))]
# Colors for plots below; Use RColorBrewer, better and assign mycols variable --------- #
mycols <- brewer.pal(8, "Dark2")[1:length(unique(rld.d21.primary$Primary_Treatment))]
# Sample distance heatmap ------------------------------------------------------------- #
sampleDists <- as.matrix(dist(t(assay(rld.d21.primary))))
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[rld.d21.primary$Primary_Treatment], RowSideColors=mycols[rld.d21.primary$Primary_Treatment],
margin=c(10, 10), main="Sample Distance Matrix")
dev.off()
png("Day21.PrimaryTreatment-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[rld.d21.primary$Primary_Treatment], RowSideColors=mycols[rld.d21.primary$Primary_Treatment],
margin=c(10, 10), main="Sample Distance Matrix")
dev.off()
# Principal components analysis ------------------------------------------------------------------------------------------------------ #
## Could do with built-in DESeq2 function:
## DESeq2::plotPCA(rld, intgroup="condition")
rld_pca.d21.primary <- function (rld.d21.primary, intgroup = "condition", ntop = 500, colors=NULL, legendpos="bottomleft", main="PCA Biplot", textcx=1, ...) {
require(genefilter)
require(calibrate)
require(RColorBrewer)
rv = rowVars(assay(rld.d21.primary))
select = order(rv, decreasing = TRUE)[seq_len(min(ntop, length(rv)))]
pca = prcomp(t(assay(rld.d0.primary)[select, ]))
fac = factor(apply(as.data.frame(colData(rld.d21.primary)[, intgroup, drop = FALSE]), 1, paste, collapse = " : "))
if (is.null(colors)) {
if (nlevels(fac) >= 3) {
colors = brewer.pal(nlevels(fac), "Paired")
}   else {
colors = c("black", "red")
}
}
pc1var <- round(summary(pca)$importance[2,1]*100, digits=1)
pc2var <- round(summary(pca)$importance[2,2]*100, digits=1)
pc1lab <- paste0("PC1 (",as.character(pc1var),"%)")
pc2lab <- paste0("PC1 (",as.character(pc2var),"%)")
plot(PC2~PC1, data=as.data.frame(pca$x), bg=colors[fac], pch=21, xlab=pc1lab, ylab=pc2lab, main=main, ...)
with(as.data.frame(pca$x), textxy(PC1, PC2, labs=rownames(as.data.frame(pca$x)), cex=textcx))
legend(legendpos, legend=levels(fac), col=colors, pch=20)
#     rldyplot(PC2 ~ PC1, groups = fac, data = as.data.frame(pca$rld),
#            pch = 16, cerld = 2, aspect = "iso", col = colours, main = draw.key(key = list(rect = list(col = colours),
#                                                                                         terldt = list(levels(fac)), rep = FALSE)))
}
png("Day21.Primary.qc-pca.png", 1000, 1000, pointsize=20)
rld_pca.d21.primary(rld.d21.primary, colors=mycols, intgroup="Primary_Treatment", xlim=c(-75, 35))
dev.off()
rld_pca.d21.primary(rld.d21.primary, colors=mycols, intgroup="Primary_Treatment", xlim=c(-100, 50))
rld.d21.primary
# Principal components analysis ------------------------------------------------------------------------------------------------------ #
## Could do with built-in DESeq2 function:
## DESeq2::plotPCA(rld, intgroup="condition")
rld_pca.d21.primary <- function (rld.d21.primary, intgroup = "condition", ntop = 500, colors=NULL, legendpos="bottomleft", main="PCA Biplot", textcx=1, ...) {
require(genefilter)
require(calibrate)
require(RColorBrewer)
rv = rowVars(assay(rld.d21.primary))
select = order(rv, decreasing = TRUE)[seq_len(min(ntop, length(rv)))]
pca = prcomp(t(assay(rld.d21.primary)[select, ]))
fac = factor(apply(as.data.frame(colData(rld.d21.primary)[, intgroup, drop = FALSE]), 1, paste, collapse = " : "))
if (is.null(colors)) {
if (nlevels(fac) >= 3) {
colors = brewer.pal(nlevels(fac), "Paired")
}   else {
colors = c("black", "red")
}
}
pc1var <- round(summary(pca)$importance[2,1]*100, digits=1)
pc2var <- round(summary(pca)$importance[2,2]*100, digits=1)
pc1lab <- paste0("PC1 (",as.character(pc1var),"%)")
pc2lab <- paste0("PC1 (",as.character(pc2var),"%)")
plot(PC2~PC1, data=as.data.frame(pca$x), bg=colors[fac], pch=21, xlab=pc1lab, ylab=pc2lab, main=main, ...)
with(as.data.frame(pca$x), textxy(PC1, PC2, labs=rownames(as.data.frame(pca$x)), cex=textcx))
legend(legendpos, legend=levels(fac), col=colors, pch=20)
#     rldyplot(PC2 ~ PC1, groups = fac, data = as.data.frame(pca$rld),
#            pch = 16, cerld = 2, aspect = "iso", col = colours, main = draw.key(key = list(rect = list(col = colours),
#                                                                                         terldt = list(levels(fac)), rep = FALSE)))
}
png("Day21.Primary.qc-pca.png", 1000, 1000, pointsize=20)
rld_pca.d21.primary(rld.d21.primary, colors=mycols, intgroup="Primary_Treatment", xlim=c(-100, 50))
dev.off()
# Principal components analysis ------------------------------------------------------------------------------------------------------ #
## Could do with built-in DESeq2 function:
DESeq2::plotPCA(rld.d21.primary, intgroup="Primary_Treatment")
# Principal components analysis ------------------------------------------------------------------------------------------------------ #
## Could do with built-in DESeq2 function:
plot <- DESeq2::plotPCA(rld.d21.primary, intgroup="Primary_Treatment")
plot
# Principal components analysis ------------------------------------------------------------------------------------------------------ #
## Could do with built-in DESeq2 function:
png("Day21.Primary.qc-pca_2.png", 1000, 1000, pointsize=20)
DESeq2::plotPCA(rld.d21.primary, intgroup="Primary_Treatment")
dev.off()
## Volcano plot with "significant" genes labeled ------------------------------------------------------------------------------------------------------ #
volcanoplot <- function (res.d21, lfcthresh=2, sigthresh=0.05, main="Volcano Plot", legendpos="bottomright", labelsig=TRUE, textcx=1, ...) {
with(res.d21, plot(log2FoldChange, -log10(pvalue), pch=20, main=main, ...))
with(subset(res.d21, padj<sigthresh ), points(log2FoldChange, -log10(pvalue), pch=20, col="red", ...))
with(subset(res.d21, abs(log2FoldChange)>lfcthresh), points(log2FoldChange, -log10(pvalue), pch=20, col="orange", ...))
with(subset(res.d21, padj<sigthresh & abs(log2FoldChange)>lfcthresh), points(log2FoldChange, -log10(pvalue), pch=20, col="green", ...))
if (labelsig) {
require(calibrate)
with(subset(res.d21, padj<sigthresh & abs(log2FoldChange)>lfcthresh), textxy(log2FoldChange, -log10(pvalue), labs=Gene, cex=textcx, ...))
}
legend(legendpos, xjust=1, yjust=1, legend=c(paste("FDR<",sigthresh,sep=""), paste("|LogFC|>",lfcthresh,sep=""), "both"), pch=20, col=c("red","orange","green"))
}
png("Day21.PrimaryTreatment_diffexpr-volcanoplot.png", 1200, 1000, pointsize=20)
volcanoplot(resdata.d21.primary, lfcthresh=1, sigthresh=0.05, textcx=.5, xlim=c(-4, 4))
dev.off()
res.d21.DOWNREG <- dataframe_res.d21.ordered %>%  # downregulated genes under moderate stress
dplyr::filter(log2FoldChange < 0) %>%
dplyr::filter(padj < 0.1)
View(res.d21.DOWNREG) # view downreg genes
exp.data.d21
exp.data.d21
# format Experiment/design dataframe into matrix
exp.data.d21.ALL <- exp.data.d21 %>% dplyr::select(c('Sample.Name', 'Primary_Treatment', 'Second_Treament', 'Third_Treatment')) # coondense dataset to build target matrix
exp.data.d21.ALL$Second_Treament <- factor(exp.data.d21.ALL$Second_Treament) # change Second_Treament to factor
exp.data.d21.ALL$Third_Treatment <- factor(exp.data.d21.ALL$Third_Treatment) # change Third_Treatment to factor
exp.data.d21.ALL <- data.frame(exp.data.d21.PRIMARY[,-1], row.names=exp.data.d21.PRIMARY[,1]) # move Sample.Name column as row names
exp.data.d21.ALL <- data.frame(exp.data.d21.ALL[,-1], row.names=exp.data.d21.ALL[,1]) # move Sample.Name column as row names
exp.data.d21.ALL.mtx <- as.matrix(exp.data.d21.ALL, row.names="Geoduck.ID") # create matrix
exp.data.d21.ALL.mtx
# fix(exp.data.mtx) # view data - remove # to open
# CKECK THE cts.matrix AND THE exp.data.mtx
exp.data.d21.ALL.mtx <- exp.data.d21.ALL.mtx[match(colnames(cts.merged.d21),rownames(exp.data.d21.ALL.mtx)), ]
all(rownames(exp.data.d21.ALL.mtx) %in% colnames(cts.matrix.d21)) # should be TRUE
all(rownames(exp.data.d21.ALL.mtx) == colnames(cts.matrix.d21)) # should be TRUE
cts.matrix.d21 <- cts.matrix.d21[, rownames(exp.data.d21.ALL.mtx)]
all(rownames(exp.data.d21.ALL.mtx) == colnames(cts.matrix.d21))  # should be TRUE
# build dds
dds.All.d21 <- DESeqDataSetFromMatrix(countData = cts.matrix.d21,
colData = exp.data.d21.ALL.mtx,
design = ~ Primary_Treatment + Second_Treament + Third_Treatment) # DESeq Data Set (dds) - design as ~Primary_Treatment
dds.All.d21 # view dds
# prep for DESeq2
dds.All.d21$Primary_Treatment <- relevel(dds.All.d21$Primary_Treatment, ref = "A") # specify the reference level for count analysis - A = the control treatment
dds.All.d21$Second_Treament <- relevel(dds.All.d21$Second_Treament, ref = "A") # specify the reference level for count analysis - AA = the control treatment
dds.All.d21$Third_Treatment <- relevel(dds.All.d21$Third_Treatment, ref = "A") # specify the reference level for count analysis - AA = the control treatment
keep <- rowSums(counts(dds.All.d21)) >= 5 # PRE-FILTERING... ommits genes where counts between ALL samples (as rows) less than 5
colSums(counts(dds.All.d21))
dds.All.d21 <- dds.All.d21[keep,] # integrate this criteria in the data
design(dds.All.d21) # view the design we have specified
ncol(dds.All.d21) # 62 cols - Good
colData(dds.All.d21)
dds.All.d21 <- DESeq(dds.All.d21) # wait for this to complete....
resultsNames(dds.All.d21) # view the names of your results models
res.d21.All <- results(res.d21.All, name="Primary_Treatment_M_vs_A")
table(res.d21$padj<0.05) # should be the same as 'res.d21'
table(res.d21.All$padj<0.05) # should be the same as 'res.d21'
res.d21.All <- results(res.d21.All, name="Primary_Treatment_M_vs_A")
resultsNames(dds.All.d21) # view the names of your results models
res.d21.All <- results(dds.All.d21, name="Primary_Treatment_M_vs_A")
table(res.d21.All$padj<0.05) # should be the same as 'res.d21'
res.d21.All <- results(dds.All.d21, name="Second_Treament_M_vs_A")
table(res.d21.All$padj<0.05) # should be the same as 'res.d21'
res.d21.All <- results(dds.All.d21, name="Second_Treament_S_vs_A")
table(res.d21.All$padj<0.05) # should be the same as 'res.d21'
res.d21.All <- results(dds.All.d21, name="Third_Treatment_M_vs_A")
table(res.d21.All$padj<0.05) # should be the same as 'res.d21'
res.d21.All <- results(dds.All.d21, name="Primary_Treatment_M_vs_A")
table(res.d21.All$padj<0.05) # should be the same as 'res.d21'
