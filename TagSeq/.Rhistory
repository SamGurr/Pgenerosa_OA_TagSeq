head(Crass_gigas_genome_dataframe) # look at the dataframe, ready to try a merge!
# LOAD DATA    :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;: #
# BIOLOGICAL PROCESS  GO  SLIMS
d7_slimBP_brownModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_BiolProc_brownModule.csv")
d7_slimBP_greenModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_BiolProc_greenModule.csv")
d7_slimBP_yellowModule  <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_BiolProc_yellowModule.csv")
d14_slimBP_blackModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_BiolProc_blackModule.csv")
d14_slimBP_brownModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_BiolProc_brownModule.csv")
d14_slimBP_magentaModule <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_BiolProc_magentaModule.csv")
d14_slimBP_pinkModule    <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_BiolProc_pinkModule.csv")
d21_slimBP_blackModule       <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_BiolProc_blackModule.csv")
d21_slimBP_blueModule        <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_BiolProc_blueModule.csv")
d21_slimBP_magentaModule     <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_BiolProc_magentaModule.csv")
d21_slimBP_pinkModule        <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_BiolProc_pinkModule.csv")
d21_slimBP_redModule         <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_BiolProc_redModule.csv")
d21_slimBP_yellowModule      <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_BiolProc_yellowModule.csv")
d21_slimBP_turquoiseModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_BiolProc_turquoiseModule.csv")
# MOLECULAR FUNCTION GO  SLIMS
d7_slimMF_brownModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_MolFunction_brownModule.csv")
d7_slimMF_greenModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_MolFunction_greenModule.csv")
d7_slimMF_yellowModule  <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_MolFunction_yellowModule.csv")
d14_slimMF_blackModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_MolFunction_blackModule.csv")
d14_slimMF_brownModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_MolFunction_brownModule.csv")
d14_slimMF_magentaModule <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_MolFunction_magentaModule.csv")
d14_slimMF_pinkModule    <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_MolFunction_pinkModule.csv")
d21_slimMF_blackModule       <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_MolFunction_blackModule.csv")
d21_slimMF_blueModule        <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_MolFunction_blueModule.csv")
d21_slimMF_magentaModule     <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_MolFunction_magentaModule.csv")
d21_slimMF_pinkModule        <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_MolFunction_pinkModule.csv")
d21_slimMF_redModule         <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_MolFunction_redModule.csv")
d21_slimMF_yellowModule      <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_MolFunction_yellowModule.csv")
d21_slimMF_turquoiseModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_MolFunction_turquoiseModule.csv")
# BIOLOGICAL PPROCESS FOR LOOP FOR KEGG ENRICHMENT :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;: #
# ESSENTIAL PREP for the for KEGG loop below!
# Biolgical process terms master file
Master_KEGG_BPTerms <- rbind(d7_slimBP_brownModule, d7_slimBP_yellowModule, d7_slimBP_greenModule, # Day 7 modules
d14_slimBP_blackModule, d14_slimBP_brownModule, d14_slimBP_magentaModule, d14_slimBP_pinkModule, # Day 14 modules
d21_slimBP_blackModule, d21_slimBP_blueModule, d21_slimBP_pinkModule,d21_slimBP_redModule, d21_slimBP_yellowModule, d21_slimBP_turquoiseModule)  # Day 21 primary effect (note: d21_slimBP_magentaModule == NULL)
BP_daymodule_forloop <- as.data.frame(unique(Master_KEGG_BPTerms$module_day))
# start with loop by calling the row value common with the 'Master_KEGG_BPTerms' data frind from rbind above
day_module <- BP_daymodule_forloop[1,1]
day <- sub("\\_.*", "", day_module) # call the day - help for name of csv in output file
module <- sub(".*\\_", "", day_module) # call the module - help for name of csv in output file
# call the module and day
ModuleLoop <- Master_KEGG_BPTerms %>% dplyr::filter(module_day %in% day_module)
# Prep the enriched genes of interest wihtin each module...
#NOTE: the master file contains PGEN gene IDs separated by ';' - each row of PGEN IDs contains all genes associated with signifcant GO terms following  GO enrichment (in 'goseq')
# thus, these genes are called as important due to their GO annotation and significant calls  from functional enrichment analysis
EnrichedGenes <- as.data.frame(unlist( (strsplit(as.character(ModuleLoop$Gene_IDs), ";")) )) # split the genes for the significant goseq enrichment
colnames(EnrichedGenes)[1] <- 'Pgenerosa_Gene_IDs' # rename the single column in this call
EnrichedGenes_2 <- merge(Pgen_reference, EnrichedGenes, by ='Pgenerosa_Gene_IDs') # merge with the Pgen reference (Gene terms before the EC is stated!)
EnrichedGenes_2$Gene_terms    <- sub(" \\(.*", "", EnrichedGenes_2$Gene_terms) # removes all of gene term before the parenthesis
EnrichedGenes_2$Gene_terms    <- sub(" \\[.*", "", EnrichedGenes_2$Gene_terms) # calls al of the string BEFORE an open bracket (in some cases the sttring has just an open bracket without the closed
EnrichedGenes_2$Gene_terms    <- gsub("\\[.*?\\]", "", EnrichedGenes_2$Gene_terms) # now removes all bracketted terms
EnrichedGenes_2$Gene_terms    <- tolower(EnrichedGenes_2$Gene_terms) # convert all to lower case to merge with Cgigas
EnrichedGenes_2 <- unique(EnrichedGenes_2) # call only unique occurances
Pgenerosa_gene_calls <- nrow(EnrichedGenes_2) # total genes called - use this to learn the percent merged with the C.gigas KEGG dataset
# merge and calculate the percent mapping
# Lets merge with the Cgigas genome!
vector                 <- as.vector(EnrichedGenes_2$Gene_terms) # call the gene term as a vector
vector_with_asserts    <- paste("^", vector, "$", sep='') # assets help to call the exact beginning and end of the gene term in grep1 (exact mtatch!) - otheriwse grep will use an 'in it' like funciton and call any genes that contain the whole term in addition to extra string chracters
EnrichedGenes_Cgigas <- subset(Crass_gigas_genome_dataframe, grepl(paste("^",vector_with_asserts,"$", sep="", collapse= "|"), Gene_terms, ignore.case = TRUE)) # subset the C gigas genome by the common and exact match to gene terms (with sig GO enrichmetn from 'goseq'!) in the module of interest
length(unique(EnrichedGenes_Cgigas$Gene_terms)) # 243 calls
EnrichedGenes_Cgigas_removeduplicates = EnrichedGenes_Cgigas[!duplicated(EnrichedGenes_Cgigas$Gene_terms),]
Cgigas_gene_calls <- nrow(EnrichedGenes_Cgigas_removeduplicates) # total Pgen gens mapped to the Cgigas KEGG genome  - use this to learn the percent merged with the C.gigas KEGG dataset
# calaculate the percent mapped and print this...
Percent_mapped <- (Cgigas_gene_calls / Pgenerosa_gene_calls) * 100
print(paste(day_module, "-->", Percent_mapped, "percent mapped to Cgigas KEGG of N =", Pgenerosa_gene_calls, "total genes", sep = ' '))
# ESSENTIAL PREP for the for KEGG loop below!
# Biolgical process terms master file
Master_KEGG_MFTerms <- rbind(d7_slimMF_brownModule, d7_slimMF_yellowModule, d7_slimMF_greenModule, # Day 7 modules
d14_slimMF_blackModule, d14_slimMF_brownModule, d14_slimMF_magentaModule, d14_slimMF_pinkModule, # Day 14 modules
d21_slimMF_blackModule, d21_slimMF_blueModule, d21_slimMF_magentaModule, d21_slimMF_pinkModule,d21_slimMF_redModule, d21_slimMF_yellowModule, d21_slimMF_turquoiseModule)  # Day 21 primary effect
MF_daymodule_forloop <- as.data.frame(unique(Master_KEGG_MFTerms$module_day))
# start with loop by calling the row value common with the 'Master_KEGG_BPTerms' data frind from rbind above
day_module <- MF_daymodule_forloop[1,1]
day <- sub("\\_.*", "", day_module) # call the day - help for name of csv in output file
module <- sub(".*\\_", "", day_module) # call the module - help for name of csv in output file
# call the module and day
ModuleLoop <- Master_KEGG_MFTerms %>% dplyr::filter(module_day %in% day_module)
# Prep the enriched genes of interest wihtin each module...
#NOTE: the master file contains PGEN gene IDs separated by ';' - each row of PGEN IDs contains all genes associated with signifcant GO terms following  GO enrichment (in 'goseq')
# thus, these genes are called as important due to their GO annotation and significant calls  from functional enrichment analysis
EnrichedGenes <- as.data.frame(unlist( (strsplit(as.character(ModuleLoop$Gene_IDs), ";")) )) # split the genes for the significant goseq enrichment
colnames(EnrichedGenes)[1] <- 'Pgenerosa_Gene_IDs' # rename the single column in this call
EnrichedGenes_2 <- merge(Pgen_reference, EnrichedGenes, by ='Pgenerosa_Gene_IDs') # merge with the Pgen reference (Gene terms before the EC is stated!)
EnrichedGenes_2$Gene_terms    <- sub(" \\(.*", "", EnrichedGenes_2$Gene_terms) # removes all of gene term before the parenthesis
EnrichedGenes_2$Gene_terms    <- sub(" \\[.*", "", EnrichedGenes_2$Gene_terms) # calls al of the string BEFORE an open bracket (in some cases the sttring has just an open bracket without the closed
EnrichedGenes_2$Gene_terms    <- gsub("\\[.*?\\]", "", EnrichedGenes_2$Gene_terms) # now removes all bracketted terms
EnrichedGenes_2$Gene_terms    <- tolower(EnrichedGenes_2$Gene_terms) # convert all to lower case to merge with Cgigas
EnrichedGenes_2 <- unique(EnrichedGenes_2) # call only unique occurances
Pgenerosa_gene_calls <- nrow(EnrichedGenes_2) # total genes called - use this to learn the percent merged with the C.gigas KEGG dataset
# merge and calculate the percent mapping
# Lets merge with the Cgigas genome!
vector                 <- as.vector(EnrichedGenes_2$Gene_terms) # call the gene term as a vector
vector_with_asserts    <- paste("^", vector, "$", sep='') # assets help to call the exact beginning and end of the gene term in grep1 (exact mtatch!) - otheriwse grep will use an 'in it' like funciton and call any genes that contain the whole term in addition to extra string chracters
EnrichedGenes_Cgigas <- subset(Crass_gigas_genome_dataframe, grepl(paste("^",vector_with_asserts,"$", sep="", collapse= "|"), Gene_terms, ignore.case = TRUE)) # subset the C gigas genome by the common and exact match to gene terms (with sig GO enrichmetn from 'goseq'!) in the module of interest
length(unique(EnrichedGenes_Cgigas$Gene_terms)) # 243 calls
EnrichedGenes_Cgigas_removeduplicates = EnrichedGenes_Cgigas[!duplicated(EnrichedGenes_Cgigas$Gene_terms),]
Cgigas_gene_calls <- nrow(EnrichedGenes_Cgigas_removeduplicates) # total Pgen gens mapped to the Cgigas KEGG genome  - use this to learn the percent merged with the C.gigas KEGG dataset
# calaculate the percent mapped and print this...
Percent_mapped <- (Cgigas_gene_calls / Pgenerosa_gene_calls) * 100
print(paste(day_module, "-->", Percent_mapped, "percent mapped to Cgigas KEGG of N =", Pgenerosa_gene_calls, "total genes", sep = ' '))
View(EnrichedGenes_2)
View(EnrichedGenes_Cgigas_removeduplicates)
Pgenerosa_gene_calls <- length(unique(EnrichedGenes_2$Gene_terms)) # total genes called - use this to learn the percent merged with the C.gigas KEGG dataset
# calaculate the percent mapped and print this...
Percent_mapped <- (Cgigas_gene_calls / Pgenerosa_gene_calls) * 100
print(paste(day_module, "-->", Percent_mapped, "percent mapped to Cgigas KEGG of N =", Pgenerosa_gene_calls, "total genes", sep = ' '))
Pgenerosa_gene_calls
EnrichedGenes_2 <- unique(EnrichedGenes_2$Gene_terms) # call only unique occurances
EnrichedGenes_2 <- merge(Pgen_reference, EnrichedGenes, by ='Pgenerosa_Gene_IDs') # merge with the Pgen reference (Gene terms before the EC is stated!)
EnrichedGenes_2$Gene_terms    <- sub(" \\(.*", "", EnrichedGenes_2$Gene_terms) # removes all of gene term before the parenthesis
EnrichedGenes_2$Gene_terms    <- sub(" \\[.*", "", EnrichedGenes_2$Gene_terms) # calls al of the string BEFORE an open bracket (in some cases the sttring has just an open bracket without the closed
EnrichedGenes_2$Gene_terms    <- gsub("\\[.*?\\]", "", EnrichedGenes_2$Gene_terms) # now removes all bracketted terms
EnrichedGenes_2$Gene_terms    <- tolower(EnrichedGenes_2$Gene_terms) # convert all to lower case to merge with Cgigas
EnrichedGenes_2 <- unique(EnrichedGenes_2) #
# merge and calculate the percent mapping
# Lets merge with the Cgigas genome!
vector                 <- as.vector(unique(EnrichedGenes_2$Gene_terms)) # call the gene term as a vector
vector_with_asserts    <- paste("^", vector, "$", sep='') # assets help to call the exact beginning and end of the gene term in grep1 (exact mtatch!) - otheriwse grep will use an 'in it' like funciton and call any genes that contain the whole term in addition to extra string chracters
EnrichedGenes_Cgigas <- subset(Crass_gigas_genome_dataframe, grepl(paste("^",vector_with_asserts,"$", sep="", collapse= "|"), Gene_terms, ignore.case = TRUE)) # subset the C gigas genome by the common and exact match to gene terms (with sig GO enrichmetn from 'goseq'!) in the module of interest
length(unique(EnrichedGenes_Cgigas$Gene_terms)) # 243 calls
EnrichedGenes_Cgigas_removeduplicates = EnrichedGenes_Cgigas[!duplicated(EnrichedGenes_Cgigas$Gene_terms),]
Cgigas_gene_calls <- nrow(EnrichedGenes_Cgigas_removeduplicates) # total Pgen gens mapped to the Cgigas KEGG genome  - use this to learn the percent merged with the C.gigas KEGG dataset
# calaculate the percent mapped and print this...
Percent_mapped <- (Cgigas_gene_calls / Pgenerosa_gene_calls) * 100
print(paste(day_module, "-->", Percent_mapped, "percent mapped to Cgigas KEGG of N =", Pgenerosa_gene_calls, "total genes", sep = ' '))
Pgenerosa_gene_calls
unique(EnrichedGenes_2$Gene_terms)
print(paste(day_module, "-->", Percent_mapped, "percent mapped to Cgigas KEGG of N =", Pgenerosa_gene_calls, "total genes", sep = ' '))
View(EnrichedGenes_2)
View(EnrichedGenes_Cgigas_removeduplicates)
View(unique(EnrichedGenes_2$Gene_terms))
View(Crass_gigas_genome_dataframe)
EnrichedGenes_2
Cgigas_gene_calls
EnrichedGenes_Cgigas_removeduplicates
test <- EnrichedGenes_2 %>%  filter(!Gene_terms %in% EnrichedGenes_Cgigas_removeduplicates$Gene_terms)
test
EnrichedGenes_Cgigas_removeduplicates$Gene_terms
test <- EnrichedGenes_2 %>%  filter(!Gene_terms %in% EnrichedGenes_Cgigas_removeduplicates$Gene_terms)
test
EnrichedGenes_2
test_RM <- EnrichedGenes_2[!duplicated(EnrichedGenes_2$Gene_terms),]
test_RM
View(test_RM)
test <- test_RM %>%  filter(!Gene_terms %in% EnrichedGenes_Cgigas_removeduplicates$Gene_terms)
test
test <- test_RM %>%  filter(!Gene_terms == EnrichedGenes_Cgigas_removeduplicates$Gene_terms)
Pgenerosa_gene_calls <- length(unique(EnrichedGenes_2$Gene_terms)) # total genes called - use this to learn the percent merged with the C.gigas KEGG dataset
# merge and calculate the percent mapping
# Lets merge with the Cgigas genome!
vector                 <- as.vector(unique(EnrichedGenes_2$Gene_terms)) # call the gene term as a vector
vector_with_asserts    <- paste("^", vector, "$", sep='') # assets help to call the exact beginning and end of the gene term in grep1 (exact mtatch!) - otheriwse grep will use an 'in it' like funciton and call any genes that contain the whole term in addition to extra string chracters
EnrichedGenes_Cgigas <- subset(Crass_gigas_genome_dataframe, grepl(paste("^",vector_with_asserts,"$", sep="", collapse= "|"), Gene_terms, ignore.case = TRUE)) # subset the C gigas genome by the common and exact match to gene terms (with sig GO enrichmetn from 'goseq'!) in the module of interest
length(unique(EnrichedGenes_Cgigas$Gene_terms)) #
EnrichedGenes_Cgigas_removeduplicates = EnrichedGenes_Cgigas[!duplicated(EnrichedGenes_Cgigas$Gene_terms),]
Cgigas_gene_calls <- nrow(EnrichedGenes_Cgigas_removeduplicates) # total Pgen gens mapped to the Cgigas KEGG genome  - use this to learn the percent merged with the C.gigas KEGG dataset
# calaculate the percent mapped and print this...
Percent_mapped <- (Cgigas_gene_calls / Pgenerosa_gene_calls) * 100
print(paste(day_module, "-->", Percent_mapped, "percent mapped to Cgigas KEGG of N =", Pgenerosa_gene_calls, "total genes", sep = ' '))
EnrichedGenes_2$Gene_terms
unique(EnrichedGenes_2$Gene_terms)
test_RM <- EnrichedGenes_2[!duplicated(EnrichedGenes_2$Gene_terms),]
nrow(test_RM)
nrow(test)
test <- test_RM %>%  filter(!Gene_terms %in% EnrichedGenes_Cgigas_removeduplicates$Gene_terms)
nrow(test)
Cgigas_gene_calls
length(unique(EnrichedGenes_Cgigas$Gene_terms)) #
EnrichedGenes_Cgigas_removeduplicates = EnrichedGenes_Cgigas[!duplicated(EnrichedGenes_Cgigas$Gene_terms),]
Cgigas_gene_calls <- nrow(EnrichedGenes_Cgigas_removeduplicates) # total Pgen gens mapped to the Cgigas KEGG genome  - use this to learn the percent merged with the C.gigas KEGG dataset
Cgigas_gene_calls
Pgenerosa_gene_calls
Cgigas_gene_calls
# calaculate the percent mapped and print this...
Percent_mapped <- (Cgigas_gene_calls / Pgenerosa_gene_calls) * 100
Percent_mapped
nrow(test)
test_RM <- duplicated(EnrichedGenes_2$Gene_terms[!duplicated(EnrichedGenes_2$Gene_terms),]
nrow(test_RM)
test <- test_RM %>%  filter(!Gene_terms %in% EnrichedGenes_Cgigas_removeduplicates$Gene_terms)
nrow(test)
View(EnrichedGenes_Cgigas_removeduplicates)
# Run KEGG analysis
KEGG_vector_Pgen_Cgigas   <- as.vector(gsub(".*:","",EnrichedGenes_Cgigas_removeduplicates$Cgigas_KEGG_IDs)) # ommit the 'crg:' before the actual terms
KEGG_cgigas <- enrichKEGG(gene = KEGG_vector_Pgen_Cgigas,
organism  = 'crg', # 'hsa' is human 'crg' is pacific oyster
pvalueCutoff = 0.05)
test_RM <- EnrichedGenes_2$Gene_terms[!duplicated(EnrichedGenes_2$Gene_terms),]
test
# Run KEGG analysis
KEGG_vector_Pgen_Cgigas   <- as.vector(gsub(".*:","",EnrichedGenes_Cgigas_removeduplicates$Cgigas_KEGG_IDs)) # ommit the 'crg:' before the actual terms
KEGG_cgigas <- enrichKEGG(gene = KEGG_vector_Pgen_Cgigas,
organism  = 'crg', # 'hsa' is human 'crg' is pacific oyster
pvalueCutoff = 0.05)
KEGG_cgigas
# calaculate the percent mapped and print this...
Percent_mapped <- (Cgigas_gene_calls / Pgenerosa_gene_calls) * 100
head(KEGG_cgigas)[2]
print(head(KEGG_cgigas)[c(1:2)])
print(head(KEGG_cgigas)[c(2:4)])
print(head(KEGG_cgigas)[c(2:5)])
Master_KEGG_MFTerms <- rbind(d7_slimMF_brownModule, d7_slimMF_yellowModule, d7_slimMF_greenModule, # Day 7 modules
d14_slimMF_blackModule, d14_slimMF_brownModule, d14_slimMF_magentaModule, d14_slimMF_pinkModule, # Day 14 modules
d21_slimMF_blackModule, d21_slimMF_blueModule, d21_slimMF_magentaModule, d21_slimMF_pinkModule,d21_slimMF_redModule, d21_slimMF_yellowModule, d21_slimMF_turquoiseModule)  # Day 21 primary effect
MF_daymodule_forloop <- as.data.frame(unique(Master_KEGG_MFTerms$module_day))
# Biological process for loop
for (i in 1:nrow(MF_daymodule_forloop)) {
# start with loop by calling the row value common with the 'Master_KEGG_BPTerms' data frind from rbind above
day_module <- MF_daymodule_forloop[1,1]
day <- sub("\\_.*", "", day_module) # call the day - help for name of csv in output file
module <- sub(".*\\_", "", day_module) # call the module - help for name of csv in output file
# call the module and day
ModuleLoop <- Master_KEGG_MFTerms %>% dplyr::filter(module_day %in% day_module)
# Prep the enriched genes of interest wihtin each module...
#NOTE: the master file contains PGEN gene IDs separated by ';' - each row of PGEN IDs contains all genes associated with signifcant GO terms following  GO enrichment (in 'goseq')
# thus, these genes are called as important due to their GO annotation and significant calls  from functional enrichment analysis
EnrichedGenes <- as.data.frame(unlist( (strsplit(as.character(ModuleLoop$Gene_IDs), ";")) )) # split the genes for the significant goseq enrichment
colnames(EnrichedGenes)[1] <- 'Pgenerosa_Gene_IDs' # rename the single column in this call
EnrichedGenes_2 <- merge(Pgen_reference, EnrichedGenes, by ='Pgenerosa_Gene_IDs') # merge with the Pgen reference (Gene terms before the EC is stated!)
EnrichedGenes_2$Gene_terms    <- sub(" \\(.*", "", EnrichedGenes_2$Gene_terms) # removes all of gene term before the parenthesis
EnrichedGenes_2$Gene_terms    <- sub(" \\[.*", "", EnrichedGenes_2$Gene_terms) # calls al of the string BEFORE an open bracket (in some cases the sttring has just an open bracket without the closed
EnrichedGenes_2$Gene_terms    <- gsub("\\[.*?\\]", "", EnrichedGenes_2$Gene_terms) # now removes all bracketted terms
EnrichedGenes_2$Gene_terms    <- tolower(EnrichedGenes_2$Gene_terms) # convert all to lower case to merge with Cgigas
EnrichedGenes_2 <- unique(EnrichedGenes_2) # call only unique occurances
Pgenerosa_gene_calls <- length(unique(EnrichedGenes_2$Gene_terms)) # total genes called - use this to learn the percent merged with the C.gigas KEGG dataset
# merge and calculate the percent mapping
# Lets merge with the Cgigas genome!
vector                 <- as.vector(unique(EnrichedGenes_2$Gene_terms)) # call the gene term as a vector
vector_with_asserts    <- paste("^", vector, "$", sep='') # assets help to call the exact beginning and end of the gene term in grep1 (exact mtatch!) - otheriwse grep will use an 'in it' like funciton and call any genes that contain the whole term in addition to extra string chracters
EnrichedGenes_Cgigas <- subset(Crass_gigas_genome_dataframe, grepl(paste("^",vector_with_asserts,"$", sep="", collapse= "|"), Gene_terms, ignore.case = TRUE)) # subset the C gigas genome by the common and exact match to gene terms (with sig GO enrichmetn from 'goseq'!) in the module of interest
length(unique(EnrichedGenes_Cgigas$Gene_terms)) #
EnrichedGenes_Cgigas_removeduplicates = EnrichedGenes_Cgigas[!duplicated(EnrichedGenes_Cgigas$Gene_terms),]
Cgigas_gene_calls <- nrow(EnrichedGenes_Cgigas_removeduplicates) # total Pgen gens mapped to the Cgigas KEGG genome  - use this to learn the percent merged with the C.gigas KEGG dataset
# Run KEGG analysis
KEGG_vector_Pgen_Cgigas   <- as.vector(gsub(".*:","",EnrichedGenes_Cgigas_removeduplicates$Cgigas_KEGG_IDs)) # ommit the 'crg:' before the actual terms
KEGG_cgigas <- enrichKEGG(gene = KEGG_vector_Pgen_Cgigas,
organism  = 'crg', # 'hsa' is human 'crg' is pacific oyster
pvalueCutoff = 0.05)
# calaculate the percent mapped and print this...
Percent_mapped <- (Cgigas_gene_calls / Pgenerosa_gene_calls) * 100
print(paste(day_module, "-->", Percent_mapped, "percent mapped to Cgigas KEGG of N =", Pgenerosa_gene_calls, "total genes", sep = ' '))
print(head(KEGG_cgigas)[c(2:5)])
# if lloop to output the KEGG enrichment analysis ONLY if genes were successfully mapped...
if (  nrow(as.data.frame(head(KEGG_cgigas))) > 0 ) {
# creat dateframe and write the csv file out
df <- as.data.frame(head(KEGG_cgigas))
rownames(df) <- c()
KEGGoutput <- as.data.frame(do.call(cbind.data.frame, df))
KEGGoutput$GeneRatio <- gsub("/"," of ", KEGGoutput$GeneRatio)
write.csv(KEGGoutput, file = paste("Analysis/Output/GO/WGCNA_goseq/",day,"/KEGG/",day,"_module_",module,"_KEGG_MolecularFunction.csv", sep =''))
} else {}
print(paste("Finished!", day_module, sep = " "))
}
# Biological process for loop
for (i in 1:nrow(MF_daymodule_forloop)) {
# start with loop by calling the row value common with the 'Master_KEGG_BPTerms' data frind from rbind above
day_module <- MF_daymodule_forloop[i,1]
day <- sub("\\_.*", "", day_module) # call the day - help for name of csv in output file
module <- sub(".*\\_", "", day_module) # call the module - help for name of csv in output file
# call the module and day
ModuleLoop <- Master_KEGG_MFTerms %>% dplyr::filter(module_day %in% day_module)
# Prep the enriched genes of interest wihtin each module...
#NOTE: the master file contains PGEN gene IDs separated by ';' - each row of PGEN IDs contains all genes associated with signifcant GO terms following  GO enrichment (in 'goseq')
# thus, these genes are called as important due to their GO annotation and significant calls  from functional enrichment analysis
EnrichedGenes <- as.data.frame(unlist( (strsplit(as.character(ModuleLoop$Gene_IDs), ";")) )) # split the genes for the significant goseq enrichment
colnames(EnrichedGenes)[1] <- 'Pgenerosa_Gene_IDs' # rename the single column in this call
EnrichedGenes_2 <- merge(Pgen_reference, EnrichedGenes, by ='Pgenerosa_Gene_IDs') # merge with the Pgen reference (Gene terms before the EC is stated!)
EnrichedGenes_2$Gene_terms    <- sub(" \\(.*", "", EnrichedGenes_2$Gene_terms) # removes all of gene term before the parenthesis
EnrichedGenes_2$Gene_terms    <- sub(" \\[.*", "", EnrichedGenes_2$Gene_terms) # calls al of the string BEFORE an open bracket (in some cases the sttring has just an open bracket without the closed
EnrichedGenes_2$Gene_terms    <- gsub("\\[.*?\\]", "", EnrichedGenes_2$Gene_terms) # now removes all bracketted terms
EnrichedGenes_2$Gene_terms    <- tolower(EnrichedGenes_2$Gene_terms) # convert all to lower case to merge with Cgigas
EnrichedGenes_2 <- unique(EnrichedGenes_2) # call only unique occurances
Pgenerosa_gene_calls <- length(unique(EnrichedGenes_2$Gene_terms)) # total genes called - use this to learn the percent merged with the C.gigas KEGG dataset
# merge and calculate the percent mapping
# Lets merge with the Cgigas genome!
vector                 <- as.vector(unique(EnrichedGenes_2$Gene_terms)) # call the gene term as a vector
vector_with_asserts    <- paste("^", vector, "$", sep='') # assets help to call the exact beginning and end of the gene term in grep1 (exact mtatch!) - otheriwse grep will use an 'in it' like funciton and call any genes that contain the whole term in addition to extra string chracters
EnrichedGenes_Cgigas <- subset(Crass_gigas_genome_dataframe, grepl(paste("^",vector_with_asserts,"$", sep="", collapse= "|"), Gene_terms, ignore.case = TRUE)) # subset the C gigas genome by the common and exact match to gene terms (with sig GO enrichmetn from 'goseq'!) in the module of interest
length(unique(EnrichedGenes_Cgigas$Gene_terms)) #
EnrichedGenes_Cgigas_removeduplicates = EnrichedGenes_Cgigas[!duplicated(EnrichedGenes_Cgigas$Gene_terms),]
Cgigas_gene_calls <- nrow(EnrichedGenes_Cgigas_removeduplicates) # total Pgen gens mapped to the Cgigas KEGG genome  - use this to learn the percent merged with the C.gigas KEGG dataset
# Run KEGG analysis
KEGG_vector_Pgen_Cgigas   <- as.vector(gsub(".*:","",EnrichedGenes_Cgigas_removeduplicates$Cgigas_KEGG_IDs)) # ommit the 'crg:' before the actual terms
KEGG_cgigas <- enrichKEGG(gene = KEGG_vector_Pgen_Cgigas,
organism  = 'crg', # 'hsa' is human 'crg' is pacific oyster
pvalueCutoff = 0.05)
# calaculate the percent mapped and print this...
Percent_mapped <- (Cgigas_gene_calls / Pgenerosa_gene_calls) * 100
print(paste(day_module, "-->", Percent_mapped, "percent mapped to Cgigas KEGG of N =", Pgenerosa_gene_calls, "total genes", sep = ' '))
print(head(KEGG_cgigas)[c(2:5)])
# if lloop to output the KEGG enrichment analysis ONLY if genes were successfully mapped...
if (  nrow(as.data.frame(head(KEGG_cgigas))) > 0 ) {
# creat dateframe and write the csv file out
df <- as.data.frame(head(KEGG_cgigas))
rownames(df) <- c()
KEGGoutput <- as.data.frame(do.call(cbind.data.frame, df))
KEGGoutput$GeneRatio <- gsub("/"," of ", KEGGoutput$GeneRatio)
write.csv(KEGGoutput, file = paste("Analysis/Output/GO/WGCNA_goseq/",day,"/KEGG/",day,"_module_",module,"_KEGG_MolecularFunction.csv", sep =''))
} else {}
print(paste("Finished!", day_module, sep = " "))
}
print(head(KEGG_cgigas)[c(2:6)])
# Biological process for loop
for (i in 1:nrow(MF_daymodule_forloop)) {
# start with loop by calling the row value common with the 'Master_KEGG_BPTerms' data frind from rbind above
day_module <- MF_daymodule_forloop[i,1]
day <- sub("\\_.*", "", day_module) # call the day - help for name of csv in output file
module <- sub(".*\\_", "", day_module) # call the module - help for name of csv in output file
# call the module and day
ModuleLoop <- Master_KEGG_MFTerms %>% dplyr::filter(module_day %in% day_module)
# Prep the enriched genes of interest wihtin each module...
#NOTE: the master file contains PGEN gene IDs separated by ';' - each row of PGEN IDs contains all genes associated with signifcant GO terms following  GO enrichment (in 'goseq')
# thus, these genes are called as important due to their GO annotation and significant calls  from functional enrichment analysis
EnrichedGenes <- as.data.frame(unlist( (strsplit(as.character(ModuleLoop$Gene_IDs), ";")) )) # split the genes for the significant goseq enrichment
colnames(EnrichedGenes)[1] <- 'Pgenerosa_Gene_IDs' # rename the single column in this call
EnrichedGenes_2 <- merge(Pgen_reference, EnrichedGenes, by ='Pgenerosa_Gene_IDs') # merge with the Pgen reference (Gene terms before the EC is stated!)
EnrichedGenes_2$Gene_terms    <- sub(" \\(.*", "", EnrichedGenes_2$Gene_terms) # removes all of gene term before the parenthesis
EnrichedGenes_2$Gene_terms    <- sub(" \\[.*", "", EnrichedGenes_2$Gene_terms) # calls al of the string BEFORE an open bracket (in some cases the sttring has just an open bracket without the closed
EnrichedGenes_2$Gene_terms    <- gsub("\\[.*?\\]", "", EnrichedGenes_2$Gene_terms) # now removes all bracketted terms
EnrichedGenes_2$Gene_terms    <- tolower(EnrichedGenes_2$Gene_terms) # convert all to lower case to merge with Cgigas
EnrichedGenes_2 <- unique(EnrichedGenes_2) # call only unique occurances
Pgenerosa_gene_calls <- length(unique(EnrichedGenes_2$Gene_terms)) # total genes called - use this to learn the percent merged with the C.gigas KEGG dataset
# merge and calculate the percent mapping
# Lets merge with the Cgigas genome!
vector                 <- as.vector(unique(EnrichedGenes_2$Gene_terms)) # call the gene term as a vector
vector_with_asserts    <- paste("^", vector, "$", sep='') # assets help to call the exact beginning and end of the gene term in grep1 (exact mtatch!) - otheriwse grep will use an 'in it' like funciton and call any genes that contain the whole term in addition to extra string chracters
EnrichedGenes_Cgigas <- subset(Crass_gigas_genome_dataframe, grepl(paste("^",vector_with_asserts,"$", sep="", collapse= "|"), Gene_terms, ignore.case = TRUE)) # subset the C gigas genome by the common and exact match to gene terms (with sig GO enrichmetn from 'goseq'!) in the module of interest
length(unique(EnrichedGenes_Cgigas$Gene_terms)) #
EnrichedGenes_Cgigas_removeduplicates = EnrichedGenes_Cgigas[!duplicated(EnrichedGenes_Cgigas$Gene_terms),]
Cgigas_gene_calls <- nrow(EnrichedGenes_Cgigas_removeduplicates) # total Pgen gens mapped to the Cgigas KEGG genome  - use this to learn the percent merged with the C.gigas KEGG dataset
# Run KEGG analysis
KEGG_vector_Pgen_Cgigas   <- as.vector(gsub(".*:","",EnrichedGenes_Cgigas_removeduplicates$Cgigas_KEGG_IDs)) # ommit the 'crg:' before the actual terms
KEGG_cgigas <- enrichKEGG(gene = KEGG_vector_Pgen_Cgigas,
organism  = 'crg', # 'hsa' is human 'crg' is pacific oyster
pvalueCutoff = 0.05)
# calaculate the percent mapped and print this...
Percent_mapped <- (Cgigas_gene_calls / Pgenerosa_gene_calls) * 100
print(paste(day_module, "-->", Percent_mapped, "percent mapped to Cgigas KEGG of N =", Pgenerosa_gene_calls, "total genes", sep = ' '))
print(head(KEGG_cgigas)[c(2:4,6)])
# if lloop to output the KEGG enrichment analysis ONLY if genes were successfully mapped...
if (  nrow(as.data.frame(head(KEGG_cgigas))) > 0 ) {
# creat dateframe and write the csv file out
df <- as.data.frame(head(KEGG_cgigas))
rownames(df) <- c()
KEGGoutput <- as.data.frame(do.call(cbind.data.frame, df))
KEGGoutput$GeneRatio <- gsub("/"," of ", KEGGoutput$GeneRatio)
write.csv(KEGGoutput, file = paste("Analysis/Output/GO/WGCNA_goseq/",day,"/KEGG/",day,"_module_",module,"_KEGG_MolecularFunction.csv", sep =''))
} else {}
print(paste("Finished!", day_module, sep = " "))
}
# Biolgical process terms master file
Master_KEGG_MFTerms <- rbind(d7_slimMF_brownModule, d7_slimMF_yellowModule, d7_slimMF_greenModule, # Day 7 modules
d14_slimMF_blackModule, d14_slimMF_brownModule, d14_slimMF_magentaModule, d14_slimMF_pinkModule, # Day 14 modules
d21_slimMF_blackModule, d21_slimMF_blueModule, d21_slimMF_magentaModule, d21_slimMF_pinkModule,d21_slimMF_redModule, d21_slimMF_yellowModule, d21_slimMF_turquoiseModule)  # Day 21 primary effect
MF_daymodule_forloop <- as.data.frame(unique(Master_KEGG_MFTerms$module_day))
d14_slimMF_blackModule
# Biological process for loop
for (i in 1:nrow(MF_daymodule_forloop)) {
# start with loop by calling the row value common with the 'Master_KEGG_BPTerms' data frind from rbind above
day_module <- MF_daymodule_forloop[i,1]
day <- sub("\\_.*", "", day_module) # call the day - help for name of csv in output file
module <- sub(".*\\_", "", day_module) # call the module - help for name of csv in output file
# call the module and day
ModuleLoop <- Master_KEGG_MFTerms %>% dplyr::filter(module_day %in% day_module)
# Prep the enriched genes of interest wihtin each module...
#NOTE: the master file contains PGEN gene IDs separated by ';' - each row of PGEN IDs contains all genes associated with signifcant GO terms following  GO enrichment (in 'goseq')
# thus, these genes are called as important due to their GO annotation and significant calls  from functional enrichment analysis
EnrichedGenes <- as.data.frame(unlist( (strsplit(as.character(ModuleLoop$Gene_IDs), ";")) )) # split the genes for the significant goseq enrichment
colnames(EnrichedGenes)[1] <- 'Pgenerosa_Gene_IDs' # rename the single column in this call
EnrichedGenes_2 <- merge(Pgen_reference, EnrichedGenes, by ='Pgenerosa_Gene_IDs') # merge with the Pgen reference (Gene terms before the EC is stated!)
EnrichedGenes_2$Gene_terms    <- sub(" \\(.*", "", EnrichedGenes_2$Gene_terms) # removes all of gene term before the parenthesis
EnrichedGenes_2$Gene_terms    <- sub(" \\[.*", "", EnrichedGenes_2$Gene_terms) # calls al of the string BEFORE an open bracket (in some cases the sttring has just an open bracket without the closed
EnrichedGenes_2$Gene_terms    <- gsub("\\[.*?\\]", "", EnrichedGenes_2$Gene_terms) # now removes all bracketted terms
EnrichedGenes_2$Gene_terms    <- tolower(EnrichedGenes_2$Gene_terms) # convert all to lower case to merge with Cgigas
EnrichedGenes_2 <- unique(EnrichedGenes_2) # call only unique occurances
Pgenerosa_gene_calls <- length(unique(EnrichedGenes_2$Gene_terms)) # total genes called - use this to learn the percent merged with the C.gigas KEGG dataset
# merge and calculate the percent mapping
# Lets merge with the Cgigas genome!
vector                 <- as.vector(unique(EnrichedGenes_2$Gene_terms)) # call the gene term as a vector
vector_with_asserts    <- paste("^", vector, "$", sep='') # assets help to call the exact beginning and end of the gene term in grep1 (exact mtatch!) - otheriwse grep will use an 'in it' like funciton and call any genes that contain the whole term in addition to extra string chracters
EnrichedGenes_Cgigas <- subset(Crass_gigas_genome_dataframe, grepl(paste("^",vector_with_asserts,"$", sep="", collapse= "|"), Gene_terms, ignore.case = TRUE)) # subset the C gigas genome by the common and exact match to gene terms (with sig GO enrichmetn from 'goseq'!) in the module of interest
length(unique(EnrichedGenes_Cgigas$Gene_terms)) #
EnrichedGenes_Cgigas_removeduplicates = EnrichedGenes_Cgigas[!duplicated(EnrichedGenes_Cgigas$Gene_terms),]
Cgigas_gene_calls <- nrow(EnrichedGenes_Cgigas_removeduplicates) # total Pgen gens mapped to the Cgigas KEGG genome  - use this to learn the percent merged with the C.gigas KEGG dataset
# Run KEGG analysis
KEGG_vector_Pgen_Cgigas   <- as.vector(gsub(".*:","",EnrichedGenes_Cgigas_removeduplicates$Cgigas_KEGG_IDs)) # ommit the 'crg:' before the actual terms
KEGG_cgigas <- enrichKEGG(gene = KEGG_vector_Pgen_Cgigas,
organism  = 'crg', # 'hsa' is human 'crg' is pacific oyster
pvalueCutoff = 0.05)
# calaculate the percent mapped and print this...
Percent_mapped <- (Cgigas_gene_calls / Pgenerosa_gene_calls) * 100
print(paste(day_module, "-->", Percent_mapped, "percent mapped to Cgigas KEGG of N =", Pgenerosa_gene_calls, "total genes", sep = ' '))
print(head(KEGG_cgigas)[c(2:4,6)])
# if lloop to output the KEGG enrichment analysis ONLY if genes were successfully mapped...
if (  nrow(as.data.frame(head(KEGG_cgigas))) > 0 ) {
# creat dateframe and write the csv file out
df <- as.data.frame(head(KEGG_cgigas))
rownames(df) <- c()
KEGGoutput <- as.data.frame(do.call(cbind.data.frame, df))
KEGGoutput$GeneRatio <- gsub("/"," of ", KEGGoutput$GeneRatio)
write.csv(KEGGoutput, file = paste("Analysis/Output/GO/WGCNA_goseq/",day,"/KEGG/",day,"_module_",module,"_KEGG_MolecularFunction.csv", sep =''))
} else {}
print(paste("Finished!", day_module, sep = " "))
}
Master_KEGG_BPTerms <- rbind(d7_slimBP_brownModule, d7_slimBP_yellowModule, d7_slimBP_greenModule, # Day 7 modules
d14_slimBP_blackModule, d14_slimBP_brownModule, d14_slimBP_magentaModule, d14_slimBP_pinkModule, # Day 14 modules
d21_slimBP_blackModule, d21_slimBP_blueModule, d21_slimBP_pinkModule,d21_slimBP_redModule, d21_slimBP_yellowModule, d21_slimBP_turquoiseModule)  # Day 21 primary effect (note: d21_slimBP_magentaModule == NULL)
BP_daymodule_forloop <- as.data.frame(unique(Master_KEGG_BPTerms$module_day))
# Biological process for loop
for (i in 1:nrow(BP_daymodule_forloop)) {
# start with loop by calling the row value common with the 'Master_KEGG_BPTerms' data frind from rbind above
day_module <- BP_daymodule_forloop[i,1]
day <- sub("\\_.*", "", day_module) # call the day - help for name of csv in output file
module <- sub(".*\\_", "", day_module) # call the module - help for name of csv in output file
# call the module and day
ModuleLoop <- Master_KEGG_BPTerms %>% dplyr::filter(module_day %in% day_module)
# Prep the enriched genes of interest wihtin each module...
#NOTE: the master file contains PGEN gene IDs separated by ';' - each row of PGEN IDs contains all genes associated with signifcant GO terms following  GO enrichment (in 'goseq')
# thus, these genes are called as important due to their GO annotation and significant calls  from functional enrichment analysis
EnrichedGenes <- as.data.frame(unlist( (strsplit(as.character(ModuleLoop$Gene_IDs), ";")) )) # split the genes for the significant goseq enrichment
colnames(EnrichedGenes)[1] <- 'Pgenerosa_Gene_IDs' # rename the single column in this call
EnrichedGenes_2 <- merge(Pgen_reference, EnrichedGenes, by ='Pgenerosa_Gene_IDs') # merge with the Pgen reference (Gene terms before the EC is stated!)
EnrichedGenes_2$Gene_terms    <- sub(" \\(.*", "", EnrichedGenes_2$Gene_terms) # removes all of gene term before the parenthesis
EnrichedGenes_2$Gene_terms    <- sub(" \\[.*", "", EnrichedGenes_2$Gene_terms) # calls al of the string BEFORE an open bracket (in some cases the sttring has just an open bracket without the closed
EnrichedGenes_2$Gene_terms    <- gsub("\\[.*?\\]", "", EnrichedGenes_2$Gene_terms) # now removes all bracketted terms
EnrichedGenes_2$Gene_terms    <- tolower(EnrichedGenes_2$Gene_terms) # convert all to lower case to merge with Cgigas
EnrichedGenes_2 <- unique(EnrichedGenes_2) # call only unique occurances
Pgenerosa_gene_calls <- nrow(EnrichedGenes_2) # total genes called - use this to learn the percent merged with the C.gigas KEGG dataset
# merge and calculate the percent mapping
# Lets merge with the Cgigas genome!
vector                 <- as.vector(unique(EnrichedGenes_2$Gene_terms)) # call the gene term as a vector
vector_with_asserts    <- paste("^", vector, "$", sep='') # assets help to call the exact beginning and end of the gene term in grep1 (exact mtatch!) - otheriwse grep will use an 'in it' like funciton and call any genes that contain the whole term in addition to extra string chracters
EnrichedGenes_Cgigas <- subset(Crass_gigas_genome_dataframe, grepl(paste("^",vector_with_asserts,"$", sep="", collapse= "|"), Gene_terms, ignore.case = TRUE)) # subset the C gigas genome by the common and exact match to gene terms (with sig GO enrichmetn from 'goseq'!) in the module of interest
length(unique(EnrichedGenes_Cgigas$Gene_terms)) #
EnrichedGenes_Cgigas_removeduplicates = EnrichedGenes_Cgigas[!duplicated(EnrichedGenes_Cgigas$Gene_terms),]
Cgigas_gene_calls <- nrow(EnrichedGenes_Cgigas_removeduplicates) # total Pgen gens mapped to the Cgigas KEGG genome  - use this to learn the percent merged with the C.gigas KEGG dataset
# Run KEGG analysis
KEGG_vector_Pgen_Cgigas   <- as.vector(gsub(".*:","",EnrichedGenes_Cgigas_removeduplicates$Cgigas_KEGG_IDs)) # ommit the 'crg:' before the actual terms
KEGG_cgigas <- enrichKEGG(gene = KEGG_vector_Pgen_Cgigas,
organism  = 'crg', # 'hsa' is human 'crg' is pacific oyster
pvalueCutoff = 0.05)
# calaculate the percent mapped and print this...
Percent_mapped <- (Cgigas_gene_calls / Pgenerosa_gene_calls) * 100
print(paste(day_module, "-->", Percent_mapped, "percent mapped to Cgigas KEGG of N =", Pgenerosa_gene_calls, "total genes", sep = ' '))
print(head(KEGG_cgigas)[c(2:4,6)])
# if lloop to output the KEGG enrichment analysis ONLY if genes were successfully mapped...
if (  nrow(as.data.frame(head(KEGG_cgigas))) > 0 ) {
# creat dateframe and write the csv file out
df <- as.data.frame(head(KEGG_cgigas))
rownames(df) <- c()
KEGGoutput <- as.data.frame(do.call(cbind.data.frame, df))
KEGGoutput$GeneRatio <- gsub("/"," of ", KEGGoutput$GeneRatio)
write.csv(KEGGoutput, file = paste("Analysis/Output/GO/WGCNA_goseq/",day,"/KEGG/",day,"_module_",module,"_KEGG_BiologicalProcess.csv", sep =''))
} else {}
print(paste("Finished!", day_module, sep = " "))
}
Pgenerosa_gene_calls <- length(unique(EnrichedGenes_2$Gene_terms)) # total genes called - use this to learn the percent merged with the C.gigas KEGG dataset
Pgenerosa_gene_calls
# Biological process for loop
for (i in 1:nrow(BP_daymodule_forloop)) {
# start with loop by calling the row value common with the 'Master_KEGG_BPTerms' data frind from rbind above
day_module <- BP_daymodule_forloop[i,1]
day <- sub("\\_.*", "", day_module) # call the day - help for name of csv in output file
module <- sub(".*\\_", "", day_module) # call the module - help for name of csv in output file
# call the module and day
ModuleLoop <- Master_KEGG_BPTerms %>% dplyr::filter(module_day %in% day_module)
# Prep the enriched genes of interest wihtin each module...
#NOTE: the master file contains PGEN gene IDs separated by ';' - each row of PGEN IDs contains all genes associated with signifcant GO terms following  GO enrichment (in 'goseq')
# thus, these genes are called as important due to their GO annotation and significant calls  from functional enrichment analysis
EnrichedGenes <- as.data.frame(unlist( (strsplit(as.character(ModuleLoop$Gene_IDs), ";")) )) # split the genes for the significant goseq enrichment
colnames(EnrichedGenes)[1] <- 'Pgenerosa_Gene_IDs' # rename the single column in this call
EnrichedGenes_2 <- merge(Pgen_reference, EnrichedGenes, by ='Pgenerosa_Gene_IDs') # merge with the Pgen reference (Gene terms before the EC is stated!)
EnrichedGenes_2$Gene_terms    <- sub(" \\(.*", "", EnrichedGenes_2$Gene_terms) # removes all of gene term before the parenthesis
EnrichedGenes_2$Gene_terms    <- sub(" \\[.*", "", EnrichedGenes_2$Gene_terms) # calls al of the string BEFORE an open bracket (in some cases the sttring has just an open bracket without the closed
EnrichedGenes_2$Gene_terms    <- gsub("\\[.*?\\]", "", EnrichedGenes_2$Gene_terms) # now removes all bracketted terms
EnrichedGenes_2$Gene_terms    <- tolower(EnrichedGenes_2$Gene_terms) # convert all to lower case to merge with Cgigas
EnrichedGenes_2 <- unique(EnrichedGenes_2) # call only unique occurances
Pgenerosa_gene_calls <- length(unique(EnrichedGenes_2$Gene_terms)) # total genes called - use this to learn the percent merged with the C.gigas KEGG dataset
# merge and calculate the percent mapping
# Lets merge with the Cgigas genome!
vector                 <- as.vector(unique(EnrichedGenes_2$Gene_terms)) # call the gene term as a vector
vector_with_asserts    <- paste("^", vector, "$", sep='') # assets help to call the exact beginning and end of the gene term in grep1 (exact mtatch!) - otheriwse grep will use an 'in it' like funciton and call any genes that contain the whole term in addition to extra string chracters
EnrichedGenes_Cgigas <- subset(Crass_gigas_genome_dataframe, grepl(paste("^",vector_with_asserts,"$", sep="", collapse= "|"), Gene_terms, ignore.case = TRUE)) # subset the C gigas genome by the common and exact match to gene terms (with sig GO enrichmetn from 'goseq'!) in the module of interest
length(unique(EnrichedGenes_Cgigas$Gene_terms)) #
EnrichedGenes_Cgigas_removeduplicates = EnrichedGenes_Cgigas[!duplicated(EnrichedGenes_Cgigas$Gene_terms),]
Cgigas_gene_calls <- nrow(EnrichedGenes_Cgigas_removeduplicates) # total Pgen gens mapped to the Cgigas KEGG genome  - use this to learn the percent merged with the C.gigas KEGG dataset
# Run KEGG analysis
KEGG_vector_Pgen_Cgigas   <- as.vector(gsub(".*:","",EnrichedGenes_Cgigas_removeduplicates$Cgigas_KEGG_IDs)) # ommit the 'crg:' before the actual terms
KEGG_cgigas <- enrichKEGG(gene = KEGG_vector_Pgen_Cgigas,
organism  = 'crg', # 'hsa' is human 'crg' is pacific oyster
pvalueCutoff = 0.05)
# calaculate the percent mapped and print this...
Percent_mapped <- (Cgigas_gene_calls / Pgenerosa_gene_calls) * 100
print(paste(day_module, "-->", Percent_mapped, "percent mapped to Cgigas KEGG of N =", Pgenerosa_gene_calls, "total genes", sep = ' '))
print(head(KEGG_cgigas)[c(2:4,6)])
# if lloop to output the KEGG enrichment analysis ONLY if genes were successfully mapped...
if (  nrow(as.data.frame(head(KEGG_cgigas))) > 0 ) {
# creat dateframe and write the csv file out
df <- as.data.frame(head(KEGG_cgigas))
rownames(df) <- c()
KEGGoutput <- as.data.frame(do.call(cbind.data.frame, df))
KEGGoutput$GeneRatio <- gsub("/"," of ", KEGGoutput$GeneRatio)
write.csv(KEGGoutput, file = paste("Analysis/Output/GO/WGCNA_goseq/",day,"/KEGG/",day,"_module_",module,"_KEGG_BiologicalProcess.csv", sep =''))
} else {}
print(paste("Finished!", day_module, sep = " "))
}
Pgenerosa_gene_calls
vector
Pgenerosa_gene_calls
