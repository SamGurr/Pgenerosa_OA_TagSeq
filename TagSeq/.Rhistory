# GREEN MODULE GO terms only (WGCNA from above in script)
GreenMod_GO <- data.frame(GO = green.goseq$category,
term = green.goseq$term) # call columns of interest - GO terms only in the green module genes via WGCNa (above)
GreenMod_GO
GO.terms_rename
# GREEN MODULE GO terms only (WGCNA from above in script)
green.goseq$ontology
GO.terms_rename
Green_geneIDs
GO.terms_rename
Green_geneIDs$geneSymbol
# GREEN MODULE GO terms only (WGCNA from above in script)
GO.terms_Green <- GO.terms_rename  %>%  dplyr::filter(gene %in% Green_geneIDs$geneSymbol)
GreenMod_GO <- data.frame(GO = green.goseq$category,
term = green.goseq$term) # call columns of interest - GO terms only in the green module genes via WGCNa (above)
GreenMOD_gene_term <- merge(GreenMod_GO,GO.terms_Green, by = 'GO')  # merge
GreenMOD_gene_term <-GreenMOD_gene_term[,-1] # ommit the go term
head(GreenMOD_gene_term) # just contains the genes and their corresponding terms
# Narrow for JUST the genes called in the brown module in WGCNA
Brown_geneIDs <- d14_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% 'brown') %>%  dplyr::select("geneSymbol") # all geneSymbols (IDs) WITHIN the looped module color
# BROWN MODULE GO terms only (WGCNA from above in script)
GO.terms_Brown <- GO.terms_rename  %>%  dplyr::filter(gene %in% Brown_geneIDs$geneSymbol)
BrownMod_GO <- data.frame(GO = brown.goseq$category,
term = brown.goseq$term) # call columns of interest - GO terms only in the BROWN module genes via WGCNa (above)
BrownMOD_gene_term <- merge(BrownMod_GO,GO.terms_Brown, by = 'GO')  # merge
BrownMOD_gene_term <-BrownMOD_gene_term[,-1] # ommit the go term
head(BrownMOD_gene_term) # just contains the genes and their corresponding terms
head(GreenMOD_gene_term) # just contains the genes and their corresponding terms
nmodules(Green_Primary_cem.D14)
Green_Primary_D14_cemORA <- plot_ora(Green_Primary_cem.D14)
library(CEMiTool)
# GREEN MODULE GO terms only (WGCNA from above in script)
GO.terms_Green <- GO.terms_rename  %>%  dplyr::filter(gene %in% Green_geneIDs$geneSymbol)
GreenMod_GO <- data.frame(GO = green.goseq$category,
term = green.goseq$term) # call columns of interest - GO terms only in the green module genes via WGCNa (above)
GreenMOD_gene_term <- merge(GreenMod_GO,GO.terms_Green, by = 'GO')  # merge
GreenMOD_gene_term <-GreenMOD_gene_term[,-1] # ommit the go term
head(GreenMOD_gene_term) # just contains the genes and their corresponding terms
View(GreenMOD_gene_term)
# BROWN MODULE GO terms only (WGCNA from above in script)
GO.terms_Brown <- GO.terms_rename  %>%  dplyr::filter(gene %in% Brown_geneIDs$geneSymbol)
BrownMod_GO <- data.frame(GO = brown.goseq$category,
term = brown.goseq$term) # call columns of interest - GO terms only in the BROWN module genes via WGCNa (above)
BrownMOD_gene_term <- merge(BrownMod_GO,GO.terms_Brown, by = 'GO')  # merge
BrownMOD_gene_term <-BrownMOD_gene_term[,-1] # ommit the go term
head(BrownMOD_gene_term) # just contains the genes and their corresponding terms
View(BrownMOD_gene_term)
# BROWN MODULE terms only (WGCNA)
Brown_Primary_cem.D14 <- cemitool(expr.D14VST, BrownMOD_gene_term,
filter=TRUE, plot=TRUE, verbose=TRUE) # runs and plots everything
# BROWN MODULE terms only (WGCNA)
Brown_Primary_cem.D14 <- cemitool(expr.D14VST, sample_annot_PRIMARY, BrownMOD_gene_term,
filter=TRUE, plot=TRUE, verbose=TRUE) # runs and plots everything
Green_Primary_D14_cemORA <- plot_ora(Green_Primary_cem.D14,GreenMOD_gene_term)
Brown_Primary_D14_cemORA <- plot_ora(Brown_Primary_cem.D14)
plots_brown <- show_plot(Brown_Primary_D14_cemORA, "ora")
plots_brown[1]
plots_brown[2]
plots_brown[3]
plots_brown[1]
# BROWN MODULE terms only (WGCNA)
Brown_Primary_cem.D14 <- cemitool(expr.D14VST, sample_annot_PRIMARY, BrownMOD_gene_term,
filter=TRUE, plot=TRUE, verbose=TRUE) # runs and plots everything
plots_brown <- show_plot(Brown_Primary_cem.D14, "ora")
plots_brown[1]
plots_brown[2]
plots_brown[3]
plots_brown[4]
plots_brown[1]
nmodules(Brown_Primary_cem.D14)
head(module_genes(Brown_Primary_cem.D14))
Brown_Primary_D14_cemORA <- plot_ora(Brown_Primary_cem.D14, BrownMOD_gene_term)
# GREEN MODULE terms only (WGCNA)
Green_Primary_cem.D14 <- cemitool(expr.D14VST, sample_annot_PRIMARY, GreenMOD_gene_term,
filter=TRUE, plot=TRUE, verbose=TRUE) # runs and plots everything
nmodules(Green_Primary_cem.D14)
head(module_genes(Green_Primary_cem.D14))
Green_Primary_D14_cemORA <- plot_ora(Green_Primary_cem.D14,GreenMOD_gene_term)
Green_Primary_D14_cemORA <- plot_ora(Green_Primary_cem.D14,GreenMOD_gene_term)
GreenMOD_gene_term
Green_Primary_cem.D14
Green_Primary_D14_cemORA <- plot_ora(Green_Primary_cem.D14,GreenMOD_gene_term)
nmodules(Green_Primary_cem.D14)
head(module_genes(Green_Primary_cem.D14))
Green_Primary_cem.D14
nmodules(Green_Primary_cem.D14)
head(module_genes(Green_Primary_cem.D14))
sample_annot_PRIMARY
GreenMOD_gene_term
View(BrownMOD_gene_term)
View(GreenMOD_gene_term)
# GREEN MODULE terms only (WGCNA)
Green_Primary_cem.D14 <- cemitool(expr.D14VST, sample_annot_PRIMARY, GreenMOD_gene_term,
filter=TRUE, plot=TRUE, verbose=TRUE) # runs and plots everything
Green_Primary_D14_cemORA <- plot_ora(Green_Primary_cem.D14,GreenMOD_gene_term)
Green_Primary_D14_cemORA <- mod_ora(Green_Second_cem.D14, GreenMOD_gene_term)
Green_Second_cem.D14
Green_Primary_D14_cemORA <- mod_ora(Green_Primary_cem.D14, GreenMOD_gene_term)
GreenMOD_gene_term
Green_Primary_D14_cemORA <- mod_ora(Green_Primary_cem.D14, GreenMOD_gene_term)
plots_green <- show_plot(Green_Primary_D14_cemORA, "ora")
plots_green[1]
plots_green[2]
plots_green[3]
Green_Primary_D14_cemORA <- mod_ora(Green_Primary_cem.D14)
Green_Primary_D14_cemORA <- mod_ora(Green_Primary_cem.D14, GreenMOD_gene_term)
Brown_Primary_cem.D14 <- mod_ora(Brown_Primary_cem.D14, BrownMOD_gene_term)
BrownMOD_gene_term
View(BrownMOD_gene_term)
Brown_Primary_cem.D14 <- mod_ora(Brown_Primary_cem.D14, BrownMOD_gene_term)
# BROWN MODULE terms only (WGCNA)
Brown_Primary_cem.D14 <- cemitool(expr.D14VST, sample_annot_PRIMARY, BrownMOD_gene_term,
filter=FALSE, plot=FALSE, verbose=TRUE) # runs and plots everything
# GREEN MODULE terms only (WGCNA)
Green_Primary_cem.D14 <- cemitool(expr.D14VST, sample_annot_PRIMARY, GreenMOD_gene_term,
filter=TRUE, plot=TRUE, verbose=TRUE) # runs and plots everything
nmodules(Green_Primary_cem.D14)
head(module_genes(Green_Primary_cem.D14))
Green_Primary_cem.D14
Green_Primary_D14_cemORA <- mod_ora(Green_Primary_cem.D14, GreenMOD_gene_term)
plots_green <- show_plot(Green_Primary_D14_cemORA, "ora")
plots_green[1]
plots_green[2]
d14_EigenTraitMaster
head(d14_vst_data_t)
head(d14_vst_data)
head(d14_vst_data_1)
# normalized count data (same used for the dds object and WGCNA analysis)
d14_vst_data_t <- as.data.frame(t(d14_vst_data[, -(1)])) # trsnpose columns names to rows (genes)
colnames(d14_vst_data_t) <- d14_vst_data[, 1] # name the columns as the rows in previous dataset (sample IDS)
head(d14_vst_data_1)
# normalized count data (same used for the dds object and WGCNA analysis)
d14_vst_data_t <- as.data.frame(t(d14_vst_data[, -(1)])) # trsnpose columns names to rows (genes)
colnames(d14_vst_data_t) <- d14_vst_data[, 1] # name the columns as the rows in previous dataset (sample IDS)
head(d14_vst_data_1)
d14_vst_data <- read.csv("Analysis/Output/WGCNA/Day14/day14_vstTransformed_WGCNAdata.csv")
head(d14_vst_data)
# normalized count data (same used for the dds object and WGCNA analysis)
d14_vst_data_t <- as.data.frame(t(d14_vst_data[, -(1)])) # trsnpose columns names to rows (genes)
head(d14_vst_data_t)
colnames(d14_vst_data_t) <- d14_vst_data[, 1] # name the columns as the rows in previous dataset (sample IDS)
head(d14_vst_data_t)
d14_vst_data_m<- d14_vst_data_t %>% tibble::rownames_to_column("geneSymbol") # "geneSymbol" - create column and remname the gene name column to 'geneSymbol'
d14_vst <- d14_vst_data_t %>% tibble::rownames_to_column("geneSymbol") # "geneSymbol" - create column and remname the gene name column to 'geneSymbol'
head(d14_vst)
head(d14_vst_data_t)
# merge Master datasets
# GO terms
d14_GOTermsMaster.Modules<-  merge(d14_Annot_ModuleMembership, d14_vst_data_t, by = "geneSymbol")
dim(d14_GOTermsMaster.Modules) # 8626   63
# Eigengenes and traits
d14_EigenTraitMaster<-  merge(d14_ModEigen, Master.Treatment_Phenotype.data, by = "Sample.Name")
dim(d14_EigenTraitMaster) # 35 19
modcolor <- as.data.frame(unique(d14_Annot_ModuleMembership$moduleColor))
names(modcolor)[1] <- "color"
# experiment treatment and total protein data - narrow the columns
exp.phys_data <- Master.Treatment_Phenotype.data %>%
dplyr::filter(Date %in% 20190807) # filter out Day 7 data only
# vst read count date - narrow the columns - reshape and rename
Mod_geneIDs <- d14_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% modcolor[1,]) %>%  dplyr::select("geneSymbol")
d14_vst_Mod <- d14_vst_data_t %>% dplyr::filter(geneSymbol %in% Mod_geneIDs[,1])
Mod_geneIDs[,1]
d14_vst_Mod <- d14_vst_data_t %>% dplyr::filter(geneSymbol %in% Mod_geneIDs[,1])
Mod_geneIDs
d14_Annot_ModuleMembership
# merge Master datasets
# GO terms
d14_GOTermsMaster.Modules<-  merge(d14_Annot_ModuleMembership, d14_vst_data_t, by = "geneSymbol")
d14_Annot_ModuleMembership <-  read.csv("Analysis/Output/WGCNA/Day14/d14.WGCNA_ModulMembership.csv")
# merge Master datasets
# GO terms
d14_GOTermsMaster.Modules<-  merge(d14_Annot_ModuleMembership, d14_vst_data_t, by = "geneSymbol")
dim(d14_GOTermsMaster.Modules) # 8626   63
d14_Annot_ModuleMembership
# merge Master datasets
# GO terms
d14_GOTermsMaster.Modules<-  merge(d14_Annot_ModuleMembership, d14_vst, by = "geneSymbol")
dim(d14_GOTermsMaster.Modules) # 8626   63
# Eigengenes and traits
d14_EigenTraitMaster<-  merge(d14_ModEigen, Master.Treatment_Phenotype.data, by = "Sample.Name")
dim(d14_EigenTraitMaster) # 35 19
# vst read count date - narrow the columns - reshape and rename
Mod_geneIDs <- d14_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% modcolor[1,]) %>%  dplyr::select("geneSymbol")
d14_vst_Mod <- d14_vst_data_t %>% dplyr::filter(geneSymbol %in% Mod_geneIDs[,1])
d14_vst_Mod <- d14_vst %>% dplyr::filter(geneSymbol %in% Mod_geneIDs[,1])
head(d14_vst_Mod)
d14_vst_Mod2 <- d14_vst_Mod
d14_vst_Mod2$mean <- rowMeans(d14_vst_Mod2, na.rm = TRUE)
ncol(d14_vst_Mod2)
d14_vst_Mod2[,2:(ncol(d14_vst_Mod2))]
d14_vst_Mod2$mean <- rowMeans(d14_vst_Mod2[,2:(ncol(d14_vst_Mod2))], na.rm = TRUE)
d14_vst_Mod2
x <- d14_vst_Mod2 %>% mutate_at(vars(- !! geneSymbol), funs(. - !! geneSymbol))
d14_vst_Mod2[2:ncol(d14_vst_Mod2)] <-  d14_vst_Mod2[2:ncol(d14_vst_Mod2)]-d14_vst_Mod2$means
d14_vst_Mod2
d14_vst_Mod2[2:ncol(d14_vst_Mod2)]
d14_vst_Mod2[,2:ncol(d14_vst_Mod2)]
d14_vst_Mod2 <- d14_vst_Mod
d14_vst_Mod2[,2:ncol(d14_vst_Mod2)]
d14_vst_Mod2$means <- rowMeans((d14_vst_Mod2[,2:ncol(d14_vst_Mod2)]), na.rm=TRUE)
d14_vst_Mod2
d14_vst_Mod2[,2:ncol(d14_vst_Mod2)] <-  d14_vst_Mod2[2:ncol(d14_vst_Mod2)]-d14_vst_Mod2$means
d14_vst_Mod2
d14_vst_Mod_diff <- d14_vst_Mod
d14_vst_Mod_diff$means <- rowMeans((d14_vst_Mod_diff[,2:ncol(d14_vst_Mod_diff)]), na.rm=TRUE) # calculate the row mean of all samples
d14_vst_Mod_diff[,2:ncol(d14_vst_Mod_diff)] <-  d14_vst_Mod_diff[2:ncol(d14_vst_Mod_diff)]-d14_vst_Mod_diff$means # subtract all exp data from the mean
d14_vst_Mod_diff
d14_vst_Mod_diff$means <- NULL
d14_vst_Mod_diff
d14_vst_Mod_MELT <- melt(d14_vst_Mod, id=("geneSymbol")) # melt using reshape2
names(d14_vst_Mod_MELT)[(2:3)] <- c('Sample.Name', 'vst_Expression') # change column names
d14_vst_Mod_MELT
d14_vst_Mod_MELT_diff <- melt(d14_vst_Mod_diff, id=("geneSymbol")) # melt using reshape2
names(d14_vst_Mod_MELT_diff)[(2:3)] <- c('Sample.Name', 'vst_Expression') # change column names
d14_vst_Mod_MELT_diff
names(d14_vst_Mod_MELT_diff)[(2:3)] <- c('Sample.Name', 'vst_Expression_mean.diff') # change column names
d14_vst_Mod_MELT_diff
merged_Expdata_Mod_mean.diff <- merge(d14_vst_Mod_MELT_diff, exp.phys_data, by ='Sample.Name')
merged_Expdata_Mod_mean.diff
ggplot(merged_Expdata_Mod_mean.diff, aes(x=Second_Treament, y=vst_Expression_mean.diff , group=geneSymbol, color = Primary_Treatment)) +
theme(panel.grid=element_blank()) +
scale_color_manual(values=c("#56B4E9","#D55E00")) +
geom_line(size=0.2, alpha=0.1) +
theme_bw() +
facet_wrap(~Primary_Treatment)
ggplot(merged_Expdata_Mod_mean.diff, aes(x=Second_Treament, y=vst_Expression_mean.diff , group=geneSymbol, color = Primary_Treatment)) +
theme(panel.grid=element_blank()) +
scale_color_manual(values=c("#56B4E9","#D55E00")) +
geom_line(size=0.2, alpha=0.1) +
theme_bw() +
facet_wrap(~Primary_Treatment)
modcolor
# vst read count date - narrow the columns - reshape and rename
Mod_geneIDs <- d14_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% modcolor[2,]) %>%  dplyr::select("geneSymbol")
d14_vst_Mod <- d14_vst %>% dplyr::filter(geneSymbol %in% Mod_geneIDs[,1])
d14_vst_Mod_diff <- d14_vst_Mod # start the difference dataset
d14_vst_Mod_diff$means <- rowMeans((d14_vst_Mod_diff[,2:ncol(d14_vst_Mod_diff)]), na.rm=TRUE) # calculate the row mean of all samples
d14_vst_Mod_diff[,2:ncol(d14_vst_Mod_diff)] <-  d14_vst_Mod_diff[2:ncol(d14_vst_Mod_diff)]-d14_vst_Mod_diff$means # subtract all exp data from the mean
d14_vst_Mod_diff$means <- NULL # now ommit the means column
d14_vst_Mod_MELT_diff <- melt(d14_vst_Mod_diff, id=("geneSymbol")) # melt using reshape2
names(d14_vst_Mod_MELT_diff)[(2:3)] <- c('Sample.Name', 'vst_Expression_mean.diff') # change column names
merged_Expdata_Mod_mean.diff <- merge(d14_vst_Mod_MELT_diff, exp.phys_data, by ='Sample.Name')
ggplot(merged_Expdata_Mod_mean.diff, aes(x=Second_Treament, y=vst_Expression_mean.diff , group=geneSymbol, color = Primary_Treatment)) +
theme(panel.grid=element_blank()) +
scale_color_manual(values=c("#56B4E9","#D55E00")) +
geom_line(size=0.2, alpha=0.1) +
theme_bw() +
facet_wrap(~Primary_Treatment)
d14_Annot_ModuleMembership
# LOAD PACKAGES
library(WGCNA) # note: this was previously installed with the command `BiocManager::install("WGCNA")`
library(dplyr)
library(zoo)
library(DESeq2)
# for heatmap
# library(devtools)
# install_github("jokergoo/ComplexHeatmap") first run these - commented out to avoid running a second time...
library(ComplexHeatmap)
library(circlize)
library(reshape)
library(ggplot2)
library(hrbrthemes)
# SET WORKING DIRECTORY AND LOAD DATA
setwd("C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/")
# LOAD DATA
# Tagaseq filtered counts
day7.counts.matrix <- read.csv(file="Analysis/Data/filtered_counts/day7.counts.filtered_10cpm50perc.csv", sep=',', header=TRUE)
# Treatment and Phenotype data
Master.Treatment_Phenotype.data <- read.csv(file="Analysis/Data/ Master_Phyenotype.and.Exp.Treatment_Metadata.csv", sep=',', header=TRUE)
d7.Treatment_Phenotype.data     <- Master.Treatment_Phenotype.data %>%  dplyr ::filter(Date %in% 20190731) # split for day 7 data
# The following setting is important, do not omit.
options(stringsAsFactors = FALSE)
# ===================================================================================
#
#
# Day 7 WGCNA - PREPROCESSING THE DATA INPUT
#
#  Read here for the pre processing steps using WGCNA!
#  https://bmcbioinformatics.biomedcentral.com/track/pdf/10.1186/1471-2105-9-559.pdf
# ===================================================================================
# filter low values - note: this is pre filteres for < 5 CPM in 50% of samples - less strict than the DESeq2 analysis
dim(day7.counts.matrix) # 12013  rows (genes) -   37  samples  not counting 'x' and 'Gene.ID'
(day7.counts.matrix)[1] # ommit the first line and transpose in the next line
d7.data = as.data.frame(t(day7.counts.matrix[, -(1)])) # ommit all columns but samples and transpose
dim(d7.data) # 36 8548
# fix(d7.data) # view the data
# trait data ========================================================== #
# Phenotype trait and Treatment data
dim(d7.Treatment_Phenotype.data) #  36 rows and 14 columns
names(d7.Treatment_Phenotype.data) # look at the 14 columns
d7.Treatment_Phenotype.data = d7.Treatment_Phenotype.data[, -c(1:3,5,8)]; # remove columns that hold information we do not need. (i.e. tankks, Third treatment, All treatment group, etc.)
dim(d7.Treatment_Phenotype.data) # 36 rows and  9 columns
# fix(d7.Treatment_Phenotype.data)  # view the data
# count data  ========================================================== #
# fix(d21.data) # view the data - as you see all columns are now genes but filled as V1, V2, V3...
names(d7.data) = day7.counts.matrix$X # assigns column names (previous jsut numbered) as the gene ID
rownames(d7.data) = names(day7.counts.matrix)[-(1)]; # assigns the row names as the sample ID
d7.data_matrix <- data.frame(day7.counts.matrix[,-1], row.names=day7.counts.matrix[,1])
d7.data_matrix_t <- t(d7.data_matrix)
# fix(d7.data_matrix_t)  # view the data
# create dds objects to transform data
dds.d7 <- DESeqDataSetFromMatrix(countData = d7.data_matrix,
colData = d7.Treatment_Phenotype.data, design = ~ 1) # DESeq Data Set (dds)
# DESeq Data Set (dds)
# NOTE: ~1 stands for no design; user will need to add a design for differential testing
# however for our purpose of just creating an onbject to transform, we do not need a design here...
# transform the data
dds.d7_vst <- vst(dds.d7) # transform it vst
dds.d7_vst <- assay(dds.d7_vst) # call only the transformed coutns in the dds object
#fix(dds.d7_vst)
dds.d7_vst <- t(dds.d7_vst) # transpose columns to rows and vice versa
# ===================================================================================
#
# Day 7 WGCNA Sample tree
#
# ===================================================================================
dim(dds.d7_vst) #  8548 genes; 36  samples
gsg = goodSamplesGenes(dds.d7_vst, verbose = 3);  # We first check for genes and samples with too many missing values:
gsg$allOK # If the statement
sampleTree = hclust(dist(dds.d7_vst), method = "average") # Next we cluster the samples (in contrast to clustering genes that will come later)  to see if there are any obvious outliers.
sizeGrWindow(12,9) # The user should change the dimensions if the window is too large or too small.
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2) # appears there are two outliers SG55 and SG 105; can remove by hand or an automatic appraoch
abline(h = 110, col = "red") # add line to plot to show the cut-off od outlier samples (40000) SG105 and SG55
# cut ethe tree and ommit from the reads data
clust = cutreeStatic(sampleTree, cutHeight = 110, minSize = 10) # Determine cluster under the line
table(clust) # 0 = cut; 1 = kept; says it will cut 2 and save 60
# 'keepsamples' boolean to call the main dataset
keepSamples = (clust==1) # call the 30 from clust at position 1
# view the ommited samples from the tree
omittedsamples = (clust==0)
omSamples = dds.d7_vst[omittedsamples,]
nrow(omSamples) # should be 1
rownames(omSamples) # should be 6 - "SG90" "SG89" "SG62" "SG21" "SG22" "SG59" What treatments are these??
omSamplesData <- d7.Treatment_Phenotype.data %>% dplyr::filter(Sample.Name %in% (rownames(omSamples))) %>% dplyr::select(c('Sample.Name', 'Primary_Treatment', 'Second_Treament')) # three Primary Ambient and three Primary Moderate
# integrate keepsamples to the main read dataset
dds.d7_vst = dds.d7_vst[keepSamples, ] # integreat the boolean 'keepsamples' to ommit oultilers determined in the sample tree above
nGenes = ncol(dds.d7_vst) # number of genes == 8548
nSamples = nrow(dds.d7_vst) # number of samples == 35  - the cut tree removed 6 samples
nGenes
nSamples
# plot the tree with the 'keep samples' bollean (T/F) to ommit outlier samples
sampleTree2 = hclust(dist(dds.d7_vst), method = "average") # Next we cluster the samples (in contrast to clustering genes that will come later)  to see if there are any obvious outliers.
plot(sampleTree2, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
# based on outlier removall... call Trait data ===================================================== #
dim(dds.d7_vst) #   35 8548- transformed count data now  has 30 samples - 6 cut in the tree step above
dim(d7.Treatment_Phenotype.data) # 36  9 - trait data has  36 samples - not yet cut!
# Form a data frame analogous to expression data that will hold the clinical traits.
d7.Samples = rownames(dds.d7_vst);# start new variable 'd21.Samples' calling the row names of the gene data (sample as 'Mouse' in trait data)
TreatRows = match(d7.Samples, d7.Treatment_Phenotype.data$Sample.Name); # match the names
d7.Traits = d7.Treatment_Phenotype.data[TreatRows, -1]; # removes the row numbers
rownames(d7.Traits) = d7.Treatment_Phenotype.data[TreatRows, 1]; # inserts the new traitRows - matches sample treatments
dim(d7.Traits) #  35 Samples 8 columns (primary and second treatment) - note: no Third treatment because that occured Days 14-21, after this sampling day
all(rownames(d7.Traits) == rownames(dds.d7_vst))  # should be TRUE
dim(d7.Traits) #  35  8
# ALL TRAITS
d7.Traits
# ONLY TREATMENTS
d7.Traits.treat<- d7.Traits[,c(1:2)]
d7.Traits.treat$All <- paste (d7.Traits.treat$Primary_Treatment,d7.Traits.treat$Second_Treament, sep ='')
# primary groups
d7.Traits.Primary <-  d7.Traits.treat %>% dplyr::select('Primary_Treatment')
d7.Traits.Primary$A <- (d7.Traits.Primary$Primary_Treatment == "A")
d7.Traits.Primary$A   <- as.numeric(d7.Traits.Primary$A)
d7.Traits.Primary$A <- as.factor(d7.Traits.Primary$A)
d7.Traits.Primary$M <- (d7.Traits.Primary$Primary_Treatment == "M")
d7.Traits.Primary$M   <- as.numeric(d7.Traits.Primary$M)
d7.Traits.Primary$M <- as.factor(d7.Traits.Primary$M)
d7.Traits.Primary <- d7.Traits.Primary[,c(2:3)] # final dataset of 0,1 for teatment groups - Primary only!
# Secondary groups
d7.Traits.Secondary <-  d7.Traits.treat %>% dplyr::select('Second_Treament')
d7.Traits.Secondary$A <- (d7.Traits.Secondary$Second_Treament == "A")
d7.Traits.Secondary$A <- as.numeric(d7.Traits.Secondary$A)
d7.Traits.Secondary$A <- as.factor(d7.Traits.Secondary$A)
d7.Traits.Secondary$M <- (d7.Traits.Secondary$Second_Treament == "M")
d7.Traits.Secondary$M <- as.numeric(d7.Traits.Secondary$M)
d7.Traits.Secondary$M <- as.factor(d7.Traits.Secondary$M)
d7.Traits.Secondary$S <- (d7.Traits.Secondary$Second_Treament == "S")
d7.Traits.Secondary$S <- as.numeric(d7.Traits.Secondary$S)
d7.Traits.Secondary$S <- as.factor(d7.Traits.Secondary$S)
d7.Traits.Secondary <- d7.Traits.Secondary[,c(2:4)] # final dataset of 0,1 for teatment groups - Secondary only!
# Group
d7.Traits.Group <-  d7.Traits.treat %>% dplyr::select('All')
d7.Traits.Group$AA <- (d7.Traits.treat$All == "AA")
d7.Traits.Group$AA   <- as.numeric(d7.Traits.Group$AA)
d7.Traits.Group$AA <- as.factor(d7.Traits.Group$AA)
d7.Traits.Group$AM <- (d7.Traits.treat$All == "AM")
d7.Traits.Group$AM   <- as.numeric(d7.Traits.Group$AM)
d7.Traits.Group$AM <- as.factor(d7.Traits.Group$AM)
d7.Traits.Group$AS <- (d7.Traits.treat$All == "AS")
d7.Traits.Group$AS   <- as.numeric(d7.Traits.Group$AS)
d7.Traits.Group$AS <- as.factor(d7.Traits.Group$AS)
d7.Traits.Group$MA <- (d7.Traits.treat$All == "MA")
d7.Traits.Group$MA   <- as.numeric(d7.Traits.Group$MA)
d7.Traits.Group$MA <- as.factor(d7.Traits.Group$MA)
d7.Traits.Group$MM <- (d7.Traits.treat$All == "MM")
d7.Traits.Group$MM   <- as.numeric(d7.Traits.Group$MM)
d7.Traits.Group$MM <- as.factor(d7.Traits.Group$MM)
d7.Traits.Group$MS <- (d7.Traits.treat$All == "MS")
d7.Traits.Group$MS   <- as.numeric(d7.Traits.Group$MS)
d7.Traits.Group$MS <- as.factor(d7.Traits.Group$MS)
d7.Traits.Group <- d7.Traits.Group[,c(2:7)] # final dataset of 0,1 for teatment groups - Secondary groups only!
#=====================================================================================
softPower = 3 # set your soft threshold based on the plots above
adjacency = adjacency(dds.d7_vst, power = softPower) # this tak
#=====================================================================================
#
#  Step 2: Turn adjacency into topological overlap
#
#=====================================================================================
TOM = TOMsimilarity(adjacency)  # this takes a long time.. just wait...
dissTOM = 1-TOM
#=====================================================================================
#
#  Step 3:Call the hierarchical clustering function - plot the tree
#
#=====================================================================================
# Call the hierarchical clustering function
geneTree = hclust(as.dist(dissTOM), method = "average");
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE, hang = 0.04);
#=====================================================================================
#
#  Step 4: Set module size and 'cutreeDynamic' to create clusters
#
#=====================================================================================
# We like large modules, so we set the minimum module size relatively high:
minModuleSize = 100; # set this for the subseqent call...
# Module identification using dynamic tree cut:
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM,
deepSplit = 1, pamRespectsDendro = FALSE,
minClusterSize = minModuleSize);
table(dynamicMods) # number of genes per module
#=====================================================================================
#
#  Step 5: convert numeric network to colors and plot the dendrogram
#
#=====================================================================================
# Convert numeric lables into colors
dynamicColors = labels2colors(dynamicMods) # add colors to module labels (previously numbers)
table(dynamicColors) # lets look at this table...
#=====================================================================================
#
#  Step 5: convert numeric network to colors and plot the dendrogram
#
#=====================================================================================
# Convert numeric lables into colors
dynamicColors = labels2colors(dynamicMods) # add colors to module labels (previously numbers)
table(dynamicColors) # lets look at this table...
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05,
main = "Gene dendrogram and module colors")
#=====================================================================================
#
#  Step 6: Calculate Eigengenes - view thier connectivity based on 'MEDiss = 1-cor(MEs)'
#
#=====================================================================================
# Calculate eigengenes
MEList = moduleEigengenes(dds.d7_vst, colors = dynamicColors)
MEs = MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "average");
plot(METree, main = "Clustering of module eigengenes (dissimilarity calc = MEDiss = 1-cor(MEs))",
xlab = "", sub = "")
#=====================================================================================
#
#  Step 7: Specify the cut line for the dendrogram (module) - Calc MODULE EIGENGENES (mergeMEs)
#
#=====================================================================================
MEDissThres = 0.35
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
# Call an automatic merging function
merge = mergeCloseModules(dds.d7_vst, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colors
mergedColors = merge$colors;
# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs;
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
#=====================================================================================
#
#  Step 9: Commit to mergedcolors as 'MEs' and 'moduleColors'
#
#=====================================================================================
# Rename to moduleColors
moduleColors = mergedColors
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50));
moduleLabels = match(moduleColors, colorOrder)-1;
MEs = mergedMEs;
table(dynamicColors) # lets look at this table...
#=====================================================================================
#
#  Step 9: Commit to mergedcolors as 'MEs' and 'moduleColors'
#
#=====================================================================================
# Rename to moduleColors
moduleColors = mergedColors
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50));
moduleLabels = match(moduleColors, colorOrder)-1;
moduleLabels
table(mergedColors)
