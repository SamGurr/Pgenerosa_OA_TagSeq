knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
df_total <- data.frame() # start dataframe
loop.table <- data.frame(matrix(nrow = 3, ncol = 4)) # create dataframe to save cumunalitively during for loop
colnames(loop.table)<-c('CPM_threshold', 'Day', 'total_genes', 'mean_reads_per_sample') # names for comuns in the for loop
CPM_loop <- c(0:50)
CPM_loop <- data.frame(CPM_loop)
for (i in 1:nrow(CPM_loop)) {
for (i in 1:nrow(CPM_loop)) {
var <- CPM_loop[i,1]
# ==========================================================
#
# DAY 7
# ==========================================================
cts.merged.d7 <- raw_counts.merged.as.table[,c(1,na.omit(match(exp.data.d7$Sample.Name, colnames(raw_counts.merged.as.table))))]
cts.merged.d7 <- data.frame(cts.merged.d7[,-1], row.names=cts.merged.d7[,1])
cts.matrix.d7  <-as.matrix(cts.merged.d7, row.names="transcript_id")
CPM.d7 <- cpm(cts.matrix.d7) # Obtain CPMs (counts oer million) using egdeR
thresh.d7 <- CPM.d7 > var # Which values in myCPM are greater than 3?
keep.d7 <- rowSums(thresh.d7) >= (ncol(thresh.d7)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
rowSums(head(thresh.d7)) # Summary of how many TRUEs there are in each row
table(rowSums(thresh.d7)) # 6880 genes with TRUE in all 36 samples
cts.matrix.d7.LOOPED <- cts.matrix.d7[keep.d7,]
d7_total_genes           <- nrow(cts.matrix.d7.LOOPED)
d7_mean_reads_per_sample <- mean(colSums(cts.matrix.d7.LOOPED))
# ==========================================================
#
# DAY 14
# ==========================================================
cts.merged.d14 <- raw_counts.merged.as.table[,c(1,na.omit(match(exp.data.d14$Sample.Name, colnames(raw_counts.merged.as.table))))]
cts.merged.d14 <- data.frame(cts.merged.d14[,-1], row.names=cts.merged.d14[,1])
cts.matrix.d14  <-as.matrix(cts.merged.d14, row.names="transcript_id")
CPM.d14 <- cpm(cts.matrix.d14) # Obtain CPMs (counts oer million) using egdeR
thresh.d14 <- CPM.d14 > var # Which values in myCPM are greater than 3?
keep.d14 <- rowSums(thresh.d14) >= (ncol(thresh.d14)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
cts.matrix.d14.LOOPED <- cts.matrix.d14[keep.d14,]
d14_total_genes           <- nrow(cts.matrix.d14.LOOPED)
d14_mean_reads_per_sample <- mean(colSums(cts.matrix.d14.LOOPED))
# ==========================================================
#
# DAY 21
# ==========================================================
cts.merged.d21 <- raw_counts.merged.as.table[,c(1,na.omit(match(exp.data.d21$Sample.Name, colnames(raw_counts.merged.as.table))))]
cts.merged.d21 <- data.frame(cts.merged.d21[,-1], row.names=cts.merged.d21[,1])
cts.matrix.d21  <-as.matrix(cts.merged.d21, row.names="transcript_id")
CPM.d21 <- cpm(cts.matrix.d21) # Obtain CPMs (counts oer million) using egdeR
thresh.d21 <- CPM.d21 > var # Which values in myCPM are greater than 3?
keep.d21 <- rowSums(thresh.d21) >= (ncol(thresh.d21)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
cts.matrix.d21.LOOPED <- cts.matrix.d21[keep.d21,]
d21_total_genes           <- nrow(cts.matrix.d21.LOOPED)
d21_mean_reads_per_gene <- mean(rowSums(cts.matrix.d21.LOOPED))
loop.table$CPM_threshold           <- c(var, var, var)
loop.table$Day                     <- c(7, 14, 21)
loop.table$total_genes             <- c(d7_total_genes, d14_total_genes, d21_total_genes)
loop.table$mean_reads_per_gene   <- c(d7_mean_reads_per_gene, d14_mean_reads_per_gene, d21_mean_reads_per_gene)
df <- data.frame(loop.table) # name dataframe for this singl e row
df_total <- rbind(df_total,df) #bind to a cumulative list dataframe
#print(df_total) # print to monitor progress
}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
for (i in 1:nrow(CPM_loop)) {
var <- CPM_loop[i,1]
# ==========================================================
#
# DAY 7
# ==========================================================
cts.merged.d7 <- raw_counts.merged.as.table[,c(1,na.omit(match(exp.data.d7$Sample.Name, colnames(raw_counts.merged.as.table))))]
cts.merged.d7 <- data.frame(cts.merged.d7[,-1], row.names=cts.merged.d7[,1])
cts.matrix.d7  <-as.matrix(cts.merged.d7, row.names="transcript_id")
CPM.d7 <- cpm(cts.matrix.d7) # Obtain CPMs (counts oer million) using egdeR
thresh.d7 <- CPM.d7 > var # Which values in myCPM are greater than 3?
keep.d7 <- rowSums(thresh.d7) >= (ncol(thresh.d7)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
rowSums(head(thresh.d7)) # Summary of how many TRUEs there are in each row
table(rowSums(thresh.d7)) # 6880 genes with TRUE in all 36 samples
cts.matrix.d7.LOOPED <- cts.matrix.d7[keep.d7,]
d7_total_genes           <- nrow(cts.matrix.d7.LOOPED)
d7_mean_reads_per_gene <- mean(rowSums(cts.matrix.d7.LOOPED))
# ==========================================================
#
# DAY 14
# ==========================================================
cts.merged.d14 <- raw_counts.merged.as.table[,c(1,na.omit(match(exp.data.d14$Sample.Name, colnames(raw_counts.merged.as.table))))]
cts.merged.d14 <- data.frame(cts.merged.d14[,-1], row.names=cts.merged.d14[,1])
cts.matrix.d14  <-as.matrix(cts.merged.d14, row.names="transcript_id")
CPM.d14 <- cpm(cts.matrix.d14) # Obtain CPMs (counts oer million) using egdeR
thresh.d14 <- CPM.d14 > var # Which values in myCPM are greater than 3?
keep.d14 <- rowSums(thresh.d14) >= (ncol(thresh.d14)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
cts.matrix.d14.LOOPED <- cts.matrix.d14[keep.d14,]
d14_total_genes           <- nrow(cts.matrix.d14.LOOPED)
d14_mean_reads_per_gene <- mean(rowSums(cts.matrix.d14.LOOPED))
# ==========================================================
#
# DAY 21
# ==========================================================
cts.merged.d21 <- raw_counts.merged.as.table[,c(1,na.omit(match(exp.data.d21$Sample.Name, colnames(raw_counts.merged.as.table))))]
cts.merged.d21 <- data.frame(cts.merged.d21[,-1], row.names=cts.merged.d21[,1])
cts.matrix.d21  <-as.matrix(cts.merged.d21, row.names="transcript_id")
CPM.d21 <- cpm(cts.matrix.d21) # Obtain CPMs (counts oer million) using egdeR
thresh.d21 <- CPM.d21 > var # Which values in myCPM are greater than 3?
keep.d21 <- rowSums(thresh.d21) >= (ncol(thresh.d21)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
cts.matrix.d21.LOOPED <- cts.matrix.d21[keep.d21,]
d21_total_genes           <- nrow(cts.matrix.d21.LOOPED)
d21_mean_reads_per_gene <- mean(rowSums(cts.matrix.d21.LOOPED))
loop.table$CPM_threshold           <- c(var, var, var)
loop.table$Day                     <- c(7, 14, 21)
loop.table$total_genes             <- c(d7_total_genes, d14_total_genes, d21_total_genes)
loop.table$mean_reads_per_gene   <- c(d7_mean_reads_per_gene, d14_mean_reads_per_gene, d21_mean_reads_per_gene)
df <- data.frame(loop.table) # name dataframe for this singl e row
df_total <- rbind(df_total,df) #bind to a cumulative list dataframe
#print(df_total) # print to monitor progress
}
DAY7_filterfig <- df_total %>%
dplyr::filter(Day %in% 7) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_gene, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
facet_wrap(. ~ variable, scales="free")
DAY7_filterfig
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
DAY14_filterfig <- df_total %>%
dplyr::filter(Day %in% 14) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_gene, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
facet_wrap(. ~ variable, scales="free")
DAY14_filterfig
DAY21_filterfig <- df_total %>%
dplyr::filter(Day %in% 21) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_gene, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
facet_wrap(. ~ variable, scales="free")
DAY21_filterfig
DAY14_filterfig <- df_total %>%
dplyr::filter(Day %in% 14) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_gene, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
facet_wrap(. ~ variable, scales="free")
DAY14_filterfig
# SET WORKING DIRECTORY AND LOAD DATA
setwd("C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/")
# Load libraries
library(dplyr)
library(tidyr)
library(goseq)
library(reshape2)
library(ggplot2)
library(Rmisc)
library(ggpubr)
library(tibble)
library(hrbrthemes)
library(gridExtra)
library(ggplot2)
library(tidyr)
library(forcats) # for plotting later..
library(zoo)
library(ComplexHeatmap)
library(circlize)
library(GO.db)
library(GSEABase)
library(data.table)
library(stringr)
=========================================================================================
# Build a master list of all genes and GO terms 'Pgen_GOterms2'
Geoduck_annotation <- read.delim2(file="C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/Seq_details/Panopea-generosa-genes-annotations.txt", header=F) # Load themaster Pgenerosa gene list
Pgen_GOterms <- Geoduck_annotation %>% dplyr::select(c('V1','V8')) # select only two columns - those with the gene IDs and those with the GO terms
Pgen_GOterms2 <- strsplit(Pgen_GOterms$V8, split = "; ") # create a string splitting by delimiter '; ' - view the data to see that this separates each GO term entry in the string
Pgen_GOterms2 <- data.frame(gene.ID = rep(Pgen_GOterms$V1, sapply(Pgen_GOterms2, length)), Go.terms = unlist(Pgen_GOterms2)) # create new dataframe 'Pgen_GOterms2' listing genes for each GO term (MUCH longer!)
Pgen_GOterms2 <- na.omit(Pgen_GOterms2) # ommit the NAs  - genes without GO annotation
# WGCNa data results
d0_Annot_ModuleMembership      <-  read.csv("Analysis/Output/WGCNA/subseq_treatments_all/Day0/d0.WGCNA_ModulMembership.csv")   # WGCNA results day 7  - Module membership
d0_Annot_ModuleMembership
d0_Annot_ModuleMembership      <- d0_Annot_ModuleMembership[,c(3:4,7:8)] # call gene ID, module color, and GO annotation
d0_Annot_ModuleMembership$Day  <- "Day0"  # common column to divide master dataset
d0ModCols                      <- data.frame(moduleColor = unique(d0_Annot_ModuleMembership$moduleColor)) # call all unique module colors
d0ModCols                      <- d0ModCols %>% filter(moduleColor %in% 'midnightblue') # MODULES WITH SIG CORR WITH TREATMENT
d0ModCols$Day                  <- "Day0" # common column for the for loop
d0ModCols
d7_Annot_ModuleMembership      <-  read.csv("Analysis/Output/WGCNA/subseq_treatments_all/Day7/d7.WGCNA_ModulMembership.csv")   # WGCNA results day 7  - Module membership
d7_Annot_ModuleMembership      <- d7_Annot_ModuleMembership[,c(3:4,7:8)] # call gene ID, module color, and GO annotation
d7_Annot_ModuleMembership$Day  <- "Day7"  # common column to divide master dataset
d7ModCols                      <- data.frame(moduleColor = unique(d7_Annot_ModuleMembership$moduleColor)) # call all unique module colors
d7ModCols                      <- d7ModCols %>% filter(moduleColor %in% c('brown', 'yellow', 'green')) # MODULES WITH SIG CORR WITH TREATMENT
d7ModCols$Day                  <- "Day7" # common column for the for loop
d14_Annot_ModuleMembership     <-  read.csv("Analysis/Output/WGCNA/subseq_treatments_all/Day14/d14.WGCNA_ModulMembership.csv") # WGCNA results day 14 - Module membership
d14_Annot_ModuleMembership     <- d14_Annot_ModuleMembership[,c(3:4,7:8)] # call gene ID, module color, and GO annotation
d14_Annot_ModuleMembership$Day <- "Day14"  # common column to divide master dataset
d14ModCols                     <- data.frame(moduleColor = unique(d14_Annot_ModuleMembership$moduleColor)) # call all unique module colors
d14ModCols                     <- d14ModCols %>% filter(moduleColor %in% c('brown', 'black', 'pink', 'magenta')) # MODULES WITH SIG CORR WITH TREATMENT
d14ModCols$Day                 <- "Day14" # common column for the for loop
d21_Annot_ModuleMembership     <-  read.csv("Analysis/Output/WGCNA/subseq_treatments_all/Day21/d21.WGCNA_ModulMembership.csv") # WGCNA results day 21 - Module membership
d21_Annot_ModuleMembership     <- d21_Annot_ModuleMembership[,c(3:4,7:8)] # call gene ID, module color, and GO annotation
d21_Annot_ModuleMembership$Day <- "Day21" # common column to divide master dataset
d21ModCols                     <- data.frame(moduleColor = unique(d21_Annot_ModuleMembership$moduleColor)) # call all unique module colors
d21ModCols                     <- d21ModCols %>% filter(moduleColor %in% c('magenta', 'blue', 'yellow', 'red', 'black', 'pink', 'turquoise')) # MODULES WITH SIG CORR WITH TREATMENT
d21ModCols$Day                 <- "Day21" # common column for the for loop
WGCNA_MasterModData   <-  rbind(d7_Annot_ModuleMembership, d14_Annot_ModuleMembership, d21_Annot_ModuleMembership) # master WGCNA data table
WGCNA_ColorList       <-  rbind(d7ModCols, d14ModCols, d21ModCols) # master WGCNA color list - use this to loop all the analysis
slim <- getOBOCollection("http://current.geneontology.org/ontology/subsets/goslim_generic.obo") #get GO database - # call goslim_generic.obo terms as 'slim'
#===================================================================================== #
# LOAD DATA - Raw Count Data - FILTERED COUNT MATRICES USED IN WGCNA- 10CPM in 50% of samples
#
#===================================================================================== #
# day7 filtered 10cpm in 50% samples ----------------------------- #
Day0_all.counts <- read.csv(file="C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/Analysis/Data/Filtered_Counts/10cpm_50perc/day0.counts.filtered_10cpm50perc.csv", sep=',', header=TRUE)
colnames(Day0_all.counts)[1] <- "gene.ID"# rename Pgen gene ID column
# day7 filtered 10cpm in 50% samples ----------------------------- #
Day7_all.counts <- read.csv(file="C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/Analysis/Data/Filtered_Counts/10cpm_50perc/day7.counts.filtered_10cpm50perc.csv", sep=',', header=TRUE)
colnames(Day7_all.counts)[1] <- "gene.ID"# rename Pgen gene ID column
# day14 filtered 10cpm in 50% samples ----------------------------- #
Day14_all.counts <- read.csv(file="C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/Analysis/Data/Filtered_Counts/10cpm_50perc/day14.counts.filtered_10cpm50perc.csv", sep=',', header=TRUE)
colnames(Day14_all.counts)[1] <- "gene.ID"# rename Pgen gene ID column
# day21 filtered 10cpm in 50% samples ----------------------------- #
Day21_all.counts <- read.csv(file="C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/Analysis/Data/Filtered_Counts/10cpm_50perc/day21.counts.filtered_10cpm50perc.csv", sep=',', header=TRUE)
colnames(Day21_all.counts)[1] <- "gene.ID"# rename Pgen gene ID column
#===================================================================================== #
#Panopea generosa - load .fna ('Geoduck_annotation') and foramt GO terms ('Geoduck_GOterms') and vectors
Geoduck_annotation <- read.delim2(file="C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/Seq_details/Panopea-generosa-genes-annotations.txt", header=F)
# build annotation file to merge with the mean LFC tables
annot.condenced <- Geoduck_annotation[,c(1,3:9)]
annot.condenced$gene.length <- annot.condenced$V4 - annot.condenced$V3
annot.condenced <- annot.condenced[,-c(2,3)]
names(annot.condenced) <- c('Gene.ID', 'Uniprot', 'HGNC', 'fxn', 'Go.terms', 'Go.fxns','gene.length')
# Prepare dataframe(s) and vectors for goseq
# (1) Format 'GO.term' for goseq from the P.generosa annotation .fna file 'Geoduck_annotation'
Geoduck_GOterms <- as.data.frame(Geoduck_annotation) %>% dplyr::select(c('V1','V8'))
colnames(Geoduck_GOterms)[1:2] <- c('transcript.ID', 'GO.terms') # call gene name and the GO terms - (Uniprot ID 'V5')
splitted <- strsplit(as.character(Geoduck_GOterms$GO.terms), "; ") #slit into multiple GO ids
GO.terms <- data.frame(v1 = rep.int(Geoduck_GOterms$transcript.ID, sapply(splitted, length)), v2 = unlist(splitted)) #list all genes with each of their GO terms in a single row
GO.terms$Term <- Term(GO.terms$v2)
GO.terms$Ontology  <- Ontology(GO.terms$v2)
IDvector.d0         <- as.vector(unique(Day0_all.counts$gene.ID))  # call unique genes (those filtered and used in DESEq2) on day0 - 'IDvector'
GO_unique.genes.all <- as.vector(unique(Geoduck_annotation$V1)) # call all unique genes for GO analysis (goseq)
IDvector.d0         <- as.vector(unique(Day0_all.counts$gene.ID))  # call unique genes (those filtered and used in DESEq2) on day0 - 'IDvector'
IDvector.d7         <- as.vector(unique(Day7_all.counts$gene.ID))  # call unique genes (those filtered and used in DESEq2) on day7 - 'IDvector'
IDvector.d14        <- as.vector(unique(Day14_all.counts$gene.ID)) # call unique genes (those filtered and used in DESEq2) on day14 - 'IDvector'
IDvector.d21        <- as.vector(unique(Day21_all.counts$gene.ID)) # call unique genes (those filtered and used in DESEq2) on day21 - 'IDvector'
# (3) Gene length
# length vector
GO_gene.length <- Geoduck_annotation %>% dplyr::mutate(length = V4-V3) %>%  dplyr::select(c("V1","length"))
names(GO_gene.length)[1] <- "gene.ID"
length_vector   <- GO_gene.length$length
GeneLength.d0   <- merge(GO_gene.length, Day0_all.counts, by = "gene.ID")  # merge day0 counts with 'GO_gene.length'
GeneLength.d7   <- merge(GO_gene.length, Day7_all.counts, by = "gene.ID")  # merge day7 counts with 'GO_gene.length'
GeneLength.d14  <- merge(GO_gene.length, Day14_all.counts, by = "gene.ID")  # merge day14 counts with 'GO_gene.length'
GeneLength.d21  <- merge(GO_gene.length, Day21_all.counts, by = "gene.ID")  # merge day21 counts with 'GO_gene.length'
# call length values for goseq - confirms that the IDvector and length_vector are the same!!!
length_vector.d0 <- GeneLength.d0$length    # length vector for all unique reads address in WGCNA on day 0
sum(sapply(length_vector.d0,length)) == dim(Day0_all.counts)[1] #should be TRUE
length_vector.d7 <- GeneLength.d7$length    # length vector for all unique reads address in WGCNA on day 7
sum(sapply(length_vector.d7,length)) == dim(Day7_all.counts)[1] #should be TRUE
length_vector.d14 <- GeneLength.d14$length  # length vector for all unique reads address in WGCNA on day 14
sum(sapply(length_vector.d14,length)) == dim(Day14_all.counts)[1] #should be TRUE
length_vector.d21 <- GeneLength.d21$length  # length vector for all unique reads address in WGCNA on day 21
sum(sapply(length_vector.d21,length)) == dim(Day21_all.counts)[1] #should be TRUE
WGCNA_ColorList
WGCNA_ColorList       <-  rbind(d0ModCols, d7ModCols, d14ModCols, d21ModCols) # master WGCNA color list - use this to loop all the analysis
WGCNA_MasterModData   <-  rbind(d0_Annot_ModuleMembership, d7_Annot_ModuleMembership, d14_Annot_ModuleMembership, d21_Annot_ModuleMembership) # master WGCNA data table
WGCNA_ColorList       <-  rbind(d0ModCols, d7ModCols, d14ModCols, d21ModCols) # master WGCNA color list - use this to loop all the analysis
WGCNA_ColorList
WGCNA_ColorList[1,2]
WGCNA_ColorList[1,2]
WGCNA_ColorList[1,1]
Mod <- d0_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% WGCNA_ColorList[1,1]) # call the WGCNA Day - essential here!
Modgenes <- Mod[1]
names(Modgenes)[1] <- "Gene.ID" # 162 genws in the green module
# Mod_integer <- as.integer(IDvector.d7 %in% (Modgenes$Gene.ID)) # call the day-specific ID vector
# names(Mod_integer)=IDvector.d7 # rename
Mod_integer <- as.integer(GO_unique.genes.all %in% (Modgenes$Gene.ID)) # w/o day-specific ID vector
names(Mod_integer)=GO_unique.genes.all # rename
#pwf       <- nullp(Mod_integer,    id=IDvector.d7, bias.data=length_vector.d7) # make figure margins large enough for this to run...
pwf       <- nullp(Mod_integer,    id=GO_unique.genes.all, bias.data=length_vector) # make figure margins large enough for this to run...
goseq     <- goseq(pwf, gene2cat=GO.terms, test.cats=c("GO:CC", "GO:BP", "GO:MF"), method="Wallenius", use_genes_without_cat=TRUE)
GO.05.a         <- goseq$category[goseq$over_represented_pvalue<.05] # change twice here
GO.05           <- data.frame(GO.05.a)
colnames(GO.05) <- c("category")
GO.05           <- merge(GO.05, goseq, by="category") # change here
GO.05           <- GO.05[order(GO.05$ontology, GO.05$over_represented_pvalue,-GO.05$numDEInCat),]
GO.05$term      <- as.factor(GO.05$term)
GO.05$moduleColor <- WGCNA_ColorList[i,1]
GO.05$Day       <- "Day0"
GO.05$moduleColor <- WGCNA_ColorList[1,1]
GO.05$Day       <- "Day0"
# remove Biological Process GO terms with < 10 genes in the module  (with that term) and ommit Molecular Function terms with < 3 genes in the module (with that term)
GO.05_filtered <- GO.05 %>% filter(!(numDEInCat<10 & ontology == "BP"), !(numDEInCat<2 & ontology == "MF"))
write.csv(GO.05_filtered, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Day0/GO.05",WGCNA_ColorList[i,1], "Module.csv", sep ='')) # save csv file
write.csv(GO.05_filtered, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Day0/GO.05",WGCNA_ColorList[1,1], "Module.csv", sep ='')) # save csv file
#===================================================================================================
#
#
#  GOslim analysis
# - data reduction from the many GO terms to more broad functions/processes
#
#
#===================================================================================================
# load the output from the previous for loop
d0_GO.05midnightbluenModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Day0/GO.05midnightblueModule.csv")
d0_GO.05midnightbluenModule
# View(d21_GO.05yellowModule)
Geoduck_annotation <- read.delim2(file="C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/Seq_details/Panopea-generosa-genes-annotations.txt", header=F)
# build annotation file to merge with the mean LFC tables
Pgen_condenced <- Geoduck_annotation[,c(1,7)] # load just the PGEN ID and the putative gene terms
Pgen_condenced$Gene_term    <- sub(" \\(EC.*", "", Pgen_condenced$V7)  # str_extract(annot.condenced$V7, "[^(]+")
Pgen_reference <- na.omit(Pgen_condenced[c(1,3)])
names(Pgen_reference)  <- c('PgenIDs', 'Gene_terms')
d7_GO.05brownModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Day7/GO.05brownModule.csv")
d7_GO.05greenModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Day7/GO.05greenModule.csv")
d7_GO.05yellowModule  <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Day7/GO.05yellowModule.csv")
d14_GO.05blackModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Day14/GO.05blackModule.csv")
d14_GO.05brownModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Day14/GO.05brownModule.csv")
d14_GO.05magentaModule <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Day14/GO.05magentaModule.csv")
d14_GO.05pinkModule    <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Day14/GO.05pinkModule.csv")
d21_GO.05blackModule    <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Day21/GO.05blackModule.csv")
d21_GO.05blueModule     <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Day21/GO.05blueModule.csv")
d21_GO.05magentaModule  <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Day21/GO.05magentaModule.csv")
d21_GO.05pinkModule     <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Day21/GO.05pinkModule.csv")
d21_GO.05redModule      <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Day21/GO.05redModule.csv")
d21_GO.05yellowModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Day21/GO.05yellowModule.csv")
d21_GO.05turquoiseModule <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Day21/GO.05turquoiseModule.csv")
# Master ALL WGCNA significant modules with treatment
Master_goseq_results      <- rbind(d0_GO.05midnightbluenModule,
d7_GO.05brownModule, d7_GO.05greenModule, d7_GO.05yellowModule,
d14_GO.05blackModule, d14_GO.05brownModule, d14_GO.05magentaModule, d14_GO.05pinkModule,
d21_GO.05blackModule, d21_GO.05blueModule, d21_GO.05magentaModule, d21_GO.05pinkModule, d21_GO.05redModule, d21_GO.05yellowModule, d21_GO.05turquoiseModule)
# call all the module colors and days to loop GOslim analysis
GOslimLoop_vars <- unique(Master_goseq_results[c(9,10)])
# Master ALL WGCNA significant modules with treatment
Master_goseq_results      <- rbind(d7_GO.05brownModule, d7_GO.05greenModule, d7_GO.05yellowModule,
d14_GO.05blackModule, d14_GO.05brownModule, d14_GO.05magentaModule, d14_GO.05pinkModule,
d21_GO.05blackModule, d21_GO.05blueModule, d21_GO.05magentaModule, d21_GO.05pinkModule, d21_GO.05redModule, d21_GO.05yellowModule, d21_GO.05turquoiseModule)
# call all the module colors and days to loop GOslim analysis
GOslimLoop_vars <- unique(Master_goseq_results[c(9,10)])
# Master ALL WGCNA significant modules with treatment
Master_goseq_results      <- rbind(d0_GO.05midnightbluenModule,
d7_GO.05brownModule, d7_GO.05greenModule, d7_GO.05yellowModule,
d14_GO.05blackModule, d14_GO.05brownModule, d14_GO.05magentaModule, d14_GO.05pinkModule,
d21_GO.05blackModule, d21_GO.05blueModule, d21_GO.05magentaModule, d21_GO.05pinkModule, d21_GO.05redModule, d21_GO.05yellowModule, d21_GO.05turquoiseModule)
# call all the module colors and days to loop GOslim analysis
GOslimLoop_vars <- unique(Master_goseq_results[c(9,10)])
GOslimLoop_vars[1,2]
# call the target dataset
goseq_res       <- Master_goseq_results %>%  dplyr::filter(Day %in% GOslimLoop_vars[1,2], moduleColor %in% GOslimLoop_vars[1,1])
WGCNA_res       <- WGCNA_MasterModData  %>%  dplyr::filter(Day %in% GOslimLoop_vars[1,2], moduleColor %in% GOslimLoop_vars[1,1])
gene_names      <- WGCNA_res$geneSymbol # all gene IDs in the particular WGCNA module
WGCNA_res
# Master ALL WGCNA significant modules with treatment
Master_goseq_results      <- rbind(d0_GO.05midnightbluenModule,
d7_GO.05brownModule, d7_GO.05greenModule, d7_GO.05yellowModule,
d14_GO.05blackModule, d14_GO.05brownModule, d14_GO.05magentaModule, d14_GO.05pinkModule,
d21_GO.05blackModule, d21_GO.05blueModule, d21_GO.05magentaModule, d21_GO.05pinkModule, d21_GO.05redModule, d21_GO.05yellowModule, d21_GO.05turquoiseModule)
WGCNA_MasterModData
goseq_res
GOslimLoop_vars[1,2]
GOslimLoop_vars[1,1]
moduleColor
GOslimLoop_vars[1,2]
# Master ALL WGCNA significant modules with treatment
Master_goseq_results      <- rbind(d0_GO.05midnightbluenModule,
d7_GO.05brownModule, d7_GO.05greenModule, d7_GO.05yellowModule,
d14_GO.05blackModule, d14_GO.05brownModule, d14_GO.05magentaModule, d14_GO.05pinkModule,
d21_GO.05blackModule, d21_GO.05blueModule, d21_GO.05magentaModule, d21_GO.05pinkModule, d21_GO.05redModule, d21_GO.05yellowModule, d21_GO.05turquoiseModule)
d0_GO.05midnightbluenModule
# call all the module colors and days to loop GOslim analysis
GOslimLoop_vars <- unique(Master_goseq_results[c(9,10)])
# call the target dataset
goseq_res       <- Master_goseq_results %>%  dplyr::filter(Day %in% GOslimLoop_vars[1,2], moduleColor %in% GOslimLoop_vars[1,1])
goseq_res
GOslimLoop_vars[1,1]
GOslimLoop_vars[1,2]
GOslimLoop_vars
GOslimLoop_vars[1,2
GOslimLoop_vars[1,2]
GOslimLoop_vars[1,1]
GOslimLoop_vars
GOslimLoop_vars
Master_goseq_results
# call the target dataset
goseq_res       <- Master_goseq_results %>%  dplyr::filter(Day %in% GOslimLoop_vars[1,1], moduleColor %in% GOslimLoop_vars[1,2])
goseq_res
WGCNA_res       <- WGCNA_MasterModData  %>%  dplyr::filter(Day %in% GOslimLoop_vars[1,1], moduleColor %in% GOslimLoop_vars[1,2])
WGCNA_res
gene_names      <- WGCNA_res$geneSymbol # all gene IDs in the particular WGCNA module
gene_names
# Biological Function - run GOslim
goseq_res_BP        <- goseq_res %>%  filter(ontology=="BP") # BP - all GO terms upregulated
BP_GOcollection     <- GOCollection(goseq_res_BP$category)
GOslims_BP          <- data.frame(goSlim(BP_GOcollection, slim, "BP")) #Find common parent terms to slim down our list
GOslims_BP$category <- row.names(GOslims_BP) #save rownames as category
# Molecular Function - run GOslim
goseq_res_MF        <- goseq_res %>%  filter(ontology=="MF") # BP - all GO terms upregulated
MF_GOcollection     <- GOCollection(goseq_res_MF$category)
GOslims_MF          <- data.frame(goSlim(MF_GOcollection, slim, "MF")) #Find common parent terms to slim down our list
GOslims_MF$category <- row.names(GOslims_MF) #save rownames as category
# ====================================================================================
# Get mapped terms - add to the GOslims datatable
# from Sam White's Biostars [post](https://support.bioconductor.org/p/128407/#128409).
# ====================================================================================
# Write function mappedIds to get the query terms that mapped to the slim categories
# ...in other words, add a column to your slim dataframe with all the GO terms from goseq
mappedIds <-  function(df, collection, OFFSPRING) {  #the command to run requires a dataframe of slim terms, like slims_MF above, your list of query terms, and the offspring from the GOCollection by goSlim
map <- as.list(OFFSPRING[rownames(df)]) # Subset GOcollection offspring by the rownames of your dataframe
mapped <- lapply(map, intersect, ids(collection)) #Find the terms that intersect between the subset made above of your query terms and the GOids from the GO collection
df[["go_terms"]] <- vapply(unname(mapped), paste, collapse = ";", character(1L)) #Add column "go_terms" with matching terms
df #show resulting dataframe
}
BPslim_Mapped <- mappedIds(GOslims_BP, BP_GOcollection, GOBPOFFSPRING)
MFslim_Mapped <- mappedIds(GOslims_MF, MF_GOcollection, GOMFOFFSPRING)
# BIOLOGICAL PROCESS
BPslim             <- filter(BPslim_Mapped, Term!="biological_process") #filter out empty slims and term "biological process" and slims with < 2 GO terms (omitted the Count>=2)
BPsplitted         <- strsplit(as.character(BPslim$go_terms), ";") #split into multiple GO ids
BPslim$BPsplitted  <- BPsplitted
for (n in 1:nrow(BPslim)) {
table       <- data.frame(GOlist = unlist(BPslim[n,6])) # call the BPsplitted column of characters and create a small table to filter
table       <- unique(table)
Pgen_module  <- Pgen_GOterms2 %>% dplyr::filter(gene.ID %in% gene_names) # d7_Mod.Brown$X calls the gene names in the origin Module membership dataframe at the start of this script
Pgen_loop    <- Pgen_module %>% dplyr::filter(Go.terms %in% table$GOlist) # filter Gene IDs with the GO term
Pgen_geneIDs <- Pgen_loop[-2] # ommit the GO.terms to call unique gene calls
Pgen_geneIDs <- unique(Pgen_geneIDs) # call unique Gene calls (unique genes that had the GO term within each of the GOslim bins)
BPslim$Gene.Count[n] <- nrow(Pgen_geneIDs)  # count of unique GeneIDs in each GOslim bin
BPslim$Gene.IDs[[n]] <- vapply((Pgen_geneIDs$gene.ID), paste, collapse = ";", character(1L))
} # end n in 1:nrow
BPslim_A <- data.frame(Term = rep.int(BPslim$Term, sapply(BPsplitted, length)), go_term = unlist(BPsplitted)) #list all
BPslim_B <- merge(BPslim_A, BPslim, by="Term") #Add back counts, term, and category info
BPslim_C <- unique(setDT(BPslim_B)[order(go_term, -Gene.Count)], by = "category") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
BPslim_final <- BPslim_C[,c(1,5,3,2,6,8:9)]
colnames(BPslim_final) <- c("slim_term", "slim_cat", "GO_count", "GO_terms", "GO_list", "Gene_count", "Gene_IDs")
BPslim_final[["Gene_IDs"]] <- vapply(unname(BPslim_final$Gene_IDs), paste, collapse = ";", character(1L)) # convert from a list to simply a charaacter string with ; delimiter
#BPslim_final <- data.frame(slim_term=BPslim_C$Term, slim_cat=BPslim_C$category, category=BPslim_C$go_term, Gene.Count=BPslim_C$Gene.Count, GO.Count=BPslim_C$Count, Gene.IDs=BPslim_C$Gene.IDs) #rename columns) #rename columns
BPslim_final$module_day <- paste(GOslimLoop_vars[1,2], GOslimLoop_vars[1,1], sep = '_')
if (nrow(goseq_res_BP) >0) {
BPslim_GOterm_summary       <- BPslim_final[,c(1,2,5,7)]
s <- strsplit(BPslim_GOterm_summary$GO_list, split = ";")
BPslim_GOterm_summary_2     <- data.frame(slim_term = rep(BPslim_GOterm_summary$slim_term, sapply(s, length)),
Gene_IDs  = rep(BPslim_GOterm_summary$Gene_IDs, sapply(s, length)),
GO_terms = unlist(s))
colnames(goseq_res_BP)[2]   <- 'GO_terms'
BPslim_GOterm_summary_final <- merge(goseq_res_BP, BPslim_GOterm_summary_2, by = 'GO_terms')
s_2 <- strsplit(BPslim_GOterm_summary_final$Gene_IDs, split = ";")
BPslim_GOterm_gene_annotation <- data.frame(slim_term      = rep(BPslim_GOterm_summary_final$slim_term, sapply(s_2, length)),
over_represented_pvalue = rep(BPslim_GOterm_summary_final$over_represented_pvalue, sapply(s_2, length)),
GO_terms       = rep(BPslim_GOterm_summary_final$GO_terms, sapply(s_2, length)),
term           = rep(BPslim_GOterm_summary_final$term, sapply(s_2, length)),
ontology       = rep(BPslim_GOterm_summary_final$ontology, sapply(s_2, length)),
moduleColor    = rep(BPslim_GOterm_summary_final$moduleColor, sapply(s_2, length)),
PgenIDs        = unlist(s_2))
BP_master_gene_reference <- merge(BPslim_GOterm_gene_annotation, Pgen_reference, by = "PgenIDs")
} else (c(BPslim_GOterm_summary_final = NULL, BP_master_gene_reference = NULL))
# MOLECULAR FUNCTION
MFslim             <- filter(MFslim_Mapped, Term!="molecular_function") #filter out empty slims and term "biological process" (omitted the Count>=2)
MFsplitted         <- strsplit(as.character(MFslim$go_terms), ";") #split into multiple GO ids
MFslim$MFsplitted  <- MFsplitted
for (m in 1:nrow(MFslim)) {
table       <- data.frame(GOlist = unlist(MFslim[m,6])) # call the MFsplitted column of characters and create a small table to filter
table       <- unique(table)
Pgen_module  <- Pgen_GOterms2 %>% dplyr::filter(gene.ID %in% gene_names) # d7_Mod.Brown$X calls the gene names in the origin Module membership dataframe at the start of this script
Pgen_loop    <- Pgen_module %>% dplyr::filter(Go.terms %in% table$GOlist) # filter Gene IDs with the GO term
Pgen_geneIDs <- Pgen_loop[-2] # ommit the GO.terms to call unique gene calls
Pgen_geneIDs <- unique(Pgen_geneIDs) # call unique Gene calls (unique genes that had the GO term within each of the GOslim bins)
MFslim$Gene.Count[m] <- nrow(Pgen_geneIDs)  # count of unique GeneIDs in each GOslim bin
MFslim$Gene.IDs[[m]] <- vapply((Pgen_geneIDs$gene.ID), paste, collapse = ";", character(1L))
} # end m in 1:nrow
MFslim_A <- data.frame(Term = rep.int(MFslim$Term, sapply(MFsplitted, length)), go_term = unlist(MFsplitted)) #list all
MFslim_B <- merge(MFslim_A, MFslim, by="Term") #Add back counts, term, and category info
MFslim_C <- unique(setDT(MFslim_B)[order(go_term, -Gene.Count)], by = "category") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
MFslim_final <- MFslim_C[,c(1,5,3,2,6,8:9)]
colnames(MFslim_final) <- c("slim_term", "slim_cat", "GO_count", "GO_terms", "GO_list", "Gene_count", "Gene_IDs")
MFslim_final[["Gene_IDs"]] <- vapply(unname(MFslim_final$Gene_IDs), paste, collapse = ";", character(1L)) # convert from a list to simply a charaacter string with ; delimiter
# MFslim_final <- data.frame(slim_term=MFslim_C$Term, slim_cat=MFslim_C$category, category=MFslim_C$go_term, Gene.Count=MFslim_C$Gene.Count, GO.Count=MFslim_C$Count) #rename columns) #rename columns
MFslim_final$module_day <- paste(GOslimLoop_vars[1,2], GOslimLoop_vars[1,1], sep = '_')
if (nrow(goseq_res_MF) >0) {
MFslim_GOterm_summary       <- MFslim_final[,c(1,2,5,7)]
s <- strsplit(MFslim_GOterm_summary$GO_list, split = ";")
MFslim_GOterm_summary_2     <- data.frame(slim_term = rep(MFslim_GOterm_summary$slim_term, sapply(s, length)),
Gene_IDs  = rep(MFslim_GOterm_summary$Gene_IDs, sapply(s, length)),
GO_terms = unlist(s))
colnames(goseq_res_MF)[2]   <- 'GO_terms'
MFslim_GOterm_summary_final <- merge(goseq_res_MF, MFslim_GOterm_summary_2, by = 'GO_terms')
s_2 <- strsplit(MFslim_GOterm_summary_final$Gene_IDs, split = ";")
MFslim_GOterm_gene_annotation <- data.frame(slim_term      = rep(MFslim_GOterm_summary_final$slim_term, sapply(s_2, length)),
over_represented_pvalue = rep(MFslim_GOterm_summary_final$over_represented_pvalue, sapply(s_2, length)),
GO_terms       = rep(MFslim_GOterm_summary_final$GO_terms, sapply(s_2, length)),
term           = rep(MFslim_GOterm_summary_final$term, sapply(s_2, length)),
ontology       = rep(MFslim_GOterm_summary_final$ontology, sapply(s_2, length)),
moduleColor    = rep(MFslim_GOterm_summary_final$moduleColor, sapply(s_2, length)),
PgenIDs        = unlist(s_2))
MF_master_gene_reference <- merge(MFslim_GOterm_gene_annotation, Pgen_reference, by = "PgenIDs")
} else (c(MFslim_GOterm_summary_final = NULL, MF_master_gene_reference = NULL))
MFslim_GOterm_summary_final
MFslim_final
GOslimLoop_vars[1,2]
write.csv(MFslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/", GOslimLoop_vars[1,1], "/GOslim_MolFunction_",GOslimLoop_vars[1,2], "Module.csv", sep ='')) # save csv file
write.csv(BPslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/", GOslimLoop_vars[1,1], "/GOslim_BiolProc_",GOslimLoop_vars[1,2], "Module.csv", sep ='')) # save csv file
write.csv(MFslim_GOterm_summary_final, file = paste("Analysis/Output/GO/WGCNA_goseq/", GOslimLoop_vars[1,1], "/GOterms_and_GOslim_MolFunction_",GOslimLoop_vars[1,2], "Module.csv", sep ='')) # save csv file
write.csv(BPslim_GOterm_summary_final, file = paste("Analysis/Output/GO/WGCNA_goseq/", GOslimLoop_vars[1,1], "/GOterms_and_GOslim_BiolProc_",GOslimLoop_vars[1,2], "Module.csv", sep ='')) # save csv file
write.csv(MF_master_gene_reference, file = paste("Analysis/Output/GO/WGCNA_goseq/", GOslimLoop_vars[1,1], "/GOterms_and_GOslim_MolFunction_",GOslimLoop_vars[1,2], "Module_GENE_REFERENCE.csv", sep ='')) # save csv file
write.csv(BP_master_gene_reference, file = paste("Analysis/Output/GO/WGCNA_goseq/", GOslimLoop_vars[1,1], "/GOterms_and_GOslim_BiolProc_",GOslimLoop_vars[1,2], "Module_GENE_REFERENCE.csv", sep ='')) # save csv file
# save GOslim final datasets for BP and MF of each  module in their respective folder(s) by Day
write.csv(MFslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/", GOslimLoop_vars[1,1], "/GOslim_MolFunction_",GOslimLoop_vars[1,2], "Module.csv", sep ='')) # save csv file
write.csv(BPslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/", GOslimLoop_vars[1,1], "/GOslim_BiolProc_",GOslimLoop_vars[1,2], "Module.csv", sep ='')) # save csv file
write.csv(MFslim_GOterm_summary_final, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/", GOslimLoop_vars[1,1], "/GOterms_and_GOslim_MolFunction_",GOslimLoop_vars[1,2], "Module.csv", sep ='')) # save csv file
write.csv(BPslim_GOterm_summary_final, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/", GOslimLoop_vars[1,1], "/GOterms_and_GOslim_BiolProc_",GOslimLoop_vars[1,2], "Module.csv", sep ='')) # save csv file
write.csv(MF_master_gene_reference, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/", GOslimLoop_vars[1,1], "/GOterms_and_GOslim_MolFunction_",GOslimLoop_vars[1,2], "Module_GENE_REFERENCE.csv", sep ='')) # save csv file
write.csv(BP_master_gene_reference, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/", GOslimLoop_vars[1,1], "/GOterms_and_GOslim_BiolProc_",GOslimLoop_vars[1,2], "Module_GENE_REFERENCE.csv", sep ='')) # save csv file
