d21_Annot_ModuleMembership     <-  read.csv("Analysis/Output/WGCNA/Day21/d21.WGCNA_ModulMembership.csv") # WGCNA results day 21 - Module membership
d21_Annot_ModuleMembership     <- d21_Annot_ModuleMembership[,c(3:4,7:8)] # call gene ID, module color, and GO annotation
d21_Annot_ModuleMembership$Day <- "Day21" # common column to divide master dataset
d21ModCols                     <- data.frame(moduleColor = unique(d21_Annot_ModuleMembership$moduleColor)) # call all unique module colors
d21ModCols                     <- d21ModCols %>% filter(moduleColor %in% c('magenta', 'blue', 'yellow', 'red', 'black', 'pink')) # MODULES WITH SIG CORR WITH TREATMENT
d21ModCols$Day                 <- "Day21" # common column for the for loop
WGCNA_MasterModData   <-  rbind(d7_Annot_ModuleMembership, d14_Annot_ModuleMembership, d21_Annot_ModuleMembership) # master WGCNA data table
WGCNA_ColorList       <-  rbind(d7ModCols, d14ModCols, d21ModCols) # master WGCNA color list - use this to loop all the analysis
slim <- getOBOCollection("http://current.geneontology.org/ontology/subsets/goslim_generic.obo") #get GO database - # call goslim_generic.obo terms as 'slim'
for (i in 1:nrow(GOslimLoop_vars)) {
# call the target dataset
goseq_res       <- Master_goseq_results %>%  dplyr::filter(Day %in% GOslimLoop_vars[i,2], moduleColor %in% GOslimLoop_vars[i,1])
WGCNA_res       <- WGCNA_MasterModData  %>%  dplyr::filter(Day %in% GOslimLoop_vars[i,2], moduleColor %in% GOslimLoop_vars[i,1])
gene_names      <- WGCNA_res$geneSymbol # all gene IDs in the particular WGCNA module
# Biological Function - run GOslim
goseq_res_BP        <- goseq_res %>%  filter(ontology=="BP") # BP - all GO terms upregulated
BP_GOcollection     <- GOCollection(goseq_res_BP$category)
GOslims_BP          <- data.frame(goSlim(BP_GOcollection, slim, "BP")) #Find common parent terms to slim down our list
GOslims_BP$category <- row.names(GOslims_BP) #save rownames as category
# Molecular Function - run GOslim
goseq_res_MF        <- goseq_res %>%  filter(ontology=="MF") # BP - all GO terms upregulated
MF_GOcollection     <- GOCollection(goseq_res_MF$category)
GOslims_MF          <- data.frame(goSlim(MF_GOcollection, slim, "MF")) #Find common parent terms to slim down our list
GOslims_MF$category <- row.names(GOslims_MF) #save rownames as category
# ====================================================================================
# Get mapped terms - add to the GOslims datatable
# from Sam White's Biostars [post](https://support.bioconductor.org/p/128407/#128409).
# ====================================================================================
# Write function mappedIds to get the query terms that mapped to the slim categories
# ...in other words, add a column to your slim dataframe with all the GO terms from goseq
mappedIds <-  function(df, collection, OFFSPRING) {  #the command to run requires a dataframe of slim terms, like slims_MF above, your list of query terms, and the offspring from the GOCollection by goSlim
map <- as.list(OFFSPRING[rownames(df)]) # Subset GOcollection offspring by the rownames of your dataframe
mapped <- lapply(map, intersect, ids(collection)) #Find the terms that intersect between the subset made above of your query terms and the GOids from the GO collection
df[["go_terms"]] <- vapply(unname(mapped), paste, collapse = ";", character(1L)) #Add column "go_terms" with matching terms
df #show resulting dataframe
}
BPslim_Mapped <- mappedIds(GOslims_BP, BP_GOcollection, GOBPOFFSPRING)
MFslim_Mapped <- mappedIds(GOslims_MF, MF_GOcollection, GOMFOFFSPRING)
# BIOLOGICAL PROCESS
BPslim             <- filter(BPslim_Mapped, Count>5 & Term!="biological_process") #filter out empty slims and term "biological process"
BPsplitted         <- strsplit(as.character(BPslim$go_terms), ";") #split into multiple GO ids
BPslim$BPsplitted  <- BPsplitted
for (n in 1:nrow(BPslim)) {
table       <- data.frame(GOlist = unlist(BPslim[n,6])) # call the BPsplitted column of characters and create a small table to filter
table       <- unique(table)
Pgen_module  <- Pgen_GOterms2 %>% dplyr::filter(gene.ID %in% gene_names) # d7_Mod.Brown$X calls the gene names in the origin Module membership dataframe at the start of this script
Pgen_loop    <- Pgen_module %>% dplyr::filter(Go.terms %in% table$GOlist) # filter Gene IDs with the GO term
Pgen_geneIDs <- Pgen_loop[-2] # ommit the GO.terms to call unique gene calls
Pgen_geneIDs <- unique(Pgen_geneIDs) # call unique Gene calls (unique genes that had the GO term within each of the GOslim bins)
BPslim$Gene.Count[n] <- nrow(Pgen_geneIDs)  # count of unique GeneIDs in each GOslim bin
BPslim$Gene.IDs[[n]] <- vapply((Pgen_geneIDs$gene.ID), paste, collapse = ";", character(1L))
} # end n in 1:nrow
BPslim_A <- data.frame(Term = rep.int(BPslim$Term, sapply(BPsplitted, length)), go_term = unlist(BPsplitted)) #list all
BPslim_B <- merge(BPslim_A, BPslim, by="Term") #Add back counts, term, and category info
BPslim_C <- unique(setDT(BPslim_B)[order(go_term, -Gene.Count)], by = "category") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
BPslim_final <- data.frame(slim_term=BPslim_C$Term, slim_cat=BPslim_C$category, category=BPslim_C$go_term, Gene.Count=BPslim_C$Gene.Count, GO.Count=BPslim_C$Count) #rename columns) #rename columns
# MOLECULAR FUNCTION
MFslim             <- filter(MFslim_Mapped, Count>5 & Term!="molecular_function") #filter out empty slims and term "biological process"
MFsplitted         <- strsplit(as.character(MFslim$go_terms), ";") #split into multiple GO ids
MFslim$MFsplitted  <- MFsplitted
for (m in 1:nrow(MFslim)) {
table       <- data.frame(GOlist = unlist(MFslim[m,6])) # call the MFsplitted column of characters and create a small table to filter
table       <- unique(table)
Pgen_module  <- Pgen_GOterms2 %>% dplyr::filter(gene.ID %in% gene_names) # d7_Mod.Brown$X calls the gene names in the origin Module membership dataframe at the start of this script
Pgen_loop    <- Pgen_module %>% dplyr::filter(Go.terms %in% table$GOlist) # filter Gene IDs with the GO term
Pgen_geneIDs <- Pgen_loop[-2] # ommit the GO.terms to call unique gene calls
Pgen_geneIDs <- unique(Pgen_geneIDs) # call unique Gene calls (unique genes that had the GO term within each of the GOslim bins)
MFslim$Gene.Count[m] <- nrow(Pgen_geneIDs)  # count of unique GeneIDs in each GOslim bin
MFslim$Gene.IDs[[m]] <- vapply((Pgen_geneIDs$gene.ID), paste, collapse = ";", character(1L))
} # end m in 1:nrow
MFslim_A <- data.frame(Term = rep.int(MFslim$Term, sapply(MFsplitted, length)), go_term = unlist(MFsplitted)) #list all
MFslim_B <- merge(MFslim_A, MFslim, by="Term") #Add back counts, term, and category info
MFslim_C <- unique(setDT(MFslim_B)[order(go_term, -Gene.Count)], by = "category") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
MFslim_final <- data.frame(slim_term=MFslim_C$Term, slim_cat=MFslim_C$category, category=MFslim_C$go_term, Gene.Count=MFslim_C$Gene.Count, GO.Count=MFslim_C$Count) #rename columns) #rename columns
# save GOslim final datasets for BP and MF of each  module in their respective folder(s) by Day
write.csv(MFslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/", GOslimLoop_vars[i,2], "/GOslim_MolFunction_",GOslimLoop_vars[i,1], "_Module.csv", sep ='')) # save csv file
write.csv(BPslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/", GOslimLoop_vars[i,2], "/GOslim_BiolProc_",GOslimLoop_vars[i,1], "Module.csv", sep ='')) # save csv file
} # end of GOslim for loop! (i in 1:nrow)
for (i in 1:nrow(GOslimLoop_vars)) {
# call the target dataset
goseq_res       <- Master_goseq_results %>%  dplyr::filter(Day %in% GOslimLoop_vars[i,2], moduleColor %in% GOslimLoop_vars[i,1])
WGCNA_res       <- WGCNA_MasterModData  %>%  dplyr::filter(Day %in% GOslimLoop_vars[i,2], moduleColor %in% GOslimLoop_vars[i,1])
gene_names      <- WGCNA_res$geneSymbol # all gene IDs in the particular WGCNA module
# Biological Function - run GOslim
goseq_res_BP        <- goseq_res %>%  filter(ontology=="BP") # BP - all GO terms upregulated
BP_GOcollection     <- GOCollection(goseq_res_BP$category)
GOslims_BP          <- data.frame(goSlim(BP_GOcollection, slim, "BP")) #Find common parent terms to slim down our list
GOslims_BP$category <- row.names(GOslims_BP) #save rownames as category
# Molecular Function - run GOslim
goseq_res_MF        <- goseq_res %>%  filter(ontology=="MF") # BP - all GO terms upregulated
MF_GOcollection     <- GOCollection(goseq_res_MF$category)
GOslims_MF          <- data.frame(goSlim(MF_GOcollection, slim, "MF")) #Find common parent terms to slim down our list
GOslims_MF$category <- row.names(GOslims_MF) #save rownames as category
# ====================================================================================
# Get mapped terms - add to the GOslims datatable
# from Sam White's Biostars [post](https://support.bioconductor.org/p/128407/#128409).
# ====================================================================================
# Write function mappedIds to get the query terms that mapped to the slim categories
# ...in other words, add a column to your slim dataframe with all the GO terms from goseq
mappedIds <-  function(df, collection, OFFSPRING) {  #the command to run requires a dataframe of slim terms, like slims_MF above, your list of query terms, and the offspring from the GOCollection by goSlim
map <- as.list(OFFSPRING[rownames(df)]) # Subset GOcollection offspring by the rownames of your dataframe
mapped <- lapply(map, intersect, ids(collection)) #Find the terms that intersect between the subset made above of your query terms and the GOids from the GO collection
df[["go_terms"]] <- vapply(unname(mapped), paste, collapse = ";", character(1L)) #Add column "go_terms" with matching terms
df #show resulting dataframe
}
BPslim_Mapped <- mappedIds(GOslims_BP, BP_GOcollection, GOBPOFFSPRING)
MFslim_Mapped <- mappedIds(GOslims_MF, MF_GOcollection, GOMFOFFSPRING)
# BIOLOGICAL PROCESS
BPslim             <- filter(BPslim_Mapped, Count>5 & Term!="biological_process") #filter out empty slims and term "biological process"
BPsplitted         <- strsplit(as.character(BPslim$go_terms), ";") #split into multiple GO ids
BPslim$BPsplitted  <- BPsplitted
for (n in 1:nrow(BPslim)) {
table       <- data.frame(GOlist = unlist(BPslim[n,6])) # call the BPsplitted column of characters and create a small table to filter
table       <- unique(table)
Pgen_module  <- Pgen_GOterms2 %>% dplyr::filter(gene.ID %in% gene_names) # d7_Mod.Brown$X calls the gene names in the origin Module membership dataframe at the start of this script
Pgen_loop    <- Pgen_module %>% dplyr::filter(Go.terms %in% table$GOlist) # filter Gene IDs with the GO term
Pgen_geneIDs <- Pgen_loop[-2] # ommit the GO.terms to call unique gene calls
Pgen_geneIDs <- unique(Pgen_geneIDs) # call unique Gene calls (unique genes that had the GO term within each of the GOslim bins)
BPslim$Gene.Count[n] <- nrow(Pgen_geneIDs)  # count of unique GeneIDs in each GOslim bin
BPslim$Gene.IDs[[n]] <- vapply((Pgen_geneIDs$gene.ID), paste, collapse = ";", character(1L))
} # end n in 1:nrow
BPslim_A <- data.frame(Term = rep.int(BPslim$Term, sapply(BPsplitted, length)), go_term = unlist(BPsplitted)) #list all
BPslim_B <- merge(BPslim_A, BPslim, by="Term") #Add back counts, term, and category info
BPslim_C <- unique(setDT(BPslim_B)[order(go_term, -Gene.Count)], by = "category") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
BPslim_final <- data.frame(slim_term=BPslim_C$Term, slim_cat=BPslim_C$category, category=BPslim_C$go_term, Gene.Count=BPslim_C$Gene.Count, GO.Count=BPslim_C$Count) #rename columns) #rename columns
# MOLECULAR FUNCTION
MFslim             <- filter(MFslim_Mapped, Count>2 & Term!="molecular_function") #filter out empty slims and term "biological process"
MFsplitted         <- strsplit(as.character(MFslim$go_terms), ";") #split into multiple GO ids
MFslim$MFsplitted  <- MFsplitted
for (m in 1:nrow(MFslim)) {
table       <- data.frame(GOlist = unlist(MFslim[m,6])) # call the MFsplitted column of characters and create a small table to filter
table       <- unique(table)
Pgen_module  <- Pgen_GOterms2 %>% dplyr::filter(gene.ID %in% gene_names) # d7_Mod.Brown$X calls the gene names in the origin Module membership dataframe at the start of this script
Pgen_loop    <- Pgen_module %>% dplyr::filter(Go.terms %in% table$GOlist) # filter Gene IDs with the GO term
Pgen_geneIDs <- Pgen_loop[-2] # ommit the GO.terms to call unique gene calls
Pgen_geneIDs <- unique(Pgen_geneIDs) # call unique Gene calls (unique genes that had the GO term within each of the GOslim bins)
MFslim$Gene.Count[m] <- nrow(Pgen_geneIDs)  # count of unique GeneIDs in each GOslim bin
MFslim$Gene.IDs[[m]] <- vapply((Pgen_geneIDs$gene.ID), paste, collapse = ";", character(1L))
} # end m in 1:nrow
MFslim_A <- data.frame(Term = rep.int(MFslim$Term, sapply(MFsplitted, length)), go_term = unlist(MFsplitted)) #list all
MFslim_B <- merge(MFslim_A, MFslim, by="Term") #Add back counts, term, and category info
MFslim_C <- unique(setDT(MFslim_B)[order(go_term, -Gene.Count)], by = "category") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
MFslim_final <- data.frame(slim_term=MFslim_C$Term, slim_cat=MFslim_C$category, category=MFslim_C$go_term, Gene.Count=MFslim_C$Gene.Count, GO.Count=MFslim_C$Count) #rename columns) #rename columns
# save GOslim final datasets for BP and MF of each  module in their respective folder(s) by Day
write.csv(MFslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/", GOslimLoop_vars[i,2], "/GOslim_MolFunction_",GOslimLoop_vars[i,1], "_Module.csv", sep ='')) # save csv file
write.csv(BPslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/", GOslimLoop_vars[i,2], "/GOslim_BiolProc_",GOslimLoop_vars[i,1], "Module.csv", sep ='')) # save csv file
} # end of GOslim for loop! (i in 1:nrow)
# Day 7 sig WGCNA modules: brown, yellow, green
d7_Mod.Brown <- d7_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% 'brown') # %>%  dplyr::select("geneSymbol")
d7_slimBP_brownModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_BiolProc_brownModule.csv")
d7_slimBP_greenModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_BiolProc_greenModule.csv")
d7_slimBP_yellowModule  <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_BiolProc_yellowModule.csv")
d14_slimBP_blackModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_BiolProc_blackModule.csv")
d14_slimBP_brownModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_BiolProc_brownModule.csv")
d14_slimBP_magentaModule <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_BiolProc_magentaModule.csv")
d14_slimBP_pinkModule    <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_BiolProc_pinkModule.csv")
d21_slimBP_blackModule    <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_BiolProc_blackModule.csv")
d21_slimBP_blueModule     <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_BiolProc_blueModule.csv")
d21_slimBP_magentaModule  <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_BiolProc_magentaModule.csv")
d21_slimBP_pinkModule     <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_BiolProc_pinkModule.csv")
d21_slimBP_redModule      <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_BiolProc_redModule.csv")
d21_slimBP_yellowModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_BiolProc_yellowModule.csv")
# MOLECULAR FUNCTION GO  SLIMS
d7_slimMF_brownModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_MolFunction_brownModule.csv")
d7_slimMF_greenModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_MolFunction_greenModule.csv")
d7_slimMF_yellowModule  <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_MolFunction_yellowModule.csv")
d14_slimMF_blackModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_MolFunction_blackModule.csv")
d14_slimMF_brownModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_MolFunction_brownModule.csv")
d14_slimMF_magentaModule <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_MolFunction_magentaModule.csv")
d14_slimMF_pinkModule    <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_MolFunction_pinkModule.csv")
d21_slimMF_blackModule    <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_MolFunction_blackModule.csv")
d21_slimMF_blueModule     <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_MolFunction_blueModule.csv")
d21_slimMF_magentaModule  <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_MolFunction_magentaModule.csv")
d21_slimMF_pinkModule     <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_MolFunction_pinkModule.csv")
d21_slimMF_redModule      <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_MolFunction_redModule.csv")
d21_slimMF_yellowModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_MolFunction_yellowModule.csv")
# MOLECULAR FUNCTION GO  SLIMS
d7_slimMF_brownModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_MolFunction_brownModule.csv")
for (i in 1:nrow(GOslimLoop_vars)) {
# call the target dataset
goseq_res       <- Master_goseq_results %>%  dplyr::filter(Day %in% GOslimLoop_vars[i,2], moduleColor %in% GOslimLoop_vars[i,1])
WGCNA_res       <- WGCNA_MasterModData  %>%  dplyr::filter(Day %in% GOslimLoop_vars[i,2], moduleColor %in% GOslimLoop_vars[i,1])
gene_names      <- WGCNA_res$geneSymbol # all gene IDs in the particular WGCNA module
# Biological Function - run GOslim
goseq_res_BP        <- goseq_res %>%  filter(ontology=="BP") # BP - all GO terms upregulated
BP_GOcollection     <- GOCollection(goseq_res_BP$category)
GOslims_BP          <- data.frame(goSlim(BP_GOcollection, slim, "BP")) #Find common parent terms to slim down our list
GOslims_BP$category <- row.names(GOslims_BP) #save rownames as category
# Molecular Function - run GOslim
goseq_res_MF        <- goseq_res %>%  filter(ontology=="MF") # BP - all GO terms upregulated
MF_GOcollection     <- GOCollection(goseq_res_MF$category)
GOslims_MF          <- data.frame(goSlim(MF_GOcollection, slim, "MF")) #Find common parent terms to slim down our list
GOslims_MF$category <- row.names(GOslims_MF) #save rownames as category
# ====================================================================================
# Get mapped terms - add to the GOslims datatable
# from Sam White's Biostars [post](https://support.bioconductor.org/p/128407/#128409).
# ====================================================================================
# Write function mappedIds to get the query terms that mapped to the slim categories
# ...in other words, add a column to your slim dataframe with all the GO terms from goseq
mappedIds <-  function(df, collection, OFFSPRING) {  #the command to run requires a dataframe of slim terms, like slims_MF above, your list of query terms, and the offspring from the GOCollection by goSlim
map <- as.list(OFFSPRING[rownames(df)]) # Subset GOcollection offspring by the rownames of your dataframe
mapped <- lapply(map, intersect, ids(collection)) #Find the terms that intersect between the subset made above of your query terms and the GOids from the GO collection
df[["go_terms"]] <- vapply(unname(mapped), paste, collapse = ";", character(1L)) #Add column "go_terms" with matching terms
df #show resulting dataframe
}
BPslim_Mapped <- mappedIds(GOslims_BP, BP_GOcollection, GOBPOFFSPRING)
MFslim_Mapped <- mappedIds(GOslims_MF, MF_GOcollection, GOMFOFFSPRING)
# BIOLOGICAL PROCESS
BPslim             <- filter(BPslim_Mapped, Count>5 & Term!="biological_process") #filter out empty slims and term "biological process"
BPsplitted         <- strsplit(as.character(BPslim$go_terms), ";") #split into multiple GO ids
BPslim$BPsplitted  <- BPsplitted
for (n in 1:nrow(BPslim)) {
table       <- data.frame(GOlist = unlist(BPslim[n,6])) # call the BPsplitted column of characters and create a small table to filter
table       <- unique(table)
Pgen_module  <- Pgen_GOterms2 %>% dplyr::filter(gene.ID %in% gene_names) # d7_Mod.Brown$X calls the gene names in the origin Module membership dataframe at the start of this script
Pgen_loop    <- Pgen_module %>% dplyr::filter(Go.terms %in% table$GOlist) # filter Gene IDs with the GO term
Pgen_geneIDs <- Pgen_loop[-2] # ommit the GO.terms to call unique gene calls
Pgen_geneIDs <- unique(Pgen_geneIDs) # call unique Gene calls (unique genes that had the GO term within each of the GOslim bins)
BPslim$Gene.Count[n] <- nrow(Pgen_geneIDs)  # count of unique GeneIDs in each GOslim bin
BPslim$Gene.IDs[[n]] <- vapply((Pgen_geneIDs$gene.ID), paste, collapse = ";", character(1L))
} # end n in 1:nrow
BPslim_A <- data.frame(Term = rep.int(BPslim$Term, sapply(BPsplitted, length)), go_term = unlist(BPsplitted)) #list all
BPslim_B <- merge(BPslim_A, BPslim, by="Term") #Add back counts, term, and category info
BPslim_C <- unique(setDT(BPslim_B)[order(go_term, -Gene.Count)], by = "category") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
BPslim_final <- data.frame(slim_term=BPslim_C$Term, slim_cat=BPslim_C$category, category=BPslim_C$go_term, Gene.Count=BPslim_C$Gene.Count, GO.Count=BPslim_C$Count) #rename columns) #rename columns
# MOLECULAR FUNCTION
MFslim             <- filter(MFslim_Mapped, Count>2 & Term!="molecular_function") #filter out empty slims and term "biological process"
MFsplitted         <- strsplit(as.character(MFslim$go_terms), ";") #split into multiple GO ids
MFslim$MFsplitted  <- MFsplitted
for (m in 1:nrow(MFslim)) {
table       <- data.frame(GOlist = unlist(MFslim[m,6])) # call the MFsplitted column of characters and create a small table to filter
table       <- unique(table)
Pgen_module  <- Pgen_GOterms2 %>% dplyr::filter(gene.ID %in% gene_names) # d7_Mod.Brown$X calls the gene names in the origin Module membership dataframe at the start of this script
Pgen_loop    <- Pgen_module %>% dplyr::filter(Go.terms %in% table$GOlist) # filter Gene IDs with the GO term
Pgen_geneIDs <- Pgen_loop[-2] # ommit the GO.terms to call unique gene calls
Pgen_geneIDs <- unique(Pgen_geneIDs) # call unique Gene calls (unique genes that had the GO term within each of the GOslim bins)
MFslim$Gene.Count[m] <- nrow(Pgen_geneIDs)  # count of unique GeneIDs in each GOslim bin
MFslim$Gene.IDs[[m]] <- vapply((Pgen_geneIDs$gene.ID), paste, collapse = ";", character(1L))
} # end m in 1:nrow
MFslim_A <- data.frame(Term = rep.int(MFslim$Term, sapply(MFsplitted, length)), go_term = unlist(MFsplitted)) #list all
MFslim_B <- merge(MFslim_A, MFslim, by="Term") #Add back counts, term, and category info
MFslim_C <- unique(setDT(MFslim_B)[order(go_term, -Gene.Count)], by = "category") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
MFslim_final <- data.frame(slim_term=MFslim_C$Term, slim_cat=MFslim_C$category, category=MFslim_C$go_term, Gene.Count=MFslim_C$Gene.Count, GO.Count=MFslim_C$Count) #rename columns) #rename columns
# save GOslim final datasets for BP and MF of each  module in their respective folder(s) by Day
write.csv(MFslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/", GOslimLoop_vars[i,2], "/GOslim_MolFunction_",GOslimLoop_vars[i,1], "Module.csv", sep ='')) # save csv file
write.csv(BPslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/", GOslimLoop_vars[i,2], "/GOslim_BiolProc_",GOslimLoop_vars[i,1], "Module.csv", sep ='')) # save csv file
} # end of GOslim for loop! (i in 1:nrow)
# MOLECULAR FUNCTION GO  SLIMS
d7_slimMF_brownModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_MolFunction_brownModule.csv")
d7_slimMF_greenModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_MolFunction_greenModule.csv")
d7_slimMF_yellowModule  <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_MolFunction_yellowModule.csv")
d14_slimMF_blackModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_MolFunction_blackModule.csv")
d14_slimMF_brownModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_MolFunction_brownModule.csv")
d14_slimMF_magentaModule <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_MolFunction_magentaModule.csv")
d14_slimMF_pinkModule    <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_MolFunction_pinkModule.csv")
d21_slimMF_blackModule    <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_MolFunction_blackModule.csv")
d21_slimMF_blueModule     <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_MolFunction_blueModule.csv")
d21_slimMF_magentaModule  <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_MolFunction_magentaModule.csv")
d21_slimMF_pinkModule     <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_MolFunction_pinkModule.csv")
d21_slimMF_redModule      <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_MolFunction_redModule.csv")
d21_slimMF_yellowModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_MolFunction_yellowModule.csv")
d21_slimMF_yellowModule
MFslim_final
paste(GOslimLoop_vars[i,2], GOslimLoop_vars[i,1], sep = '')
paste(GOslimLoop_vars[i,2], GOslimLoop_vars[i,1], sep = '_')
for (i in 1:nrow(GOslimLoop_vars)) {
# call the target dataset
goseq_res       <- Master_goseq_results %>%  dplyr::filter(Day %in% GOslimLoop_vars[i,2], moduleColor %in% GOslimLoop_vars[i,1])
WGCNA_res       <- WGCNA_MasterModData  %>%  dplyr::filter(Day %in% GOslimLoop_vars[i,2], moduleColor %in% GOslimLoop_vars[i,1])
gene_names      <- WGCNA_res$geneSymbol # all gene IDs in the particular WGCNA module
# Biological Function - run GOslim
goseq_res_BP        <- goseq_res %>%  filter(ontology=="BP") # BP - all GO terms upregulated
BP_GOcollection     <- GOCollection(goseq_res_BP$category)
GOslims_BP          <- data.frame(goSlim(BP_GOcollection, slim, "BP")) #Find common parent terms to slim down our list
GOslims_BP$category <- row.names(GOslims_BP) #save rownames as category
# Molecular Function - run GOslim
goseq_res_MF        <- goseq_res %>%  filter(ontology=="MF") # BP - all GO terms upregulated
MF_GOcollection     <- GOCollection(goseq_res_MF$category)
GOslims_MF          <- data.frame(goSlim(MF_GOcollection, slim, "MF")) #Find common parent terms to slim down our list
GOslims_MF$category <- row.names(GOslims_MF) #save rownames as category
# ====================================================================================
# Get mapped terms - add to the GOslims datatable
# from Sam White's Biostars [post](https://support.bioconductor.org/p/128407/#128409).
# ====================================================================================
# Write function mappedIds to get the query terms that mapped to the slim categories
# ...in other words, add a column to your slim dataframe with all the GO terms from goseq
mappedIds <-  function(df, collection, OFFSPRING) {  #the command to run requires a dataframe of slim terms, like slims_MF above, your list of query terms, and the offspring from the GOCollection by goSlim
map <- as.list(OFFSPRING[rownames(df)]) # Subset GOcollection offspring by the rownames of your dataframe
mapped <- lapply(map, intersect, ids(collection)) #Find the terms that intersect between the subset made above of your query terms and the GOids from the GO collection
df[["go_terms"]] <- vapply(unname(mapped), paste, collapse = ";", character(1L)) #Add column "go_terms" with matching terms
df #show resulting dataframe
}
BPslim_Mapped <- mappedIds(GOslims_BP, BP_GOcollection, GOBPOFFSPRING)
MFslim_Mapped <- mappedIds(GOslims_MF, MF_GOcollection, GOMFOFFSPRING)
# BIOLOGICAL PROCESS
BPslim             <- filter(BPslim_Mapped, Count>5 & Term!="biological_process") #filter out empty slims and term "biological process"
BPsplitted         <- strsplit(as.character(BPslim$go_terms), ";") #split into multiple GO ids
BPslim$BPsplitted  <- BPsplitted
for (n in 1:nrow(BPslim)) {
table       <- data.frame(GOlist = unlist(BPslim[n,6])) # call the BPsplitted column of characters and create a small table to filter
table       <- unique(table)
Pgen_module  <- Pgen_GOterms2 %>% dplyr::filter(gene.ID %in% gene_names) # d7_Mod.Brown$X calls the gene names in the origin Module membership dataframe at the start of this script
Pgen_loop    <- Pgen_module %>% dplyr::filter(Go.terms %in% table$GOlist) # filter Gene IDs with the GO term
Pgen_geneIDs <- Pgen_loop[-2] # ommit the GO.terms to call unique gene calls
Pgen_geneIDs <- unique(Pgen_geneIDs) # call unique Gene calls (unique genes that had the GO term within each of the GOslim bins)
BPslim$Gene.Count[n] <- nrow(Pgen_geneIDs)  # count of unique GeneIDs in each GOslim bin
BPslim$Gene.IDs[[n]] <- vapply((Pgen_geneIDs$gene.ID), paste, collapse = ";", character(1L))
} # end n in 1:nrow
BPslim_A <- data.frame(Term = rep.int(BPslim$Term, sapply(BPsplitted, length)), go_term = unlist(BPsplitted)) #list all
BPslim_B <- merge(BPslim_A, BPslim, by="Term") #Add back counts, term, and category info
BPslim_C <- unique(setDT(BPslim_B)[order(go_term, -Gene.Count)], by = "category") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
BPslim_final <- data.frame(slim_term=BPslim_C$Term, slim_cat=BPslim_C$category, category=BPslim_C$go_term, Gene.Count=BPslim_C$Gene.Count, GO.Count=BPslim_C$Count) #rename columns) #rename columns
BPslim_final$module_day <- paste(GOslimLoop_vars[i,2], GOslimLoop_vars[i,1], sep = '_')
# MOLECULAR FUNCTION
MFslim             <- filter(MFslim_Mapped, Count>2 & Term!="molecular_function") #filter out empty slims and term "biological process"
MFsplitted         <- strsplit(as.character(MFslim$go_terms), ";") #split into multiple GO ids
MFslim$MFsplitted  <- MFsplitted
for (m in 1:nrow(MFslim)) {
table       <- data.frame(GOlist = unlist(MFslim[m,6])) # call the MFsplitted column of characters and create a small table to filter
table       <- unique(table)
Pgen_module  <- Pgen_GOterms2 %>% dplyr::filter(gene.ID %in% gene_names) # d7_Mod.Brown$X calls the gene names in the origin Module membership dataframe at the start of this script
Pgen_loop    <- Pgen_module %>% dplyr::filter(Go.terms %in% table$GOlist) # filter Gene IDs with the GO term
Pgen_geneIDs <- Pgen_loop[-2] # ommit the GO.terms to call unique gene calls
Pgen_geneIDs <- unique(Pgen_geneIDs) # call unique Gene calls (unique genes that had the GO term within each of the GOslim bins)
MFslim$Gene.Count[m] <- nrow(Pgen_geneIDs)  # count of unique GeneIDs in each GOslim bin
MFslim$Gene.IDs[[m]] <- vapply((Pgen_geneIDs$gene.ID), paste, collapse = ";", character(1L))
} # end m in 1:nrow
MFslim_A <- data.frame(Term = rep.int(MFslim$Term, sapply(MFsplitted, length)), go_term = unlist(MFsplitted)) #list all
MFslim_B <- merge(MFslim_A, MFslim, by="Term") #Add back counts, term, and category info
MFslim_C <- unique(setDT(MFslim_B)[order(go_term, -Gene.Count)], by = "category") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
MFslim_final <- data.frame(slim_term=MFslim_C$Term, slim_cat=MFslim_C$category, category=MFslim_C$go_term, Gene.Count=MFslim_C$Gene.Count, GO.Count=MFslim_C$Count) #rename columns) #rename columns
MFslim_final$module_day <- paste(GOslimLoop_vars[i,2], GOslimLoop_vars[i,1], sep = '_')
# save GOslim final datasets for BP and MF of each  module in their respective folder(s) by Day
write.csv(MFslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/", GOslimLoop_vars[i,2], "/GOslim_MolFunction_",GOslimLoop_vars[i,1], "Module.csv", sep ='')) # save csv file
write.csv(BPslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/", GOslimLoop_vars[i,2], "/GOslim_BiolProc_",GOslimLoop_vars[i,1], "Module.csv", sep ='')) # save csv file
} # end of GOslim for loop! (i in 1:nrow)
MF_D7
BP_D7  <- rbind(d7_slimBP_brownModule, d7_slimBP_greenModule, d7_slimBP_yellowModule)
BP_D14 <- rbind(d14_slimBP_blackModule, d14_slimBP_brownModule, d14_slimBP_magentaModule, d14_slimBP_pinkModule)
BP_D21 <- rbind(d21_slimBP_blackModule, d21_slimBP_blueModule, d21_slimBP_magentaModule, d21_slimBP_pinkModule, d21_slimBP_redModule, d21_slimBP_yellowModule)
MF_D7  <- rbind(d7_slimMF_brownModule, d7_slimMF_greenModule, d7_slimMF_yellowModule)
MF_D14 <- rbind(d14_slimMF_blackModule, d14_slimMF_brownModule, d14_slimMF_magentaModule, d14_slimMF_pinkModule)
MF_D21 <- rbind(d21_slimMF_blackModule, d21_slimMF_blueModule, d21_slimMF_magentaModule, d21_slimMF_pinkModule, d21_slimMF_redModule, d21_slimMF_yellowModule)
MF_D7  <- rbind(d7_slimMF_brownModule, d7_slimMF_greenModule, d7_slimMF_yellowModule)
MF_D7
d7_slimBP_brownModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_BiolProc_brownModule.csv")
d7_slimBP_greenModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_BiolProc_greenModule.csv")
d7_slimBP_yellowModule  <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_BiolProc_yellowModule.csv")
d14_slimBP_blackModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_BiolProc_blackModule.csv")
d14_slimBP_brownModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_BiolProc_brownModule.csv")
d14_slimBP_magentaModule <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_BiolProc_magentaModule.csv")
d14_slimBP_pinkModule    <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_BiolProc_pinkModule.csv")
d21_slimBP_blackModule    <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_BiolProc_blackModule.csv")
d21_slimBP_blueModule     <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_BiolProc_blueModule.csv")
d21_slimBP_magentaModule  <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_BiolProc_magentaModule.csv")
d21_slimBP_pinkModule     <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_BiolProc_pinkModule.csv")
d21_slimBP_redModule      <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_BiolProc_redModule.csv")
d21_slimBP_yellowModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_BiolProc_yellowModule.csv")
# MOLECULAR FUNCTION GO  SLIMS
d7_slimMF_brownModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_MolFunction_brownModule.csv")
d7_slimMF_greenModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_MolFunction_greenModule.csv")
d7_slimMF_yellowModule  <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_MolFunction_yellowModule.csv")
d14_slimMF_blackModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_MolFunction_blackModule.csv")
d14_slimMF_brownModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_MolFunction_brownModule.csv")
d14_slimMF_magentaModule <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_MolFunction_magentaModule.csv")
d14_slimMF_pinkModule    <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOslim_MolFunction_pinkModule.csv")
d21_slimMF_blackModule    <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_MolFunction_blackModule.csv")
d21_slimMF_blueModule     <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_MolFunction_blueModule.csv")
d21_slimMF_magentaModule  <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_MolFunction_magentaModule.csv")
d21_slimMF_pinkModule     <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_MolFunction_pinkModule.csv")
d21_slimMF_redModule      <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOslim_MolFunction_redModule.csv")
d21_slimMF_yellowModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day7/GOslim_MolFunction_yellowModule.csv")
BP_D7  <- rbind(d7_slimBP_brownModule, d7_slimBP_greenModule, d7_slimBP_yellowModule)
BP_D14 <- rbind(d14_slimBP_blackModule, d14_slimBP_brownModule, d14_slimBP_magentaModule, d14_slimBP_pinkModule)
BP_D21 <- rbind(d21_slimBP_blackModule, d21_slimBP_blueModule, d21_slimBP_magentaModule, d21_slimBP_pinkModule, d21_slimBP_redModule, d21_slimBP_yellowModule)
MF_D7  <- rbind(d7_slimMF_brownModule, d7_slimMF_greenModule, d7_slimMF_yellowModule)
MF_D14 <- rbind(d14_slimMF_blackModule, d14_slimMF_brownModule, d14_slimMF_magentaModule, d14_slimMF_pinkModule)
MF_D21 <- rbind(d21_slimMF_blackModule, d21_slimMF_blueModule, d21_slimMF_magentaModule, d21_slimMF_pinkModule, d21_slimMF_redModule, d21_slimMF_yellowModule)
MF_D7
# PLOTTING --------------------------------------------------------------------------------------------------- #
# (1) By sampling date 0 Day 7 14 and 21 separately
BP_D7$Ont <- "BP" # create a new common clumn to call in the plot
BP_D7$Ontolgy <- factor(BP_D7$Ontolgy, levels = c("Day7_brown", "Day7_yellow", "Day7_green"))# reorder the facotr level for the facet wrap plot
BP_D7$Ontolgy <- factor(BP_D7$module_day, levels = c("Day7_brown", "Day7_yellow", "Day7_green"))# reorder the facotr level for the facet wrap plot
BP_D7
BP_D7_filtered <- BP_D7 %>%  dplyr::filter(Gene.Count > 1) # ommit all with gene counts <1
BP_D7_filtered$slim_term <- factor(BP_D7_filtered$slim_term ,levels=rev(unique(BP_D7_filtered$slim_term))) # make slim term alphabetical for plotting
BP_D7_Plot <-ggplot(data = BP_D7_filtered, aes(x = Ont, y = slim_term)) +
geom_tile(aes(fill=Gene.Count, width = 1)) +
scale_fill_gradient(low = "thistle1", high = "steelblue4") +
facet_grid(~module_day, labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 11, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=15),
axis.text = element_text(size = 12), legend.position = "right",
plot.margin = unit(c(0,1,0,0.25), "cm"))+
ggtitle('GOslim Biological Process: WGCNA Day 7')
BP_D7_Plot
MF_D7$Ont <- "MF" # create a new common clumn to call in the plot
MF_D7$Ontolgy <- factor(MF_D7$module_day, levels = c("Day7_brown", "Day7_yellow", "Day7_green"))# reorder the facotr level for the facet wrap plot
MF_D7_filtered <- MF_D7 %>%  dplyr::filter(Gene.Count > 1) # ommit all with gene counts <1
MF_D7_filtered$slim_term <- factor(MF_D7_filtered$slim_term ,levels=rev(unique(MF_D7_filtered$slim_term))) # make slim term alphabetical for plotting
MF_D7_Plot <-ggplot(data = MF_D7_filtered, aes(x = Ont, y = slim_term)) +
geom_tile(aes(fill=Gene.Count, width = 1)) +
scale_fill_gradient(low = "thistle1", high = "tomato4") +
facet_grid(~module_day, labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 11, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=15),
axis.text = element_text(size = 12), legend.position = "right",
plot.margin = unit(c(0,1,0,0.25), "cm"))+
ggtitle('GOslim Molecular Function: WGCNA Day 7')
MF_D7_Plot
BP_D14$Ont <- "BP" # create a new common clumn to call in the plot
BP_D14$Ontolgy <- factor(BP_D14$module_day, levels = c("Day14_black", "Day14_brown", "Day14_magenta", "Day14_pink"))# reorder the facotr level for the facet wrap plot
BP_D14
BP_D14_filtered <- BP_D14 %>%  dplyr::filter(Gene.Count > 1) # ommit all with gene counts <1
BP_D14_filtered$slim_term <- factor(BP_D14_filtered$slim_term ,levels=rev(unique(BP_D14_filtered$slim_term))) # make slim term alphabetical for plotting
BP_D14_Plot <-ggplot(data = BP_D14_filtered, aes(x = Ont, y = slim_term)) +
geom_tile(aes(fill=Gene.Count, width = 1)) +
scale_fill_gradient(low = "thistle1", high = "steelblue4") +
facet_grid(~module_day, labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 11, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=15),
axis.text = element_text(size = 12), legend.position = "right",
plot.margin = unit(c(0,1,0,0.25), "cm"))+
ggtitle('GOslim Biological Process: WGCNA Day 14')
BP_D14_Plot
MF_D14$Ont <- "MF" # create a new common clumn to call in the plot
MF_D14$Ontolgy <- factor(MF_D14$module_day, levels = c("Day14_brown", "Day14_yellow", "Day14_green"))# reorder the facotr level for the facet wrap plot
MF_D14_filtered <- MF_D14 %>%  dplyr::filter(Gene.Count > 1) # ommit all with gene counts <1
MF_D14_filtered$slim_term <- factor(MF_D14_filtered$slim_term ,levels=rev(unique(MF_D14_filtered$slim_term))) # make slim term alphabetical for plotting
MF_D14_Plot <-ggplot(data = MF_D14_filtered, aes(x = Ont, y = slim_term)) +
geom_tile(aes(fill=Gene.Count, width = 1)) +
scale_fill_gradient(low = "thistle1", high = "tomato4") +
facet_grid(~module_day, labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 11, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=15),
axis.text = element_text(size = 12), legend.position = "right",
plot.margin = unit(c(0,1,0,0.25), "cm"))+
ggtitle('GOslim Molecular Function: WGCNA Day 14')
MF_D14_Plot
MF_D14$Ont <- "MF" # create a new common clumn to call in the plot
MF_D14$Ontolgy <- factor(MF_D14$module_day, levels = c("Day14_black", "Day14_brown", "Day14_magenta", "Day14_pink"))# reorder the facotr level for the facet wrap plot
MF_D14_filtered <- MF_D14 %>%  dplyr::filter(Gene.Count > 1) # ommit all with gene counts <1
MF_D14_filtered$slim_term <- factor(MF_D14_filtered$slim_term ,levels=rev(unique(MF_D14_filtered$slim_term))) # make slim term alphabetical for plotting
MF_D14_Plot <-ggplot(data = MF_D14_filtered, aes(x = Ont, y = slim_term)) +
geom_tile(aes(fill=Gene.Count, width = 1)) +
scale_fill_gradient(low = "thistle1", high = "tomato4") +
facet_grid(~module_day, labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 11, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=15),
axis.text = element_text(size = 12), legend.position = "right",
plot.margin = unit(c(0,1,0,0.25), "cm"))+
ggtitle('GOslim Molecular Function: WGCNA Day 14')
BP_D21$Ont <- "BP" # create a new common clumn to call in the plot
BP_D21$Ontolgy <- factor(BP_D21$module_day, levels = c("Day21_black", "Day21_blue", "Day21_magenta", "Day21_pink", "Day21_red", "Day21_yellow"))# reorder the facotr level for the facet wrap plot
BP_D21_filtered <- BP_D21 %>%  dplyr::filter(Gene.Count > 1) # ommit all with gene counts <1
BP_D21_filtered$slim_term <- factor(BP_D21_filtered$slim_term ,levels=rev(unique(BP_D21_filtered$slim_term))) # make slim term alphabetical for plotting
BP_D21_Plot <-ggplot(data = BP_D21_filtered, aes(x = Ont, y = slim_term)) +
geom_tile(aes(fill=Gene.Count, width = 1)) +
scale_fill_gradient(low = "thistle1", high = "steelblue4") +
facet_grid(~module_day, labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 11, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=15),
axis.text = element_text(size = 12), legend.position = "right",
plot.margin = unit(c(0,1,0,0.25), "cm"))+
ggtitle('GOslim Biological Process: WGCNA Day 21')
MF_D21$Ont <- "MF" # create a new common clumn to call in the plot
MF_D21$Ontolgy <- factor(MF_D21$module_day, levels = c("Day21_black", "Day21_blue", "Day21_magenta", "Day21_pink", "Day21_red", "Day21_yellow"))# reorder the facotr level for the facet wrap plot
MF_D21_filtered <- MF_D21 %>%  dplyr::filter(Gene.Count > 1) # ommit all with gene counts <1
MF_D21_filtered$slim_term <- factor(MF_D21_filtered$slim_term ,levels=rev(unique(MF_D21_filtered$slim_term))) # make slim term alphabetical for plotting
MF_D21_Plot <-ggplot(data = MF_D21_filtered, aes(x = Ont, y = slim_term)) +
geom_tile(aes(fill=Gene.Count, width = 1)) +
scale_fill_gradient(low = "thistle1", high = "tomato4") +
facet_grid(~module_day, labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 11, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=15),
axis.text = element_text(size = 12), legend.position = "right",
plot.margin = unit(c(0,1,0,0.25), "cm"))+
ggtitle('GOslim Molecular Function: WGCNA Day 21')
BP_D21_Plot
MF_D21_Plot
MF_D14_Plot
BP_D14_Plot
BP_D7_Plot
