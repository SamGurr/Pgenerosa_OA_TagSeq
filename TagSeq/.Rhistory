theme_bw()
p4 <- p + ggtitle(paste("WGCNAmodule:", module_color, "&",(names(phys)[4]), sep =' ')) + theme(legend.position="none")
p <- ggplot(d21_EigenTraitMaster,
aes(x=moduledata, y=phys[,5])) + # linetype= Primary_Treatment, group = Primary_Treatment
scale_fill_manual(values=c("#56B4E9", "#D55E00")) +
geom_smooth(method=lm , color="grey50", alpha = 0.1, se=TRUE, linetype = "dashed", formula = my.formula) + #, linetype = "dashed"
stat_poly_eq(formula = my.formula,
eq.with.lhs = "italic(hat(y))~`=`~",
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)  +
geom_point(aes(colour = factor(Primary_Treatment)), size = 3, shape = 19) +
scale_color_manual(values=c("#56B4E9", "#D55E00")) +
labs(x="Eigengene expression by sample", y = paste(names(phys)[5])) +
theme_bw()
p5 <- p + ggtitle(paste("WGCNAmodule:", module_color, "&",(names(phys)[5]), sep =' ')) + theme(legend.position="none")
p <- ggplot(d21_EigenTraitMaster,
aes(x=moduledata, y=phys[,6])) + # linetype= Primary_Treatment, group = Primary_Treatment
scale_fill_manual(values=c("#56B4E9", "#D55E00")) +
geom_smooth(method=lm , color="grey50", alpha = 0.1, se=TRUE, linetype = "dashed", formula = my.formula) + #, linetype = "dashed"
stat_poly_eq(formula = my.formula,
eq.with.lhs = "italic(hat(y))~`=`~",
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)  +
geom_point(aes(colour = factor(Primary_Treatment)), size = 3, shape = 19) +
scale_color_manual(values=c("#56B4E9", "#D55E00")) +
labs(x="Eigengene expression by sample", y = paste(names(phys)[6])) +
theme_bw()
p6 <- p + ggtitle(paste("WGCNAmodule:", module_color, "&",(names(phys)[6]), sep =' ')) + theme(legend.position="none")
# save plot grid
#png("Analysis/Output/WGCNA/Day21/Day21_PhysOnly_heatmap2.png", 1000, 1000, pointsize=20)
ggarrange(p1, p2, p3, p4, p5, p6, ncol = 2, nrow = 3)
ggsave(paste0("Analysis/Output/WGCNA/Day21/EigengenePlots/Day21_EigengenePlot_", module_color, ".png"))
}
modcolor <- as.data.frame(unique(d21_Annot_ModuleMembership$moduleColor))
names(modcolor)[1] <- "color"
# experiment treatment and total protein data - narrow the columns
exp.phys_data <- Master.Treatment_Phenotype.data %>%
dplyr::filter(Date %in% 20190814)  # filter out Day 21 data only
exp.phys_data
for(i in 1:nrow(modcolor)) {
# vst read count date - narrow the columns - reshape and rename
Mod_geneIDs <- d21_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% modcolor[i,]) %>%  dplyr::select("geneSymbol")
d21_vst_Mod <- d21_vst_data_t %>% dplyr::filter(geneSymbol %in% Mod_geneIDs[,1])
d21_vst_Mod_MELT <- melt(d21_vst_Mod, id=("geneSymbol")) # melt using reshape2
names(d21_vst_Mod_MELT)[(2:3)] <- c('Sample.Name', 'vst_Expression') # change column names
# merge by common row values 'Sample.Name'
merged_Expdata_Mod <- merge(d21_vst_Mod_MELT, exp.phys_data, by ='Sample.Name')
# mean Exp response table
meanEXp_Mod <- merged_Expdata_Mod %>%
select(c('Sample.Name','vst_Expression','Primary_Treatment', 'Second_Treament','Third_Treatment')) %>%
group_by(Sample.Name, Primary_Treatment, Second_Treament, Third_Treatment) %>%
dplyr::summarize(mean.vstExp = mean(vst_Expression),
sd.vsdtExp = sd(vst_Expression),
na.rm=TRUE)
# summarize datasets further by treatment period
# remember:this is a mean of a mean!! First we complete mean vst exp by sample id (compiling all red module genes) - next all sample IDs by the treatment period (below
# I will use these for mean SE plots
# Primary treatment
meanEXp_Summary.Prim_Mod <- meanEXp_Mod %>%
group_by(Primary_Treatment) %>%
dplyr::summarize(mean = mean(mean.vstExp),
sd = sd(mean.vstExp),
n = n(),
se = sd/sqrt(n))
# Second treatment
meanEXp_Summary.Sec_Mod <- meanEXp_Mod %>%
group_by(Second_Treament,Primary_Treatment) %>%
dplyr::summarize(mean = mean(mean.vstExp),
sd = sd(mean.vstExp),
n = n(),
se = sd/sqrt(n))
# Third treatment
meanEXp_Summary.Third_Mod  <- meanEXp_Mod %>%
group_by(Third_Treatment,Second_Treament,Primary_Treatment) %>%
dplyr::summarize(mean = mean(mean.vstExp),
sd = sd(mean.vstExp),
n = n(),
se = sd/sqrt(n))
# PLOT
# The errorbars overlapped, so use position_dodge to move them horizontally
pd <- position_dodge(0.3) # move them .05 to the left and right
# Primary treatment mean sd plot
min_p1 <- min(meanEXp_Summary.Prim_Mod$mean) - max(meanEXp_Summary.Third_Mod$se)
max_p1 <- max(meanEXp_Summary.Prim_Mod$mean) + max(meanEXp_Summary.Third_Mod$se)
Primary.vst.Mod <- ggplot(meanEXp_Summary.Prim_Mod, aes(x=Primary_Treatment, y=mean, fill=Primary_Treatment)) +  # , colour=supp, group=supp))
theme_bw() +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Primary pCO2 treatment") +
ylab(NULL) +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
ggtitle(paste("Day 21 WGCNA", modcolor[i,], "Module VST GeneExp", sep =' ')) +
# expand_limits(y=0) +                                                    # Expand y range
scale_y_continuous(limits=c((min_p1), (max_p1))) +
theme(text = element_text(size=15))
# Second treatment mean sd plot
min_p2 <- min(meanEXp_Summary.Sec_Mod$mean) - max(meanEXp_Summary.Third_Mod$se)
max_p2 <- max(meanEXp_Summary.Sec_Mod$mean) + max(meanEXp_Summary.Third_Mod$se)
Sec.vst.Mod <- ggplot(meanEXp_Summary.Sec_Mod, aes(x=Second_Treament, y=mean, fill=Primary_Treatment, group=Primary_Treatment)) +
theme_bw() +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Second pCO2 treatment") +
ylab(paste(modcolor[i,]," Module VST Gene Expression (Mean +/- SE)", sep = ' ')) +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
# ggtitle("Day 21 WGCNA red' Module VST GeneExp") +
# expand_limits(y=0) +                                                    # Expand y range
scale_y_continuous(limits=c((min_p2), (max_p2))) +
theme(text = element_text(size=15))
# Third treatment mean sd plot
min_p3 <- min(meanEXp_Summary.Third_Mod$mean) - max(meanEXp_Summary.Third_Mod$se)
max_p3 <- max(meanEXp_Summary.Third_Mod$mean) + max(meanEXp_Summary.Third_Mod$se)
meanEXp_Summary.Third_Mod$Prim.Sec_Treatment <- paste(meanEXp_Summary.Third_Mod$Primary_Treatment, meanEXp_Summary.Third_Mod$Second_Treament, sep='')
Third.vst.Mod <- ggplot(meanEXp_Summary.Third_Mod, aes(x=Third_Treatment, y=mean, fill=Primary_Treatment, group=Prim.Sec_Treatment, shape = Second_Treament)) +
theme_bw() +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position=pd, alpha = 1) +
geom_line(position=pd, colour="black",alpha = 1) +
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
scale_shape_manual(values=c(16, 15, 17)) +
geom_point(aes(colour = factor(Primary_Treatment)),position=pd, size = 4) +
scale_colour_manual(values=c("#56B4E9","#E69F00")) +
xlab("Third pCO2 treatment") +
ylab(NULL) +                 # note the mean was first by sample ID THEN by treatment
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
# ggtitle("Day 21 WGCNA red' Module VST GeneExp") +
scale_y_continuous(limits=c((min_p3), (max_p3))) +
theme(text = element_text(size=15))
#Third.vst.Mod_2 <- Third.vst.Mod + theme(legend.position="none")
# output
png(paste("Analysis/Output/WGCNA/Day21/ModuleExpression_Treatment/Day21_Exp_Module",modcolor[i,],".png"), 600, 1000, pointsize=20)
print(ggarrange(Primary.vst.Mod, Sec.vst.Mod, Third.vst.Mod,
plotlist = NULL,
ncol = 1,
nrow = 3,
labels = NULL))
dev.off()
}
modcolor <- as.data.frame(unique(d21_Annot_ModuleMembership$moduleColor))
names(modcolor)[1] <- "color"
# experiment treatment and total protein data - narrow the columns
exp.phys_data <- Master.Treatment_Phenotype.data %>%
dplyr::filter(Date %in% 20190814)  # filter out Day 21 data only
for(i in 1:nrow(modcolor)) {
module_color <- modcolor[i,] # call the color character
# vst read count date - narrow the columns - reshape and rename
Mod_geneIDs <- d21_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% module_color) %>%  dplyr::select("geneSymbol") # all geneSymbols (IDs) WITHIN the looped module color
d21_vst_Mod <- d21_vst_data_t %>% dplyr::filter(geneSymbol %in% Mod_geneIDs[,1]) # call the transposed vst count data and filer for the module color
d21_vst_Mod_MELT <- melt(d21_vst_Mod, id=("geneSymbol")) # melt using reshape2 - ('un-transpose')
names(d21_vst_Mod_MELT)[(2:3)] <- c('Sample.Name', 'vst_Expression') # change column names to merge next
# merge by common row values 'Sample.Name'
merged_Expdata_Mod <- merge(d21_vst_Mod_MELT, exp.phys_data, by ='Sample.Name') # merge
# mean Exp response table
meanExp_Mod <- merged_Expdata_Mod %>%
group_by(Sample.Name) %>%
dplyr::summarize(n = n(),
mean.vstExp = mean(vst_Expression),
sd.vsdtExp = sd(vst_Expression),
se.vsdtExp = sd.vsdtExp/sqrt(n)) # mean expression for each sample ID
merged_Expdata_phystreat <- merged_Expdata_Mod %>%  # condence down the 'merged_Expdata_Mod' file to merge with 'meanExp_Mod'
dplyr::select(c("Sample.Name", "Primary_Treatment", "Second_Treament", "Third_Treatment", "mean.Âµmol.CRE.g.protein",
"mean.AFDW", "mean.mgProt.mgAFDW", "mean.Resp.ugLhrindiv", "mean.Biovol", "mean.Shell.Length"))
meanExp_Mod.MASTER <- unique(merge(meanExp_Mod, merged_Expdata_phystreat, by = "Sample.Name")) # call only unqiue values
phys <- meanExp_Mod.MASTER[, 9:14]  # call only the phys columns for the subseqent for loop - plotting each
dir.create(paste0("Analysis/Output/WGCNA/Day21/ModuleExpresion_Phenotype/",module_color), showWarnings = FALSE)
for(m in 1:ncol(phys)) {
# phys[,m] # the column
# names(phys)[m] # the name of the column
Primary_plot <- ggplot(meanExp_Mod.MASTER,
aes(x=phys[,m], y=mean.vstExp, fill = Primary_Treatment, colour = Primary_Treatment, group = Primary_Treatment)) + # linetype= Primary_Treatment, group = Primary_Treatment
scale_fill_manual(values=c("#56B4E9", "#D55E00")) +
geom_smooth(method=lm , alpha = 0.1, se=TRUE, linetype = "dashed", formula = my.formula) + #, linetype = "dashed"
stat_poly_eq(formula = my.formula,
eq.with.lhs = "italic(hat(y))~`=`~",
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)  +
geom_point(aes(colour = factor(Primary_Treatment)), size = 3, shape = 19) +
scale_color_manual(values=c("#56B4E9", "#D55E00")) +
labs(x=(names(phys)[m]), y = paste("WGCNA module",module_color,'mean.vstExp', sep = ' ')) +
theme_bw()
PrimSec_facetplot <- ggplot(meanExp_Mod.MASTER,
aes(x=phys[,m], y=mean.vstExp, fill = Primary_Treatment, colour = Primary_Treatment, group = Primary_Treatment)) + # linetype= Primary_Treatment, group = Primary_Treatment
scale_fill_manual(values=c("#56B4E9", "#D55E00")) +
geom_smooth(method=lm , alpha = 0.1, se=TRUE, linetype = "dashed", formula = my.formula) + #, linetype = "dashed"
stat_poly_eq(formula = my.formula,
eq.with.lhs = "italic(hat(y))~`=`~",
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)  +
geom_point(aes(colour = factor(Primary_Treatment)), size = 3, shape = 19) +
scale_color_manual(values=c("#56B4E9", "#D55E00")) +
labs(x=(names(phys)[m]), y = paste("WGCNA module",module_color,'mean.vstExp', sep = ' ')) +
theme_bw()+
facet_wrap(~Second_Treament)
PrimSec_facetplot <- PrimSec_facetplot + ggtitle(paste("WGCNAmodule:", module_color, "&",(names(phys)[m]), sep =' ')) + theme(legend.position="none")
Third_facetplot <- ggplot(meanExp_Mod.MASTER,
aes(x=phys[,m], y=mean.vstExp, shape = Second_Treament, fill = Primary_Treatment, colour = Primary_Treatment, group = Primary_Treatment)) + # linetype= Primary_Treatment, group = Primary_Treatment
scale_fill_manual(values=c("#56B4E9", "#D55E00")) +
geom_smooth(method=lm , alpha = 0.1, se=TRUE, linetype = "dashed", formula = my.formula) + #, linetype = "dashed"
stat_poly_eq(formula = my.formula,
eq.with.lhs = "italic(hat(y))~`=`~",
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)  +
geom_point(aes(colour = factor(Primary_Treatment)), size = 3, shape = 19) +
scale_color_manual(values=c("#56B4E9", "#D55E00")) +
scale_shape_manual(values=c(16,15,17)) +
labs(x=(names(phys)[m]), y = paste("WGCNA module",module_color,'mean.vstExp', sep = ' ')) +
theme_bw()+
facet_wrap(~Third_Treatment)
Third_facetplot <- Third_facetplot + ggtitle(paste("WGCNAmodule:", module_color, "&",(names(phys)[m]), sep =' ')) + theme(legend.position="none")
png(paste("Analysis/Output/WGCNA/Day21/ModuleExpresion_Phenotype/",module_color,"/Day21_Exp_Module_",module_color, "_",(names(phys)[m]),".png", sep = ''), 600, 1000, pointsize=20)
print(ggarrange(Primary_plot, PrimSec_facetplot, Third_facetplot,
plotlist = NULL,
ncol = 1,
nrow = 3,
labels = NULL))
dev.off()
}
}
# Plot the vst transformed by treatment and by Total protein to visualize the effect of the red module genes significant in WGCNA
# vst read count date - narrow the columns - reshape and rename
midnightblue_geneIDs <- d21_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% 'midnightblue') %>%  dplyr::select("geneSymbol")
d21_vst_midnightblueModule <- d21_vst_data_t %>% dplyr::filter(geneSymbol %in% midnightblue_geneIDs[,1])
d21_vst_midnightblueModule_MELT <- melt(d21_vst_midnightblueModule, id=("geneSymbol")) # melt using reshape2
names(d21_vst_midnightblueModule_MELT)[(2:3)] <- c('Sample.Name', 'vst_Expression') # change column names
# merge by common row values 'Sample.Name'
merged_Expdata_midnightblue <- merge(d21_vst_LighCyanModule_MELT, exp.phys_data, by ='Sample.Name')
# merge by common row values 'Sample.Name'
merged_Expdata_midnightblue <- merge(d21_vst_midnightblueModule_MELT, exp.phys_data, by ='Sample.Name')
# mean Exp response table
meanEXp_midnightblue <- merged_Expdata_midnightblue %>%
select(c('Sample.Name','vst_Expression','Primary_Treatment', 'Second_Treament','Third_Treatment')) %>%
group_by(Sample.Name, Primary_Treatment, Second_Treament, Third_Treatment) %>%
dplyr::summarize(mean.vstExp = mean(vst_Expression),
sd.vsdtExp = sd(vst_Expression),
na.rm=TRUE)
# summarize datasets further by treatment period
# remember:this is a mean of a mean!! First we complete mean vst exp by sample id (compiling all red module genes) - next all sample IDs by the treatment period (below
# I will use these for mean SE plots
# Primary treatment
meanEXp_Summary.Prim_midnightblue <- meanEXp_midnightblue %>%
group_by(Primary_Treatment) %>%
dplyr::summarize(mean = mean(mean.vstExp),
sd = sd(mean.vstExp),
n = n(),
se = sd/sqrt(n))
# Second treatment
meanEXp_Summary.Sec_midnightblue <- meanEXp_midnightblue %>%
group_by(Second_Treament,Primary_Treatment) %>%
dplyr::summarize(mean = mean(mean.vstExp),
sd = sd(mean.vstExp),
n = n(),
se = sd/sqrt(n))
# Third treatment
meanEXp_Summary.Third_midnightblue  <- meanEXp_midnightblue %>%
group_by(Third_Treatment,Second_Treament,Primary_Treatment) %>%
dplyr::summarize(mean = mean(mean.vstExp),
sd = sd(mean.vstExp),
n = n(),
se = sd/sqrt(n))
# The errorbars overlapped, so use position_dodge to move them horizontally
pd <- position_dodge(0.3) # move them .05 to the left and right
# Primary treatment mean sd plot
Primary.vst.midnightblue <- ggplot(meanEXp_Summary.Prim_midnightblue, aes(x=Primary_Treatment, y=mean, fill=Primary_Treatment)) +  # , colour=supp, group=supp))
theme_bw() +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Primary pCO2 treatment") +
ylab(NULL) +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
ggtitle("Day 21 WGCNA midnightblue Module VST GeneExp") +
# expand_limits(y=0) +                                                    # Expand y range
scale_y_continuous(limits=c(3.5, 4.5)) +
theme(text = element_text(size=15))
# Second treatment mean sd plot
Sec.vst.midnightblue <- ggplot(meanEXp_Summary.Sec_midnightblue, aes(x=Second_Treament, y=mean, fill=Primary_Treatment, group=Primary_Treatment)) +
theme_bw() +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Second pCO2 treatment") +
ylab("midnightblue Module VST Gene Expression (Mean +/- SE)") +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
# ggtitle("Day 21 WGCNA red' Module VST GeneExp") +
# expand_limits(y=0) +                                                    # Expand y range
scale_y_continuous(limits=c(3.5, 4.5)) +
theme(text = element_text(size=15))
# Third treatment mean sd plot
meanEXp_Summary.Third_midnightblue$Prim.Sec_Treatment <- paste(meanEXp_Summary.Third_midnightblue$Primary_Treatment, meanEXp_Summary.Third_midnightblue$Second_Treament, sep='')
Third.vst.midnightblue <- ggplot(meanEXp_Summary.Third_midnightblue, aes(x=Third_Treatment, y=mean, fill=Primary_Treatment, group=Prim.Sec_Treatment, alpha = Second_Treament)) +
theme_bw() +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position=pd,alpha = 1) +
geom_line(position=pd, colour="black",alpha = 1) +
geom_point(position=pd, size = 4) +
xlab("Third pCO2 treatment") +
ylab(NULL) +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
# ggtitle("Day 21 WGCNA red' Module VST GeneExp") +
scale_y_continuous(limits=c(3.5, 4.5)) +
theme(text = element_text(size=15))
# TAOC by vst expression
meanExp_midnightblue_TAOC <- merged_Expdata_midnightblue %>%
group_by(Sample.Name, Primary_Treatment, Second_Treament, Third_Treatment) %>%
dplyr::summarize(mean.Exp = mean(vst_Expression),
sd.Exp = sd(vst_Expression),
mean.TAOC = mean(mean.Âµmol.CRE.g.protein),
sd.TAOC = sd(mean.Âµmol.CRE.g.protein))
meanExp_midnightblue_TAOC # notice cd total protein is 0 - this is becasue total protein was the same value regarless of the gene.ID within sample
# Total protein and expression plot
TAOC_vst.Exp.midnightblue <- ggplot(meanExp_midnightblue_TAOC, aes(x=mean.TAOC, y=mean.Exp,
color = Primary_Treatment, fill = Primary_Treatment, group=Primary_Treatment)) + # linetype= Primary_Treatment, group = Primary_Treatment
scale_fill_manual(values=c("#56B4E9", "#D55E00")) +
geom_smooth(method=lm , color="grey50", alpha = 0.1, se=TRUE, linetype = "dashed", formula = my.formula) + #, linetype = "dashed"
stat_poly_eq(formula = my.formula,
eq.with.lhs = "italic(hat(y))~`=`~",
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)  +
geom_point(size = 4, shape = 19) +
scale_color_manual(values=c("#56B4E9", "#D55E00")) +
labs(x="Eigengene expression by sample", y = "mean.TAOC") +
theme_bw() +
scale_y_continuous(limits=c(3.5, 4.5)) +
theme(text = element_text(size=15))
TAOC_vst.Exp.midnightblue
ggarrange(Primary.vst.midnightblue, Sec.vst.midnightblue, Third.vst.midnightblue, TAOC_vst.Exp.midnightblue,
plotlist = NULL,
ncol = 2,
nrow = 2,
labels = NULL)
Primary.vst.midnightblue
Sec.vst.midnightblue
Third.vst.midnightblue
Sec.vst.midnightblue
### Panopea generosa - load .fna ('Geoduck_annotation') and foramt GO terms ('Geoduck_GOterms') and vectors
Geoduck_annotation <- read.delim2(file="C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/Seq_details/Panopea-generosa-genes-annotations.txt", header=F)
# build annotation file to merge with the mean LFC tables
annot.condenced <- Geoduck_annotation[,c(1,3:9)]
annot.condenced$gene.length <- annot.condenced$V4 - annot.condenced$V3
annot.condenced <- annot.condenced[,-c(2,3)]
names(annot.condenced) <- c('Gene.ID', 'Uniprot', 'HGNC', 'fxn', 'Go.terms', 'Go.fxns','gene.length')
Geoduck_GOterms <- as.data.frame(Geoduck_annotation) %>% dplyr::select(c('V1','V8'))
colnames(Geoduck_GOterms)[1:2] <- c('transcript.ID', 'GO.terms') # call gene name and the GO terms - (Uniprot ID 'V5')
splitted <- strsplit(as.character(Geoduck_GOterms$GO.terms), ";") #slit into multiple GO ids
GO.terms <- data.frame(v1 = rep.int(Geoduck_GOterms$transcript.ID, sapply(splitted, length)), v2 = unlist(splitted))
### (2) Unique Genes - vector based on all unique mapped reads
# Construct a named vector of all target genes for goseq
GO_unique.genes.all <- as.vector(unique(Geoduck_annotation$V1)) # call all unique genes for GO analysis (goseq)
### (3) Gene length
# length vector
GO_gene.length <- Geoduck_annotation %>% dplyr::mutate(length = V4-V3) %>%  dplyr::select(c("V1","length"))
names(GO_gene.length)[1] <- "Gene.ID"
#GO_gene.length_merge <- merge(GO_gene.length, GO_midnightblue_genes, by = "Gene.ID")
length_vector <- GO_gene.length$length
### (4) Call modules of interest (i.e. midnightblue module) - merge to the genes list 'GO_unique.genes.all' to create a binary vector
# Example: 0 = not in midnightblue; 1 = in midnightblue
# midnightblue module  ------------------------------------------- #
GO_midnightblue <- d21_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% 'midnightblue') # %>%  dplyr::select("geneSymbol")
GO_midnightblue_genes <- GO_midnightblue[3]
names(GO_midnightblue_genes)[1] <- "Gene.ID" # 162 genws in the midnightblue module
GO_midnightblue_integer <- as.integer(GO_unique.genes.all%in%(GO_midnightblue_genes$Gene.ID)) # Day 0 - Primary - Upregulated DEGs
names(GO_midnightblue_integer)=GO_unique.genes.all
View(GO_midnightblue_integer)
GO_midnightblue
### (3) Gene length
# length vector
GO_gene.length <- Geoduck_annotation %>% dplyr::mutate(length = V4-V3) %>%  dplyr::select(c("V1","length"))
names(GO_gene.length)[1] <- "Gene.ID"
#GO_gene.length_merge <- merge(GO_gene.length, GO_midnightblue_genes, by = "Gene.ID")
length_vector <- GO_gene.length$length
### (4) Call modules of interest (i.e. midnightblue module) - merge to the genes list 'GO_unique.genes.all' to create a binary vector
# Example: 0 = not in midnightblue; 1 = in midnightblue
# midnightblue module  ------------------------------------------- #
GO_midnightblue <- d21_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% 'midnightblue') # %>%  dplyr::select("geneSymbol")
GO_midnightblue_genes <- GO_midnightblue[3]
GO_midnightblue_genes
GO_midnightblue
GO_midnightblue_genes <- GO_midnightblue[1]
names(GO_midnightblue_genes)[1] <- "Gene.ID" # 162 genws in the midnightblue module
GO_midnightblue_integer <- as.integer(GO_unique.genes.all%in%(GO_midnightblue_genes$Gene.ID)) # Day 0 - Primary - Upregulated DEGs
names(GO_midnightblue_integer)=GO_unique.genes.all
View(GO_midnightblue_integer)
#Calculate Probability Weighting Function (using 'nullp')
midnightblue.pwf<-nullp(GO_midnightblue_integer, GO_unique.genes.all, bias.data=length_vector) #weight vector by length of gene
midnightblue.goseq<-goseq(midnightblue.pwf, ID.vector, gene2cat=GO.terms, test.cats=c("GO:CC", "GO:BP", "GO:MF"), method="Wallenius", use_genes_without_cat=TRUE)
#=====================================================================================
# midnightblue MODULE CONTINUED....
#
# It's goseq time!!!
# PLOTTING
#=====================================================================================
library(forcats)
#Find only enriched GO terms that are statistically significant at cutoff
midnightblue_enriched.GO.05.a<-midnightblue.goseq$category[midnightblue.goseq$over_represented_pvalue<.05] # change twice here
midnightblue_enriched.GO.05<-data.frame(midnightblue_enriched.GO.05.a)
colnames(midnightblue_enriched.GO.05) <- c("category")
midnightblue_enriched.GO.05 <- merge(midnightblue_enriched.GO.05, midnightblue.goseq, by="category") # change here
midnightblue_enriched.GO.05 <- midnightblue_enriched.GO.05[order(-midnightblue_enriched.GO.05$numDEInCat),]
midnightblue_enriched.GO.05$term <- as.factor(midnightblue_enriched.GO.05$term)
head(midnightblue_enriched.GO.05)
midnightblue_MF <- subset(midnightblue_enriched.GO.05, ontology=="MF")
midnightblue_MF <- midnightblue_MF[order(-midnightblue_MF$numDEInCat),]
midnightblue_CC <- subset(midnightblue_enriched.GO.05, ontology=="CC")
midnightblue_CC <- midnightblue_CC[order(-midnightblue_CC$numDEInCat),]
midnightblue_BP <- subset(midnightblue_enriched.GO.05, ontology=="BP")
midnightblue_BP <- midnightblue_BP[order(-midnightblue_BP$numDEInCat),]
# Molecular Processes
MFplot_midnightblue <- midnightblue_MF %>% mutate(term = fct_reorder(term, numDEInCat)) %>%
ggplot( aes(x=term, y=numDEInCat) ) +
geom_segment( aes(x=term ,xend=term, y=0, yend=numDEInCat), color="grey") +
geom_point(size=3, color="#69b3a2") +
coord_flip() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="none"
) +
xlab("") +
ylab("") +
ggtitle("Molecular Function") + #add a main title
theme(plot.title = element_text(face = 'bold',
size = 12,
hjust = 0)) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())#Set the plot background
#Cellular Processes
CCplot_midnightblue <- midnightblue_CC %>% mutate(term = fct_reorder(term, numDEInCat)) %>%
ggplot( aes(x=term, y=numDEInCat) ) +
geom_segment( aes(x=term ,xend=term, y=0, yend=numDEInCat), color="grey") +
geom_point(size=3, color="#69b3a2") +
coord_flip() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="none"
) +
xlab("") +
ylab("") +
ggtitle("Cellular Component") + #add a main title
theme(plot.title = element_text(face = 'bold',
size = 12,
hjust = 0)) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())#Set the plot background
# Biological Processes
BPplot_midnightblue <- midnightblue_BP %>% mutate(term = fct_reorder(term, numDEInCat)) %>%
ggplot( aes(x=term, y=numDEInCat) ) +
geom_segment( aes(x=term ,xend=term, y=0, yend=numDEInCat), color="grey") +
geom_point(size=3, color="#69b3a2") +
coord_flip() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="none") +
xlab("") +
ylab("") +
ggtitle("Biological Process") + #add a main title
theme(plot.title = element_text(face = 'bold',
size = 12,
hjust = 0)) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())#Set the plot background
# merge MF CC BP plots - Light cyan
num_midnightblue   <- dim(GO_midnightblue_genes)[1] # call num upregulated genes
library(tidyr)
GOplot.merge_midnightblue<- midnightblue_enriched.GO.05 %>% drop_na(ontology) %>% mutate(term = fct_reorder(term, numDEInCat)) %>%
mutate(term = fct_reorder(term, ontology)) %>%
ggplot( aes(x=term, y=numDEInCat) ) +
geom_segment( aes(x=term ,xend=term, y=0, yend=numDEInCat), color="grey") +
geom_point(size=3, aes(colour = ontology)) +
coord_flip() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="bottom"
) +
xlab("") +
ylab("") +
ggtitle("GO: Day 21 WGCNA MEmidnightblue") +
geom_label(aes(x = 2, y = 7, label = paste(num_midnightblue, "MEmidnightblue genes"))) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) #Set the plot background #set title attributes
GOplot.merge_midnightblue
GOplot.merge_midnightblue
GO_midnightblue
midnightblue.pwf
midnightblue.goseq
midnightblue_enriched.GO.05
midnightblue_MF
midnightblue_CC
midnightblue_BP
