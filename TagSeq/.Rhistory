scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
ggtitle(paste("Day 7:",target_GOIs[i,1], sep='')) +
# expand_limits(y=0) +                                                    # Expand y range
#scale_y_continuous(limits=c((min_p1), (max_p1))) +
theme(text = element_text(size=15)) +
theme(legend.position = "none")
} else { d7_plots <- plot.new() }
if ( (nrow(Day14_meanExpr %>%  dplyr::filter(genes %in% target_GOIs[i,1]))) > 0 ) {
d14_plots <- Day14_meanExpr %>%
dplyr::filter(genes %in% target_GOIs[i,1]) %>%
ggplot(aes(x=SecondTreatment, y=mean.vstExp, fill=PrimaryTreatment)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean.vstExp-se.vsdtExp, ymax=mean.vstExp+se.vsdtExp), colour="black", width=.1, position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Second pCO2 treatment") +
ylab("Gene Expression (mean±SE VST transformed)") +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
ggtitle(paste("Day 14:",target_GOIs[i,1], sep='')) +
# expand_limits(y=0) +                                                    # Expand y range
#scale_y_continuous(limits=c((min_p1), (max_p1))) +
theme(text = element_text(size=15)) +
theme(legend.position = "none")
} else { d14_plots <- plot.new() }
if ( (nrow(Day21_meanExpr %>%  dplyr::filter(genes %in% target_GOIs[i,1]))) > 0 ) {
d21_plots <- Day21_meanExpr %>%
dplyr::filter(genes %in% target_GOIs[i,1]) %>%
ggplot(aes(x=ThirdTreatment, y=mean.vstExp, fill=PrimaryTreatment)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean.vstExp-se.vsdtExp, ymax=mean.vstExp+se.vsdtExp), colour="black", width=.1, position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Third pCO2 treatment") +
ylab('') +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
ggtitle(paste("Day 21:",target_GOIs[i,1], sep='')) +
# expand_limits(y=0) +                                                    # Expand y range
#scale_y_continuous(limits=c((min_p1), (max_p1))) +
theme(text = element_text(size=15)) +
theme(legend.position = "none") +
facet_wrap(~SecondTreatment)
} else { d21_plots <- plot.new() }
getwd()
pdf(paste("Analysis/Output/a_priori_hypothesis/",target_GOIs[i,1],".pdf"), width=10, height=6)
print(ggarrange(d7_plots, d14_plots, d21_plots,
plotlist = NULL,
ncol = 3,
nrow = 1,
labels = NULL))
dev.off()
}
# ===================================================================================
# Now for the for looped plots!
#
# ===================================================================================
pd <- position_dodge(0.3)
for(i in 1:nrow(target_GOIs)) {
if ( (nrow(Day7_meanExpr %>%  dplyr::filter(genes %in% target_GOIs[i,1]))) > 0 ) {
d7_plots <- Day7_meanExpr %>%
dplyr::filter(genes %in% target_GOIs[i,1]) %>%
ggplot(aes(x=SecondTreatment, y=mean.vstExp, fill=PrimaryTreatment)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean.vstExp-se.vsdtExp, ymax=mean.vstExp+se.vsdtExp), colour="black", width=.1, position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Second pCO2 treatment") +
ylab('') +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
ggtitle(paste("Day 7:",target_GOIs[i,1], sep='')) +
# expand_limits(y=0) +                                                    # Expand y range
#scale_y_continuous(limits=c((min_p1), (max_p1))) +
theme(text = element_text(size=15)) +
theme(legend.position = "none")
} else { d7_plots <- plot.new() }
if ( (nrow(Day14_meanExpr %>%  dplyr::filter(genes %in% target_GOIs[i,1]))) > 0 ) {
d14_plots <- Day14_meanExpr %>%
dplyr::filter(genes %in% target_GOIs[i,1]) %>%
ggplot(aes(x=SecondTreatment, y=mean.vstExp, fill=PrimaryTreatment)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean.vstExp-se.vsdtExp, ymax=mean.vstExp+se.vsdtExp), colour="black", width=.1, position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Second pCO2 treatment") +
ylab("Gene Expression (mean±SE VST transformed)") +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
ggtitle(paste("Day 14:",target_GOIs[i,1], sep='')) +
# expand_limits(y=0) +                                                    # Expand y range
#scale_y_continuous(limits=c((min_p1), (max_p1))) +
theme(text = element_text(size=15)) +
theme(legend.position = "none")
} else { d14_plots <- plot.new() }
if ( (nrow(Day21_meanExpr %>%  dplyr::filter(genes %in% target_GOIs[i,1]))) > 0 ) {
d21_plots <- Day21_meanExpr %>%
dplyr::filter(genes %in% target_GOIs[i,1]) %>%
ggplot(aes(x=ThirdTreatment, y=mean.vstExp, fill=PrimaryTreatment)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean.vstExp-se.vsdtExp, ymax=mean.vstExp+se.vsdtExp), colour="black", width=.1, position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Third pCO2 treatment") +
ylab('') +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
ggtitle(paste("Day 21:",target_GOIs[i,1], sep='')) +
# expand_limits(y=0) +                                                    # Expand y range
#scale_y_continuous(limits=c((min_p1), (max_p1))) +
theme(text = element_text(size=15)) +
theme(legend.position = "none") +
facet_wrap(~SecondTreatment)
} else { d21_plots <- plot.new() }
getwd()
pdf(paste("Analysis/Output/a_priori_hypothesis/",target_GOIs[i,1],".pdf"), width=10, height=6)
print(ggarrange(d7_plots, d14_plots, d21_plots,
plotlist = NULL,
ncol = 3,
nrow = 1,
labels = NULL))
dev.off()
}
# SET WORKING DIRECTORY AND LOAD DATA
setwd("C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/")
# Load libraries
library(dplyr)
library(goseq)
library(DESeq2)
library(reshape2)
library(ggplot2)
library(Rmisc)
library(ggpubr)
library(tibble)
library(hrbrthemes)
library(gridExtra)
library(ggpmisc)
# Load data
d14_ModEigen <- read.csv("Analysis/Output/WGCNA/Day14/d14.WGCNA_ModulEigengenes.csv")
d14_Annot_ModuleMembership <-  read.csv("Analysis/Output/WGCNA/Day14/d14.WGCNA_ModulMembership.csv")
d14_vst_data <- read.csv("Analysis/Output/WGCNA/Day14/day14_vstTransformed_WGCNAdata.csv")
Master.Treatment_Phenotype.data <- read.csv(file="Analysis/Data/ Master_Phyenotype.and.Exp.Treatment_Metadata.csv", sep=',', header=TRUE)
#=====================================================================================
#
#  Prep and merge datasets for plotting
#
#=====================================================================================
# Prep data to merge
# module membership
d14_Annot_ModuleMembership <- d14_Annot_ModuleMembership[-c(1:2)] # ommit the redundant gene name columns buut keep 'geneSymbol'
dim(d14_Annot_ModuleMembership) #   8626   36
# module eigengenes
names(d14_ModEigen)[1] <- "Sample.Name"
# normalized count data (same used for the dds object and WGCNA analysis)
d14_vst_data_t <- as.data.frame(t(d14_vst_data[, -(1)])) # trsnpose columns names to rows (genes)
colnames(d14_vst_data_t) <- d14_vst_data[, 1] # name the columns as the rows in previous dataset (sample IDS)
d14_vst <- d14_vst_data_t %>% tibble::rownames_to_column("geneSymbol") # "geneSymbol" - create column and remname the gene name column to 'geneSymbol'
head(d14_vst_data_t) # same with gene ID as rowname
head(d14_vst) # same
# merge Master datasets
# GO terms
d14_GOTermsMaster.Modules<-  merge(d14_Annot_ModuleMembership, d14_vst, by = "geneSymbol")
dim(d14_GOTermsMaster.Modules) # 8626   63
# Eigengenes and traits
d14_EigenTraitMaster<-  merge(d14_ModEigen, Master.Treatment_Phenotype.data, by = "Sample.Name")
dim(d14_EigenTraitMaster) # 27 23
#=====================================================================================
library(forcats) # for plotting later..
### Panopea generosa - load .fna ('Geoduck_annotation') and foramt GO terms ('Geoduck_GOterms') and vectors
Geoduck_annotation <- read.delim2(file="C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/Seq_details/Panopea-generosa-genes-annotations.txt", header=F)
# build annotation file to merge with the mean LFC tables
annot.condenced <- Geoduck_annotation[,c(1,3:9)]
annot.condenced$gene.length <- annot.condenced$V4 - annot.condenced$V3
annot.condenced <- annot.condenced[,-c(2,3)]
names(annot.condenced) <- c('Gene.ID', 'Uniprot', 'HGNC', 'fxn', 'Go.terms', 'Go.fxns','gene.length')
#=====================================================================================
#
# goseq -prepare GO vectors (total), unique genes, gene length, GO terms for modules of interest
#
#=====================================================================================
# Prepare dataframe(s) and vectors for goseq
### (1) Format 'GO.term' for goseq from the P.generosa annotation .fna file 'Geoduck_annotation'
# GO terms data (ALL)
Geoduck_GOterms <- as.data.frame(Geoduck_annotation) %>% dplyr::select(c('V1','V8'))
colnames(Geoduck_GOterms)[1:2] <- c('transcript.ID', 'GO.terms') # call gene name and the GO terms - (Uniprot ID 'V5')
splitted <- strsplit(as.character(Geoduck_GOterms$GO.terms), ";") #slit into multiple GO ids
GO.terms <- data.frame(v1 = rep.int(Geoduck_GOterms$transcript.ID, sapply(splitted, length)), v2 = unlist(splitted)) #list all genes with each of their GO terms in a single row
### (2) Unique Genes - vector based on all unique mapped reads
# Construct a named vector of all target genes for goseq
GO_unique.genes.all <- as.vector(unique(Geoduck_annotation$V1)) # call all unique genes for GO analysis (goseq)
### (3) Gene length
# length vector
GO_gene.length <- Geoduck_annotation %>% dplyr::mutate(length = V4-V3) %>%  dplyr::select(c("V1","length"))
names(GO_gene.length)[1] <- "Gene.ID"
#GO_gene.length_merge <- merge(GO_gene.length, GO_magenta_genes, by = "Gene.ID")
length_vector <- GO_gene.length$length
### (4) Call modules of interest (i.e. magenta module) - merge to the genes list 'GO_unique.genes.all' to create a binary vector
# Example: 0 = not in moddulecolor; 1 = in modulecolor
#==============================================================================
#
#
#   FOR LOOP THE REST of goseq - ends with aplot for the MF and BP terms
#
#
#==============================================================================
modcolor <- as.data.frame(unique(d14_Annot_ModuleMembership$moduleColor))
names(modcolor)[1] <- "color"
for(i in 1:nrow(modcolor)) {
# (4) Call modules of interest (i.e. magenta module) - merge to the genes list 'GO_unique.genes.all' to create a binary vector
# Example: 0 = not in moddulecolor; 1 = in modulecolor
GO_module <- d14_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% modcolor[i,]) # %>%  dplyr::select("geneSymbol")
GO_module_genes <- GO_module[1]
names(GO_module_genes)[1] <- "Gene.ID" # 162 genws in the green module
# convert to integer with all unique genes
GO_module_integer <- as.integer(GO_unique.genes.all%in%(GO_module_genes$Gene.ID)) # Day 0 - Primary - Upregulated DEGs
names(GO_module_integer)=GO_unique.genes.all
# Review what we have for goseq....
# (1) Go terms ---------------- #
#  head(GO.terms)
# (2) ID vector --------------- #
# head(GO_unique.genes.all)
# (3) Length vector ----------- #
# head(length_vector)
# (4) Binary DEG vectors ------ #
# head(GO_magenta_integer)
#Calculate Probability Weighting Function (using 'nullp')
pwf <-nullp(GO_module_integer, GO_unique.genes.all, bias.data=length_vector) #weight vector by length of gene
# Run goseq
mod.goseq  <-goseq(pwf, ID.vector, gene2cat=GO.terms, test.cats=c("GO:CC", "GO:BP", "GO:MF"), method="Wallenius", use_genes_without_cat=TRUE)
# call enriched GO terms and plot
#Find only enriched GO terms that are statistically significant at cutoff
mod_enriched.GO.05.a<-mod.goseq$category[mod.goseq$over_represented_pvalue<.05] # change twice here
mod_enriched.GO.05<-data.frame(mod_enriched.GO.05.a)
colnames(mod_enriched.GO.05) <- c("category")
mod_enriched.GO.05 <- merge(mod_enriched.GO.05, mod.goseq, by="category") # change here
mod_enriched.GO.05 <- mod_enriched.GO.05[order(-mod_enriched.GO.05$numDEInCat),]
mod_enriched.GO.05$term <- as.factor(mod_enriched.GO.05$term)
head(mod_enriched.GO.05)
mod_MF <- subset(mod_enriched.GO.05, ontology=="MF")
mod_MF <- mod_MF[order(-mod_MF$numDEInCat),]
mod_CC <- subset(mod_enriched.GO.05, ontology=="CC")
mod_CC <- mod_CC[order(-mod_CC$numDEInCat),]
mod_BP <- subset(mod_enriched.GO.05, ontology=="BP")
mod_BP <- mod_BP[order(-mod_BP$numDEInCat),]
# merge MF CC BP plots - Light cyan
num_mod   <- dim(GO_module_genes)[1] # call num upregulated genes
# tile plots for MF and BP
MF_tile_plot <- mod_enriched.GO.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) )) %>%
dplyr::filter(ontology %in% ('MF')) %>%
mutate(term = fct_reorder(term, ontology)) %>%
ggplot(aes(ontology, term, fill= factor(ontology), alpha = over_represented_pvalue)) +
geom_tile(fill = '#00BFC4') +
scale_alpha_continuous(range = c(1, 0.1)) +
theme_classic2() +
ggtitle(paste("GO: Day 14 WGCNA ME", modcolor[i,], sep ='')) +
theme(legend.position="none")
BP_tile_plot <- mod_enriched.GO.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) )) %>%
dplyr::filter(ontology %in% ('BP')) %>%
mutate(term = fct_reorder(term, ontology)) %>%
ggplot(aes(ontology, term, fill= factor(ontology), alpha = over_represented_pvalue)) +
geom_tile(fill = '#F8766D') +
scale_alpha_continuous(range = c(1, 0.1)) +
theme_classic2() +
ggtitle('') +
theme(legend.position="none")
# output the tile plots
pdf(paste("Analysis/Output/WGCNA/Day14/goseq_modules/Day14_goseq_tiles_ME",modcolor[i,],".pdf", sep =''), width=8, height=10)
print(ggarrange(MF_tile_plot, BP_tile_plot,
plotlist = NULL,
ncol = 1,
nrow = 2,
labels = NULL))
dev.off()
# plot the output
library(tidyr)
Plot <- mod_enriched.GO.05 %>% drop_na(ontology) %>% mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) )) %>%
dplyr::filter(ontology %in% c('MF', 'BP')) %>%
mutate(term = fct_reorder(term, ontology)) %>%
ggplot( aes(x=term, y=(-log10(over_represented_pvalue)) ) ) +
geom_segment( aes(x=term ,xend=term, y=0, yend=(-log10(over_represented_pvalue)), colour = ontology), size = 2, lineend = "butt", alpha = 0.1) + #
geom_point(size=2, shape = 15, aes(colour = ontology)) +
coord_flip() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="bottom"
) +
xlab("") +
ylab("-log10(pvalue)") +
ggtitle(paste("GO: Day 14 WGCNA ME", modcolor[i,], sep = "")) +
geom_label(aes(x = 2, y = 4, label = paste(num_mod, "ME", modcolor[i,], "genes"))) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
axis.text.x = element_text(size = 12), # set size of x axis text (log10 vals)
axis.title.x = element_text(size = 14), # set size of x axis title (log10 vals)
axis.text.y = element_text(size = 8), # set size of y axis text (terms)
#legend.position = c(30, 30),
plot.background=element_blank()) + #Set the plot background #set title attributes
geom_hline(yintercept = 1.3, linetype="dashed",
color = "grey", size=1)
pdf(paste("Analysis/Output/WGCNA/Day14/goseq_modules/Day14_goseq_ME",modcolor[i,],".pdf", sep =''), width=8, height=5)
print(Plot)
dev.off()
}
ING DIRECTORY AND LOAD DATA
setwd("C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/")
# Load libraries
library(dplyr)
library(goseq)
library(reshape2)
library(ggplot2)
library(Rmisc)
library(ggpubr)
library(tibble)
library(hrbrthemes)
library(gridExtra)
library(ggplot2)
library(tidyr)
library(forcats) # for plotting later..
library(zoo)
library(ComplexHeatmap)
library(circlize)
# Load data
d7_Annot_ModuleMembership <-  read.csv("Analysis/Output/WGCNA/Day7/d7.WGCNA_ModulMembership.csv")
d14_Annot_ModuleMembership <-  read.csv("Analysis/Output/WGCNA/Day14/d14.WGCNA_ModulMembership.csv")
d21_Annot_ModuleMembership <-  read.csv("Analysis/Output/WGCNA/Day21/d21.WGCNA_ModulMembership.csv")
#=====================================================================================
#
# goseq - load the annotation and prepare the four steps for goseq!
#
#=====================================================================================
### Panopea generosa - load .fna ('Geoduck_annotation') and foramt GO terms ('Geoduck_GOterms') and vectors
Geoduck_annotation <- read.delim2(file="C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/Seq_details/Panopea-generosa-genes-annotations.txt", header=F)
# build annotation file to merge with the mean LFC tables
annot.condenced <- Geoduck_annotation[,c(1,3:9)]
annot.condenced$gene.length <- annot.condenced$V4 - annot.condenced$V3
annot.condenced <- annot.condenced[,-c(2,3)]
names(annot.condenced) <- c('Gene.ID', 'Uniprot', 'HGNC', 'fxn', 'Go.terms', 'Go.fxns','gene.length')
# Prepare dataframe(s) and vectors for goseq
### (1) Format 'GO.term' for goseq from the P.generosa annotation .fna file 'Geoduck_annotation'
# GO terms data (ALL)
Geoduck_GOterms <- as.data.frame(Geoduck_annotation) %>% dplyr::select(c('V1','V8'))
colnames(Geoduck_GOterms)[1:2] <- c('transcript.ID', 'GO.terms') # call gene name and the GO terms - (Uniprot ID 'V5')
splitted <- strsplit(as.character(Geoduck_GOterms$GO.terms), ";") #slit into multiple GO ids
GO.terms <- data.frame(v1 = rep.int(Geoduck_GOterms$transcript.ID, sapply(splitted, length)), v2 = unlist(splitted)) #list all genes with each of their GO terms in a single row
### (2) Unique Genes - vector based on all unique mapped reads
# Construct a named vector of all target genes for goseq
GO_unique.genes.all <- as.vector(unique(Geoduck_annotation$V1)) # call all unique genes for GO analysis (goseq)
### (3) Gene length
# length vector
GO_gene.length <- Geoduck_annotation %>% dplyr::mutate(length = V4-V3) %>%  dplyr::select(c("V1","length"))
names(GO_gene.length)[1] <- "Gene.ID"
#GO_gene.length_merge <- merge(GO_gene.length, GO_magenta_genes, by = "Gene.ID")
length_vector <- GO_gene.length$
#==============================================================================
#
#  PLOTTING GO TERMS  FOR.... PRIMARY TREATMENT EFFECT AMBIENT > MODERATE
#
# day 7  : module BROWN
# day 14 : module BROWN
# day 21 : module MAGENTA
# day 21 : module BLUE
#==============================================================================
Day7_mod_color <- as.data.frame(unique(d7_Annot_ModuleMembership$moduleColor))
names(Day7_mod_color)[1] <- "color"
Day14_mod_color <- as.data.frame(unique(d14_Annot_ModuleMembership$moduleColor))
names(Day14_mod_color)[1] <- "color"
Day21_mod_color <- as.data.frame(unique(d21_Annot_ModuleMembership$moduleColor))
names(Day21_mod_color)[1] <- "color"
#======================================================================= #
# MODULES WITH PRIMARY EFFECT == AMBIENT > MODERATE (vst expression and positive correlation - view heatmap)
# Day 7 brown module
d7_Mod.Brown <- d7_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% 'brown') # %>%  dplyr::select("geneSymbol")
d7_Mod.Brown_genes <- d7_Mod.Brown[1]
names(d7_Mod.Brown_genes)[1] <- "Gene.ID" # 162 genws in the green module
d7_Mod.Brown_integer <- as.integer(GO_unique.genes.all%in%(d7_Mod.Brown_genes$Gene.ID)) # convert to integer with all unique genes
names(d7_Mod.Brown_integer)=GO_unique.genes.all # rename
# Day 14 brown module
d14_Mod.Brown <- d14_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% 'brown') # %>%  dplyr::select("geneSymbol")
d14_Mod.Brown_genes <- d14_Mod.Brown[1]
names(d14_Mod.Brown_genes)[1] <- "Gene.ID" # 162 genws in the green module
d14_Mod.Brown_integer <- as.integer(GO_unique.genes.all%in%(d14_Mod.Brown_genes$Gene.ID)) # convert to integer with all unique genes
names(d14_Mod.Brown_integer)=GO_unique.genes.all # rename
# Day 21 Magenta module
d21_Mod.Magenta <- d21_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% 'magenta') # %>%  dplyr::select("geneSymbol")
d21_Mod.Magenta_genes <- d21_Mod.Magenta[1]
names(d21_Mod.Magenta_genes)[1] <- "Gene.ID" # 162 genws in the green module
d21_Mod.Magenta_integer <- as.integer(GO_unique.genes.all%in%(d21_Mod.Magenta_genes$Gene.ID)) # convert to integer with all unique genes
names(d21_Mod.Magenta_integer)=GO_unique.genes.all # rename
# Day 21 blue module
d21_Mod.blue <- d21_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% 'blue') # %>%  dplyr::select("geneSymbol")
d21_Mod.blue_genes <- d21_Mod.blue[1]
names(d21_Mod.blue_genes)[1] <- "Gene.ID" # 162 genws in the green module
d21_Mod.blue_integer <- as.integer(GO_unique.genes.all%in%(d21_Mod.blue_genes$Gene.ID)) # convert to integer with all unique genes
names(d21_Mod.blue_integer)=GO_unique.genes.all # rename
#======================================================================= #
#Calculate Probability Weighting Function (using 'nullp')
d7_Mod.Brown_pwf <-nullp(d7_Mod.Brown_integer, GO_unique.genes.all, bias.data=length_vector) #weight vector by length of gene
d14_Mod.Brown_pwf <-nullp(d14_Mod.Brown_integer, GO_unique.genes.all, bias.data=length_vector) #weight vector by length of gene
d21_Mod.Magenta_pwf <-nullp(d21_Mod.Magenta_integer, GO_unique.genes.all, bias.data=length_vector) #weight vector by length of gene
d21_Mod.Blue_pwf <-nullp(d21_Mod.blue_integer, GO_unique.genes.all, bias.data=length_vector) #weight vector by length of gene
#======================================================================= #
# Run goseq
d7_Mod.Brown.goseq  <-goseq(d7_Mod.Brown_pwf, ID.vector, gene2cat=GO.terms, test.cats=c("GO:CC", "GO:BP", "GO:MF"), method="Wallenius", use_genes_without_cat=TRUE)
d14_Mod.Brown.goseq  <-goseq(d14_Mod.Brown_pwf, ID.vector, gene2cat=GO.terms, test.cats=c("GO:CC", "GO:BP", "GO:MF"), method="Wallenius", use_genes_without_cat=TRUE)
d21_Mod.Magenta.goseq  <-goseq(d21_Mod.Magenta_pwf, ID.vector, gene2cat=GO.terms, test.cats=c("GO:CC", "GO:BP", "GO:MF"), method="Wallenius", use_genes_without_cat=TRUE)
d21_Mod.Blue.goseq  <-goseq(d21_Mod.Blue_pwf, ID.vector, gene2cat=GO.terms, test.cats=c("GO:CC", "GO:BP", "GO:MF"), method="Wallenius", use_genes_without_cat=TRUE)
#======================================================================= #
# call enriched GO terms and plot
d7_Mod.Brown.GO.05.a<-d7_Mod.Brown.goseq$category[d7_Mod.Brown.goseq$over_represented_pvalue<.1] # change twice here
d7_Mod.Brown.GO.05<-data.frame(d7_Mod.Brown.GO.05.a)
colnames(d7_Mod.Brown.GO.05) <- c("category")
d7_Mod.Brown.GO.05 <- merge(d7_Mod.Brown.GO.05, d7_Mod.Brown.goseq, by="category") # change here
d7_Mod.Brown.GO.05 <- d7_Mod.Brown.GO.05[order(-d7_Mod.Brown.GO.05$numDEInCat),]
d7_Mod.Brown.GO.05$term <- as.factor(d7_Mod.Brown.GO.05$term)
head(d7_Mod.Brown.GO.05)
d7_Mod.Brown_MF <- d7_Mod.Brown.GO.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd7_brown', sep = "_")) %>%
dplyr::filter(ontology %in% ('MF_d7_brown'))
d7_Mod.Brown_BP <- d7_Mod.Brown.GO.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd7_brown', sep = "_")) %>%
dplyr::filter(ontology %in% ('BP_d7_brown'))
# day 14 Module Brown
d14_Mod.Brown.GO.05.a<-d14_Mod.Brown.goseq$category[d14_Mod.Brown.goseq$over_represented_pvalue<.1] # change twice here
d14_Mod.Brown.GO.05<-data.frame(d14_Mod.Brown.GO.05.a)
colnames(d14_Mod.Brown.GO.05) <- c("category")
d14_Mod.Brown.GO.05 <- merge(d14_Mod.Brown.GO.05, d14_Mod.Brown.goseq, by="category") # change here
d14_Mod.Brown.GO.05 <- d14_Mod.Brown.GO.05[order(-d14_Mod.Brown.GO.05$numDEInCat),]
d14_Mod.Brown.GO.05$term <- as.factor(d14_Mod.Brown.GO.05$term)
head(d14_Mod.Brown.GO.05)
d14_Mod.Brown_MF <- d14_Mod.Brown.GO.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd14_brown', sep = "_")) %>%
dplyr::filter(ontology %in% ('MF_d14_brown'))
d14_Mod.Brown_BP <- d14_Mod.Brown.GO.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd14_brown', sep = "_")) %>%
dplyr::filter(ontology %in% ('BP_d14_brown'))
# day 21 module magenta
d21_Mod.Magenta.GO.05.a<-d21_Mod.Magenta.goseq$category[d21_Mod.Magenta.goseq$over_represented_pvalue<.1] # change twice here
d21_Mod.Magenta.GO.05<-data.frame(d21_Mod.Magenta.GO.05.a)
colnames(d21_Mod.Magenta.GO.05) <- c("category")
d21_Mod.Magenta.GO.05 <- merge(d21_Mod.Magenta.GO.05, d21_Mod.Magenta.goseq, by="category") # change here
d21_Mod.Magenta.GO.05 <- d21_Mod.Magenta.GO.05[order(-d21_Mod.Magenta.GO.05$numDEInCat),]
d21_Mod.Magenta.GO.05$term <- as.factor(d21_Mod.Magenta.GO.05$term)
head(d21_Mod.Magenta.GO.05)
d21_Mod.Magenta_MF <- d21_Mod.Magenta.GO.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd21_blue.magenta', sep = "_")) %>%
dplyr::filter(ontology %in% ('MF_d21_blue.magenta'))
d21_Mod.Magenta_BP <- d21_Mod.Magenta.GO.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
# ontology = paste(ontology, 'd21_magenta', sep = "_")) %>%
# dplyr::filter(ontology %in% ('BP_d21_magenta'))
ontology = paste(ontology, 'd21_blue.magenta', sep = "_")) %>%
dplyr::filter(ontology %in% ('BP_d21_blue.magenta'))
# day 21 module Blue
d21_Mod.Blue.GO.05.a<-d21_Mod.Blue.goseq$category[d21_Mod.Blue.goseq$over_represented_pvalue<.1] # change twice here
d21_Mod.Blue.GO.05<-data.frame(d21_Mod.Blue.GO.05.a)
colnames(d21_Mod.Blue.GO.05) <- c("category")
d21_Mod.Blue.GO.05 <- merge(d21_Mod.Blue.GO.05, d21_Mod.Blue.goseq, by="category") # change here
d21_Mod.Blue.GO.05 <- d21_Mod.Blue.GO.05[order(-d21_Mod.Blue.GO.05$numDEInCat),]
d21_Mod.Blue.GO.05$term <- as.factor(d21_Mod.Blue.GO.05$term)
head(d21_Mod.Blue.GO.05)
d21_Mod.Blue_MF <- d21_Mod.Blue.GO.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd21_blue.magenta', sep = "_")) %>%
dplyr::filter(ontology %in% ('MF_d21_blue.magenta'))
d21_Mod.Blue_BP <- d21_Mod.Blue.GO.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd21_blue.magenta', sep = "_")) %>%
dplyr::filter(ontology %in% ('BP_d21_blue.magenta'))
# Primary effect: WGCNA significant module showing Ambient > Moderate - bind together day 7 brown, day 14 brown
# MF
MF_Amb_effect <- rbind(d7_Mod.Brown_MF, d14_Mod.Brown_MF, d21_Mod.Magenta_MF, d21_Mod.Blue_MF) # d21_Mod.Magenta_MF,
# BP
BP_Amb_effect <- rbind(d7_Mod.Brown_BP, d14_Mod.Brown_BP, d21_Mod.Magenta_BP, d21_Mod.Blue_BP)
MF_tile_Amb_effect  <- MF_Amb_effect %>%
mutate(term = fct_reorder(term, ontology)) %>%
ggplot(aes(factor(ontology,level = c('MF_d7_brown', 'MF_d14_brown', 'MF_d21_blue.magenta')), term, fill= factor(ontology), alpha = over_represented_pvalue)) +
geom_tile(fill = '#00BFC4') +
scale_alpha_continuous(range = c(1, 0.3)) +
theme_classic2() +
ggtitle("GO Mol Fxn: Priming effect (> Exp in Amb history)") +
xlab("GO.ontology_Sampling.Day") +
ylab('') +
theme(legend.position="none")
BP_tile_Amb_effect <- BP_Amb_effect %>%
mutate(term = fct_reorder(term, ontology)) %>%
ggplot(aes(factor(ontology,level = c('BP_d7_brown', 'BP_d14_brown', 'BP_d21_blue.magenta')), term, fill= factor(ontology), alpha = over_represented_pvalue)) +
geom_tile(fill = '#F8766D') +
scale_alpha_continuous(range = c(1, 0.3)) +
theme_classic2() +
ggtitle("GO Biol Proc: Priming effect (> Exp in Amb history)") +
xlab("GO.ontology_Sampling.Day") +
ylab('') +
theme(legend.position="none")
MF_tile_Amb_effect
BP_tile_Amb_effect
