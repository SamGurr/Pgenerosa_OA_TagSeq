#
#=====================================================================================
sizeGrWindow(7, 6)
MEList = moduleEigengenes(dds.timeseries_vst, colors = dynamicColors_sign) # signed TOM
MEs = MEList$eigengenes # signed TOM  ASSINED EQIGENGENE VARIABE HERE
MEDiss = 1-cor(MEs); # Calculate dissimilarity of module eigengenes
METree = hclust(as.dist(MEDiss), method = "average"); # Cluster module eigengenes
plot(METree, main = "Clustering of module eigengenes (dissimilarity calc = MEDiss = 1-cor(MEs))",
xlab = "", sub = "")
MEDissThres = 0 # call the cut height - change the cut height for the eignengene tree!
abline(h=MEDissThres, col = "red") # add the line to the tree
png("Analysis/Output/WGCNA/subseq_treatments_all/TimeSeries/All_ClusterEigengenes_signedTOM.png", 1000, 1000, pointsize=20) # signed TOM
plot(METree, main = "Clustering of module eigengenes (dissimilarity calc = MEDiss = 1-cor(MEs))",
xlab = "", sub = "")  +
abline(h=MEDissThres, col = "red") # add the line to the tree
dev.off()
MEList_mod = moduleEigengenes(dds.MODExp_vst, colors = dynamicColors_sign_ModExp) # signed TOM
MEs_mod = MEList_mod$eigengenes # signed TOM  ASSINED EQIGENGENE VARIABE HERE
MEDiss_mod = 1-cor(MEs_mod); # Calculate dissimilarity of module eigengenes
METree_mod = hclust(as.dist(MEDiss_mod), method = "average"); # Cluster module eigengenes
plot(METree_mod, main = "Clustering of module eigengenes (dissimilarity calc = MEDiss = 1-cor(MEs))",
xlab = "", sub = "")
MEDissThres_mod = 0 # call the cut height - change the cut height for the eignengene tree!
abline(h=MEDissThres_mod, col = "red") # add the line to the tree
png("Analysis/Output/WGCNA/subseq_treatments_all/TimeSeries/ModExposures_ClusterEigengenes_signedTOM.png", 1000, 1000, pointsize=20) # signed TOM
plot(METree_mod, main = "Clustering of module eigengenes (dissimilarity calc = MEDiss = 1-cor(MEs))",
xlab = "", sub = "")  +
abline(h=MEDissThres_mod, col = "red") # add the line to the tree
dev.off()
MEList_sev = moduleEigengenes(dds.SevExp_vst, colors = dynamicColors_sign_SevExp) # signed TOM
MEs_sev = MEList_sev$eigengenes # signed TOM  ASSINED EQIGENGENE VARIABE HERE
MEDiss_sev = 1-cor(MEs_sev); # Calculate dissimilarity of module eigengenes
METree_sev = hclust(as.dist(MEDiss_sev), method = "average"); # Cluster module eigengenes
plot(METree_sev, main = "Clustering of module eigengenes (dissimilarity calc = MEDiss = 1-cor(MEs))",
xlab = "", sub = "")
MEDissThres_sev = 0 # call the cut height - change the cut height for the eignengene tree!
abline(h=MEDissThres_sev, col = "red") # add the line to the tree
png("Analysis/Output/WGCNA/subseq_treatments_all/TimeSeries/SevExposures_ClusterEigengenes_signedTOM.png", 1000, 1000, pointsize=20) # signed TOM
plot(METree_sev, main = "Clustering of module eigengenes (dissimilarity calc = MEDiss = 1-cor(MEs))",
xlab = "", sub = "")  +
abline(h=MEDissThres_sev, col = "red") # add the line to the tree
dev.off()
merge = mergeCloseModules(dds.timeseries_vst, dynamicColors_sign, cutHeight = MEDissThres, verbose = 3) # signed TOM
mergedColors = merge$colors;
mergedMEs = merge$newMEs;
merge_mod = mergeCloseModules(dds.MODExp_vst, dynamicColors_sign_ModExp, cutHeight = METree_mod, verbose = 3) # signed TOM
merge_mod = mergeCloseModules(dds.MODExp_vst, dynamicColors_sign_ModExp, cutHeight = MEDissThres_mod, verbose = 3) # signed TOM
mergedColors_mod = merge_mod$colors;
mergedMEs_mod = merge_mod$newMEs;
merge_sev = mergeCloseModules(dds.SevExp_vst, dynamicColors_sign_SevExp, cutHeight = MEDissThres_sev, verbose = 3) # signed TOM
mergedColors_sev = merge_sev$colors;
mergedMEs_sev = merge_sev$newMEs;
#=====================================================================================
#
#  Step 8: Plot dendrogram with the cut line 'MEDissThres'
#
#=====================================================================================
sizeGrWindow(12, 9)
plotDendroAndColors(geneTree_sign, cbind(dynamicColors_sign, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
plotDendroAndColors(geneTree_sign_ModExp, cbind(dynamicColors_sign_ModExp, mergedColors_mod),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
plotDendroAndColors(geneTree_sign_SevExp, cbind(dynamicColors_sign_SevExp, mergedColors_sev),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
png("Analysis/Output/WGCNA/subseq_treatments_all/TimeSeries/Day_7.14.21_ClusterDendrogram_signed.png", 1000, 1000, pointsize=20)
plotDendroAndColors(geneTree_sign, cbind(dynamicColors_sign, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
dev.off()
# (2) Exposure to moderate treatment :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
png("Analysis/Output/WGCNA/subseq_treatments_all/TimeSeries/ModExposures_ClusterDendrogram_signed.png", 1000, 1000, pointsize=20)
plotDendroAndColors(geneTree_sign_ModExp, cbind(dynamicColors_sign_ModExp, mergedColors_mod),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
dev.off()
# (3) Exposure to severe treatment :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
png("Analysis/Output/WGCNA/subseq_treatments_all/TimeSeries/SevExposures_ClusterDendrogram_signed.png", 1000, 1000, pointsize=20)
plotDendroAndColors(geneTree_sign_SevExp, cbind(dynamicColors_sign_SevExp, mergedColors_sev),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
dev.off()
moduleColors = dynamicColors_sign # if you DO NOT want to merged colors
colorOrder = c("grey", standardColors(50)); # Construct numerical labels corresponding to the colors
moduleLabels = match(moduleColors, colorOrder)-1;
MEs = mergedMEs # CALL THIS IF YOU WANT TO MERGED MODULE EIGENGENS - IF NOW LEAVE COMMMENTED OUT
# (2) Exposure to moderate treatment :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
moduleColors_mod = dynamicColors_sign_ModExp # if you DO NOT want to merged colors
colorOrder = c("grey", standardColors(50)); # Construct numerical labels corresponding to the colors
moduleLabels_mod = match(moduleColors_mod, colorOrder)-1;
MEs_mod = mergedMEs_mod # CALL THIS IF YOU WANT TO MERGED MODULE EIGENGENS - IF NOW LEAVE COMMMENTED OUT
# (3) Exposure to severe treatment :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
moduleColors_sev = dynamicColors_sign_SevExp # if you DO NOT want to merged colors
colorOrder = c("grey", standardColors(50)); # Construct numerical labels corresponding to the colors
moduleLabels_sev = match(moduleColors_sev, colorOrder)-1;
MEs_sev = mergedMEs_sev # CALL THIS IF YOU WANT TO MERGED MODULE EIGENGENS - IF NOW LEAVE COMMMENTED OUT
# Save module colors and labels for use in subsequent parts
# save(MEs, moduleLabels, moduleColors, geneTree, file = "Analysis/Output/WGCNA/subseq_treatments_all/Day14/Day14-networkConstruction-stepByStep.RData")
# write csv - save the module eigengenes
write.csv(MEs, file = "Analysis/Output/WGCNA/subseq_treatments_all/TimeSeries/All.WGCNA_ModulEigengenes.csv")
write.csv(MEs_mod, file = "Analysis/Output/WGCNA/subseq_treatments_all/TimeSeries/ModExposures.WGCNA_ModulEigengenes.csv")
write.csv(MEs_sev, file = "Analysis/Output/WGCNA/subseq_treatments_all/TimeSeries/SevExposures.WGCNA_ModulEigengenes.csv")
TimeSeries.Traits$Primary_Treatment <- as.factor(TimeSeries.Traits$Primary_Treatment)
TimeSeries.Traits$Primary_Treatment <- as.numeric(TimeSeries.Traits$Primary_Treatment)
TimeSeries.Traits$Day  <- as.factor( sub("_.*","",TimeSeries.Traits$Day_Treatment) )
TimeSeries.Traits$Day  <- as.numeric(TimeSeries.Traits$Day )
TimeSeries.Traits$Day_Treatment <- as.factor(TimeSeries.Traits$Day_Treatment)
TimeSeries.Traits$Day_Treatment <- as.numeric(TimeSeries.Traits$Day_Treatment)
#=====================================================================================
#
#  Prepare for  module trait associations - trait data as factors
#
#=====================================================================================
TimeSeries.Traits      <- read.csv(file="Analysis/Output/WGCNA/subseq_treatments_all/TimeSeries/All.TraitData_cut.csv", sep=',', header=TRUE)
TimeSeries.Traits_mod  <- read.csv(file="Analysis/Output/WGCNA/subseq_treatments_all/TimeSeries/ModExposures.TraitData_cut.csv", sep=',', header=TRUE)
TimeSeries.Traits_Sev  <- read.csv(file="Analysis/Output/WGCNA/subseq_treatments_all/TimeSeries/SevExposures.TraitData_cut.csv", sep=',', header=TRUE)
TimeSeries.Traits$Primary_Treatment <- as.factor(TimeSeries.Traits$Primary_Treatment)
TimeSeries.Traits$Primary_Treatment <- as.numeric(TimeSeries.Traits$Primary_Treatment)
TimeSeries.Traits$Day  <- as.factor( sub("_.*","",TimeSeries.Traits$Day_Treatment) )
TimeSeries.Traits$Day  <- as.numeric(TimeSeries.Traits$Day )
TimeSeries.Traits$Day_Treatment <- as.factor(TimeSeries.Traits$Day_Treatment)
TimeSeries.Traits$Day_Treatment <- as.numeric(TimeSeries.Traits$Day_Treatment)
TimeSeries.Traits_mod
TimeSeries.Traits$Primary_Treatment <- as.factor(TimeSeries.Traits$Primary_Treatment)
TimeSeries.Traits$Primary_Treatment <- as.numeric(TimeSeries.Traits$Primary_Treatment)
TimeSeries.Traits$Day  <- as.factor( sub("_.*","",TimeSeries.Traits$Day_Treatment) )
TimeSeries.Traits$Day  <- as.numeric(TimeSeries.Traits$Day )
TimeSeries.Traits$Day_Treatment <- as.factor(TimeSeries.Traits$Day_Treatment)
TimeSeries.Traits$Day_Treatment <- as.numeric(TimeSeries.Traits$Day_Treatment)
# (2) Exposure to moderate treatment :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
TimeSeries.Traits_mod$PrimSecThird <- as.factor(TimeSeries.Traits_mod$PrimSecThird)
TimeSeries.Traits_mod$PrimSecThird <- as.numeric(TimeSeries.Traits_mod$PrimSecThird)
# (3) Exposure to severe treatment :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
TimeSeries.Traits_Sev$PrimSecThird <- as.factor(TimeSeries.Traits_Sev$PrimSecThird)
TimeSeries.Traits_Sev$PrimSecThird <- as.numeric(TimeSeries.Traits_Sev$PrimSecThird)
# Treatment_Primary
moduleTraitCor_Primary = cor(MEs, Treatment_Primary, use = "p");
moduleTraitPvalue_Primary = corPvalueStudent(moduleTraitCor_Primary, nSamples);
# Day
moduleTraitCor_Days = cor(MEs, Days, use = "p");
moduleTraitPvalue_Days = corPvalueStudent(moduleTraitCor_Days, nSamples);
# Day_Treat
moduleTraitCor_Day_Treat = cor(MEs, Day_Treat, use = "p");
moduleTraitPvalue_Day_Treat = corPvalueStudent(moduleTraitCor_Day_Treat, nSamples);
moduleTraitCor_ModExp = cor(MEs_mod, Day_Treat_mod, use = "p");
moduleTraitPvalue__ModExp = corPvalueStudent(moduleTraitCor_Day_Treat, nSamples);
moduleTraitCor_SevExp = cor(MEs_sev, Day_Treat_sev, use = "p");
moduleTraitPvalue_SevExp = corPvalueStudent(moduleTraitCor_SevExp, nSamples);
sizeGrWindow(10,10)
PRIMARYTreatments.matrix <-  paste(signif(moduleTraitCor_Primary, 2), "\n(",
signif(moduleTraitPvalue_Primary, 1), ")", sep = "") # Will display correlations and their p-values
par(mar = c(8, 9.5, 5, 3));
png("Analysis/Output/WGCNA/subseq_treatments_all/TimeSeries/heatmaps/Day2_7.14.21_Treatments_Primary_heatmap2.png", 500, 1000, pointsize=20) # Display the correlation values within a heatmap plot
dev.off()
labeledHeatmap(Matrix = moduleTraitCor_Primary,
xLabels = names(Treatment_Primary),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = TRUE,
colors = blueWhiteRed(50),
textMatrix = PRIMARYTreatments.matrix,
setStdMargins = FALSE,
cex.text = 1,
zlim = c(-0.6,0.6),
main = paste("Module-trait relationships - Primary Treatment"))
png("Analysis/Output/WGCNA/subseq_treatments_all/TimeSeries/heatmaps/All_Treatments_Primary_heatmap2.png", 500, 1000, pointsize=20) # Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor_Primary,
xLabels = names(Treatment_Primary),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = TRUE,
colors = blueWhiteRed(50),
textMatrix = PRIMARYTreatments.matrix,
setStdMargins = FALSE,
cex.text = 1,
zlim = c(-0.6,0.6),
main = paste("Module-trait relationships - Primary Treatment"))
dev.off()
# this heatmap looks better
PRIMARYtreatment.text <-  as.matrix(signif(moduleTraitPvalue_Primary, 3))
pa = cluster::pam(PRIMARYtreatment.text, k = 4)
col_fun = colorRamp2(c(-0.5, 0, 0.5), c("blue", "white", "red"))
Heatmap(moduleTraitCor_Primary,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Day 21 WGCNA - Primary Treatment",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 1,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", PRIMARYtreatment.text[i, j]), x, y, gp = gpar(fontsize = 10))
})
pdf("Analysis/Output/WGCNA/subseq_treatments_all/TimeSeries/heatmaps/All_Treatments_Primary_heatmap.pdf", width=5, height=6)
Heatmap(moduleTraitCor_Primary,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Day 21 WGCNA - Primary Treatment",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 1,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", PRIMARYtreatment.text[i, j]), x, y, gp = gpar(fontsize = 10))
})
dev.off()
moduleTraitCor_Day_Treat = cor(MEs, Day_Treat, use = "p");
moduleTraitPvalue_Day_Treat = corPvalueStudent(moduleTraitCor_Day_Treat, nSamples);
sizeGrWindow(10,10)
Day_Treat.matrix <-  paste(signif(moduleTraitCor_Day_Treat, 2), "\n(",
signif(moduleTraitPvalue_Day_Treat, 3), ")", sep = "") # Will display correlations and their p-values
labeledHeatmap(Matrix = moduleTraitCor_Day_Treat,
xLabels = names(Day_Treat),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = TRUE,
colors = blueWhiteRed(50),
textMatrix = Day_Treat.matrix,
setStdMargins = FALSE,
cex.text = 1,
zlim = c(-0.6,0.6),
main = paste("Module-trait relationships - Third Treatment"))
png("Analysis/Output/WGCNA/subseq_treatments_all/TimeSeries/heatmaps/All_Group_heatmap2.png", 500, 1000, pointsize=20) # Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor_Day_Treat,
xLabels = names(Day_Treat),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = TRUE,
colors = blueWhiteRed(50),
textMatrix = Day_Treat.matrix,
setStdMargins = FALSE,
cex.text = 1,
zlim = c(-0.6,0.6),
main = paste("Module-trait relationships - Third Treatment"))
dev.off()
Day_Treat_text<-  as.matrix(signif(moduleTraitPvalue_Day_Treat, 4))
Day_Treat_cor <-  as.matrix(signif(moduleTraitCor_Day_Treat, 4))
pa = cluster::pam(Day_Treat_cor, k = 3)
col_fun = colorRamp2(c(-0.5, 0, 0.5), c("blue", "white", "red"))
Heatmap(moduleTraitCor_Day_Treat,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Timeseries WGCNA - Day_Treat",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 2,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", Day_Treat_text[i, j]), x, y, gp = gpar(fontsize = 10))
})
pdf("Analysis/Output/WGCNA/subseq_treatments_all/TimeSeries/heatmaps/DayTreat_Group_heatmap.pdf", width=5, height=6) # this heatmap looks better
Heatmap(moduleTraitCor_Day_Treat,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Timeseries WGCNA - Day_Treat",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 2,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", Day_Treat_text[i, j]), x, y, gp = gpar(fontsize = 10))
})
dev.off()
ModExp_text<-  as.matrix(signif(moduleTraitPvalue_ModExp, 4))
ModExpt_cor <-  as.matrix(signif(moduleTraitCor_ModExpt, 4))
ModExp_text<-  as.matrix(signif(moduleTraitPvalue_ModExp, 4))
ModExpt_cor <-  as.matrix(signif(moduleTraitCor_ModExpt, 4))
moduleTraitPvalue_ModExp
moduleTraitCor_ModExp = cor(MEs_mod, Day_Treat_mod, use = "p");
moduleTraitPvalue__ModExp = corPvalueStudent(moduleTraitCor_Day_Treat, nSamples);
moduleTraitCor_ModExp = cor(MEs_mod, Day_Treat_mod, use = "p");
moduleTraitCor_ModExp
moduleTraitPvalue_ModExp
moduleTraitPvalue_ModExp = corPvalueStudent(moduleTraitCor_ModExp, nSamples);
ModExp_text<-  as.matrix(signif(moduleTraitPvalue_ModExp, 4))
ModExpt_cor <-  as.matrix(signif(moduleTraitCor_ModExpt, 4))
ModExpt_cor <-  as.matrix(signif(moduleTraitCor_ModExp, 4))
pa = cluster::pam(ModExpt_cor, k = 3)
col_fun = colorRamp2(c(-0.5, 0, 0.5), c("blue", "white", "red"))
Heatmap(moduleTraitCor_ModExp,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Timeseries WGCNA - Day_Treat",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 2,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", ModExp_text[i, j]), x, y, gp = gpar(fontsize = 10))
})
Heatmap(moduleTraitCor_ModExp,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Timeseries WGCNA - Day_Treat",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 4,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", ModExp_text[i, j]), x, y, gp = gpar(fontsize = 10))
})
pa = cluster::pam(ModExpt_cor, k = 5)
Heatmap(moduleTraitCor_ModExp,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Timeseries WGCNA - Day_Treat",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 4,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", ModExp_text[i, j]), x, y, gp = gpar(fontsize = 10))
})
Heatmap(moduleTraitCor_ModExp,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Timeseries WGCNA - Day_Treat",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 5,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", ModExp_text[i, j]), x, y, gp = gpar(fontsize = 10))
})
pa = cluster::pam(ModExpt_cor, k = 2)
Heatmap(moduleTraitCor_ModExp,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Timeseries WGCNA - Day_Treat",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 5,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", ModExp_text[i, j]), x, y, gp = gpar(fontsize = 10))
})
pa = cluster::pam(ModExpt_cor, k = 3)
Heatmap(moduleTraitCor_ModExp,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Timeseries WGCNA - Day_Treat",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 5,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", ModExp_text[i, j]), x, y, gp = gpar(fontsize = 10))
})
pdf("Analysis/Output/WGCNA/subseq_treatments_all/TimeSeries/heatmaps/ModExposures_Group_heatmap.pdf", width=5, height=6) # this heatmap looks better
Heatmap(moduleTraitCor_ModExp,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Timeseries WGCNA - Day_Treat",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 5,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", ModExp_text[i, j]), x, y, gp = gpar(fontsize = 10))
})
dev.off()
SevExp_text<-  as.matrix(signif(moduleTraitPvalue_SevExp, 4))
SevExpt_cor <-  as.matrix(signif(moduleTraitCor_SevExp, 4))
pa = cluster::pam(ModExpt_cor, k = 3)
col_fun = colorRamp2(c(-0.5, 0, 0.5), c("blue", "white", "red"))
Heatmap(moduleTraitCor_SevExp,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Timeseries WGCNA - Day_Treat",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 5,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", SevExp_text[i, j]), x, y, gp = gpar(fontsize = 10))
})
pdf("Analysis/Output/WGCNA/subseq_treatments_all/TimeSeries/heatmaps/SevExposures_Group_heatmap.pdf", width=5, height=6) # this heatmap looks better
Heatmap(moduleTraitCor_SevExp,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Timeseries WGCNA - Day_Treat",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 5,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", SevExp_text[i, j]), x, y, gp = gpar(fontsize = 10))
})
dev.off()
Day_Treat_text<-  as.matrix(signif(moduleTraitPvalue_Day_Treat, 4))
Day_Treat_cor <-  as.matrix(signif(moduleTraitCor_Day_Treat, 4))
pa = cluster::pam(Day_Treat_cor, k = 3)
col_fun = colorRamp2(c(-0.5, 0, 0.5), c("blue", "white", "red"))
pdf("Analysis/Output/WGCNA/subseq_treatments_all/TimeSeries/heatmaps/All_Group_heatmap.pdf", width=5, height=6) # this heatmap looks better
Heatmap(moduleTraitCor_Day_Treat,
name = "gene_cor",
rect_gp = gpar(col = "grey", lwd = 1),
column_title = "Timeseries WGCNA - Day_Treat",
column_title_gp = gpar(fontsize = 12, fontface = "bold"),
# row_title = "WGCNA modules",
#row_km = 4,
column_km = 2,
row_split = paste0("clstr", pa$clustering),
row_gap = unit(5, "mm"),
column_gap = unit(5, "mm"),
# grid.text(matrix(textMatrix)),
# border = TRUE,
border = TRUE,
col = col_fun,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1f", Day_Treat_text[i, j]), x, y, gp = gpar(fontsize = 10))
})
dev.off()
