DWNREG.d21.primary
UPREG.d21.primary
BiocManager::install("ViSEAGO")
library("ViSEAGO", lib.loc="~/R/win-library/4.0")
background<-scan(
"background.txt",
quiet=TRUE,
what=""
)
background<-scan(
UPREG.d21.primary,
quiet=TRUE,
what=""
)
annotation.txt <- read.txt(file="Panopea-generosa-genes-annotations.txt", sep=',', header=TRUE)
annotation.txt <- read.delim(file="Panopea-generosa-genes-annotations.txt", sep='.', header=F)
annotation.txt
annotation.df <- as.data.frame(annotation.txt)
annotation.df
head(annotation.txt)
head(annotation.txt)
head(annotation.df)
annotation.txt <- read.delim2(file="Panopea-generosa-genes-annotations.txt", header=F)
annotation.df <- as.data.frame(annotation.txt)
head(annotation.df)
annotation.df <- annotation.df %>% dplyr::select(c('V1', 'V5'))
colnames(df)[c(1:2)]
head(annotation.df)
colnames(df)[,c(1:2)]
colnames(df)[1:2]
colnames(df)[1]
colnames(annotation.df)[1:2]
colnames(annotation.df)[1:2] <- c('Gene.ID', 'Uniprot.ID')
head(annotation.df)
UPREG.d21.primary
grep?
background<-scan(
"background.txt",
quiet=TRUE,
what=""
)
?grep
head(annotation.df)
annotation.df <- annotation.df %>% dplyr::select(c('V1', 'V5', 'V7'))
# load and call desired columns of the annotation file (Uniprot IDs for each gene) - Roberts Lab (Sam White) compelted this annotation - open online on osf
annotation.txt <- read.delim2(file="Panopea-generosa-genes-annotations.txt", header=F)
annotation.df <- as.data.frame(annotation.txt)
annotation.df <- annotation.df %>% dplyr::select(c('V1', 'V5', 'V7'))
colnames(annotation.df)[1:2] <- c('Gene.ID', 'Uniprot.ID', 'GO.terms')
colnames(annotation.df)[1:3] <- c('Gene.ID', 'Uniprot.ID', 'GO.terms')
annotation.df <- as.data.frame(annotation.txt)
annotation.df <- annotation.df %>% dplyr::select(c('V1', 'V5', 'V7'))
colnames(annotation.df)[1:3] <- c('Gene.ID', 'Uniprot.ID', 'GO.terms')
head(annotation.df)
annotation.df <- as.data.frame(annotation.txt)
annotation.df <- annotation.df %>% dplyr::select(c('V1', 'V5', 'V8'))
colnames(annotation.df)[1:3] <- c('Gene.ID', 'Uniprot.ID', 'GO.terms')
head(annotation.df)
fix(annotation.df)
head(annotation.df)
View(annotation.df)
spec.char <- "a1~!@#$%^&*(){}_+:\"<>?,./;'[]-=" # call special characers
annotation.df$GO.terms <- str_replace_all(notation.df$GO.terms, "[[:punct:]]", " ")
spec.char <- "a1~!@#$%^&*(){}_+:\"<>?,./;'[]-=" # call special characers
gsub("[[:punct:]]", " ", spec.char)
annotation.df$GO.terms <- gsub("[[:punct:]]", " ", annotation.df$GO.terms)
View(annotation.df)
x <- "a1~!@#$%^&*(){}_+:\"<>?,./;'[]-=" #or whatever
str_replace_all(x, "[[:;:]]", " ")
str_replace_all(x, ";", " ")
gsub(";", " ", x)
# load and call desired columns of the annotation file (Uniprot IDs for each gene) - Roberts Lab (Sam White) compelted this annotation - open online on osf
annotation.txt <- read.delim2(file="Panopea-generosa-genes-annotations.txt", header=F)
annotation.df <- as.data.frame(annotation.txt)
annotation.df <- annotation.df %>% dplyr::select(c('V1', 'V5', 'V8'))
colnames(annotation.df)[1:3] <- c('Gene.ID', 'Uniprot.ID', 'GO.terms')
annotation.df$GO.terms <- gsub(";", "", annotation.df$GO.terms) # remove the ; delimiter and replace with nothing - already tabbed
View(annotation.df)
resdata.d21.All.Primary_Treatment_M_vs_A
# load and call desired columns of the annotation file (Uniprot IDs for each gene) - Roberts Lab (Sam White) compelted this annotation - open online on osf
annotation.txt <- read.delim2(file="Panopea-generosa-genes-annotations.txt", header=F)
annotation.df <- as.data.frame(annotation.txt)
annotation.df <- annotation.df %>% dplyr::select(c('V1','V8')) # call gene name and the GO terms - (Uniprot ID 'V5')
colnames(annotation.df)[1:2] <- c('Gene', 'GO.terms')
annotation.df$GO.terms <- gsub(";", "", annotation.df$GO.terms) # remove the ; delimiter and replace with nothing - already tabbed
View(annotation.df)
# Day 21 primary treatment data
resdata.d21.All.Primary_Treatment_M_vs_A # 221 DEGS (log2FoldChange > 1; < -1 & padj < 0.05) on day 21 in response to Primary treatment (initial Mdoerate vs. Ambient conditioning)
DEGS.d21.primary<- resdata.d21.All.Primary_Treatment_M_vs_A %>%  dplyr::filter(padj<0.05)
nrow(DEGS.d21.primary) # 221 - we have all DEGs now
UPREG.d21.primary <- DEGS.d21.primary %>%  dplyr::filter(log2FoldChange > 1) # call upregulated genes
DWNREG.d21.primary <- DEGS.d21.primary %>%  dplyr::filter(log2FoldChange < 1) # call downregulated genes
nrow(UPREG.d21.primary) + nrow(DWNREG.d21.primary) # should be equal to 221
UPREG_GO <- merge(UPREG.d21.primary, annotation.df, by = "Gene)"
UPREG_GO <- merge(UPREG.d21.primary, annotation.df, by = "Gene")
UPREG_GO
View(UPREG_GO)
UPREG.d21.primary
UPREG_WEGO <- UPREG_GO %>% dplyr::select(c('Gene', 'GO.terms'))
UPREG_WEGO
write.table(UPREG_WEGO, file = “UPREG_WEGO.txt”, sep = “”)
UPREG_WEGO
write.table(UPREG_WEGO, file = “UPREG_WEGO.txt” , sep = “”)
write.table(UPREG_WEGO, file = UPREG_WEGO.txt, sep = '')
write.table(UPREG_WEGO, file = "UPREG_WEGO.txt", sep = "\t",
row.names = NA, col.names = NA)
write.table(UPREG_WEGO, file = "UPREG_WEGO.txt", sep = "\t",
row.names = FALSE, col.names = NA)
write.table(UPREG_WEGO, file = "UPREG_WEGO.txt", sep = "\t",
row.names = FALSE, col.names = FALSE)
write.table(UPREG_WEGO, file = "UPREG_WEGO.txt",
row.names = FALSE, col.names = FALSE)
write.table(UPREG_WEGO, file = "UPREG_WEGO.txt",
row.names = FALSE, col.names = FALSE)
write.table(UPREG_WEGO, file = "UPREG_WEGO.txt", quote=FALSE, row.names = FALSE, col.names = FALSE)
write.table(UPREG_WEGO, file = "RAnalysis/GO/Day21.Upreg.Primary.WEGO.txt", quote=FALSE, row.names = FALSE, col.names = FALSE)
DWNREG_GO <- merge(DWNREG.d21.primary, annotation.df, by = "Gene")
DWNREG_WEGO <- UPREG_GO %>% dplyr::select(c('Gene', 'GO.terms'))
write.table(DWNREG_WEGO, file = "RAnalysis/GO/Day21.Downreg.Primary.WEGO.txt", quote=FALSE, row.names = FALSE, col.names = FALSE)
UPREG_GO$GO.terms <- gsub("NA", "", UPREG_GO$GO.terms)
UPREG_WEGO
# write to GO folder
write.table(UPREG_WEGO, file = "RAnalysis/GO/Day21.Upreg.Primary.WEGO.txt", quote=FALSE, row.names = FALSE, col.names = FALSE)
UPREG_GO$GO.terms
UPREG_GO$GO.terms <- gsub("NA", " ", UPREG_GO$GO.terms)
UPREG_GO$GO.terms
UPREG_GO$GO.terms[is.na(UPREG_GO$GO.terms)] <- " "
UPREG_GO$GO.terms
# write to GO folder
write.table(UPREG_WEGO, file = "RAnalysis/GO/Day21.Upreg.Primary.WEGO.txt", quote=FALSE, row.names = FALSE, col.names = FALSE)
View(UPREG_GO)
UPREG_GO <- merge(UPREG.d21.primary, annotation.df, by = "Gene")
UPREG_WEGO <- UPREG_GO %>% dplyr::select(c('Gene', 'GO.terms'))
UPREG_GO <- merge(UPREG.d21.primary, annotation.df, by = "Gene")
UPREG_WEGO <- UPREG_GO %>% dplyr::select(c('Gene', 'GO.terms'))
UPREG_WEGO$GO.terms[is.na(UPREG_WEGO$GO.terms)] <- " "
View(UPREG_WEGO)
# write to GO folder
write.table(UPREG_WEGO, file = "RAnalysis/GO/Day21.Upreg.Primary.WEGO.txt", quote=FALSE, row.names = FALSE, col.names = FALSE)
DWNREG_WEGO$GO.terms[is.na(DWNREG_WEGO$GO.terms)] <- " " # make NA blank
View(DWNREG_WEGO)
# write to GO folder
write.table(UPREG_WEGO, file = "RAnalysis/GO/Day21.Upreg.Primary.WEGO.txt", quote=FALSE, row.names = FALSE, col.names = FALSE)
write.table(DWNREG_WEGO, file = "RAnalysis/GO/Day21.Downreg.Primary.WEGO.txt", quote=FALSE, row.names = FALSE, col.names = FALSE)
annotation.df <- as.data.frame(annotation.txt)
annotation.df <- annotation.df %>% dplyr::select(c('V1','V8')) # call gene name and the GO terms - (Uniprot ID 'V5')
colnames(annotation.df)[1:2] <- c('Gene', 'GO.terms')
annotation.df$GO.terms <- gsub(";", " ", annotation.df$GO.terms) # remove the ; delimiter and replace with nothing - already tabbed
# Day 21 primary treatment data
resdata.d21.All.Primary_Treatment_M_vs_A # 221 DEGS (log2FoldChange > 1; < -1 & padj < 0.05) on day 21 in response to Primary treatment (initial Mdoerate vs. Ambient conditioning)
DEGS.d21.primary<- resdata.d21.All.Primary_Treatment_M_vs_A %>%  dplyr::filter(padj<0.05)
nrow(DEGS.d21.primary) # 221 - we have all DEGs now
UPREG.d21.primary <- DEGS.d21.primary %>%  dplyr::filter(log2FoldChange > 1) # call upregulated genes
DWNREG.d21.primary <- DEGS.d21.primary %>%  dplyr::filter(log2FoldChange < 1) # call downregulated genes
nrow(UPREG.d21.primary) + nrow(DWNREG.d21.primary) # should be equal to 221
UPREG_GO <- merge(UPREG.d21.primary, annotation.df, by = "Gene")
UPREG_WEGO <- UPREG_GO %>% dplyr::select(c('Gene', 'GO.terms'))
UPREG_WEGO$GO.terms[is.na(UPREG_WEGO$GO.terms)] <- " " # make NA blank
View(UPREG_WEGO)
DWNREG_GO <- merge(DWNREG.d21.primary, annotation.df, by = "Gene")
DWNREG_WEGO <- UPREG_GO %>% dplyr::select(c('Gene', 'GO.terms'))
DWNREG_WEGO$GO.terms[is.na(DWNREG_WEGO$GO.terms)] <- " " # make NA blank
# write to GO folder
write.table(UPREG_WEGO, file = "RAnalysis/GO/Day21.Upreg.Primary.WEGO.txt", quote=FALSE, row.names = FALSE, col.names = FALSE)
write.table(DWNREG_WEGO, file = "RAnalysis/GO/Day21.Downreg.Primary.WEGO.txt", quote=FALSE, row.names = FALSE, col.names = FALSE)
DWNREG.d21.primary <- DEGS.d21.primary %>%  dplyr::filter(log2FoldChange < 1) # call downregulated genes
nrow(UPREG.d21.primary) + nrow(DWNREG.d21.primary) # should be equal to 221
nrow(UPREG.d21.primary)
nrow(DWNREG.d21.primary)
UPREG.d21.primary
DWNREG.d21.primary
DWNREG_GO <- merge(DWNREG.d21.primary, annotation.df, by = "Gene")
DWNREG_WEGO <- UPREG_GO %>% dplyr::select(c('Gene', 'GO.terms'))
DWNREG_WEGO$GO.terms[is.na(DWNREG_WEGO$GO.terms)] <- " " # make NA blank
View(DWNREG_WEGO)
View(UPREG_WEGO)
DWNREG_WEGO <- DWNREG_GO %>% dplyr::select(c('Gene', 'GO.terms'))
DWNREG_WEGO$GO.terms[is.na(DWNREG_WEGO$GO.terms)] <- " " # make NA blank
View(DWNREG_WEGO)
# write to GO folder
write.table(UPREG_WEGO, file = "RAnalysis/GO/Day21.Upreg.Primary.WEGO.txt", quote=FALSE, row.names = FALSE, col.names = FALSE)
write.table(DWNREG_WEGO, file = "RAnalysis/GO/Day21.Downreg.Primary.WEGO.txt", quote=FALSE, row.names = FALSE, col.names = FALSE)
# write to GO folder
write.table(UPREG_WEGO, file = "RAnalysis/GO/Day21.Upreg.Primary.WEGO", quote=FALSE, row.names = FALSE, col.names = FALSE)
write.table(DWNREG_WEGO, file = "RAnalysis/GO/Day21.Downreg.Primary.WEGO", quote=FALSE, row.names = FALSE, col.names = FALSE)
# write to GO folder
write.table(UPREG_WEGO, file = "RAnalysis/GO/Day21_Upreg_Primary_WEGO", quote=FALSE, row.names = FALSE, col.names = FALSE)
write.table(DWNREG_WEGO, file = "RAnalysis/GO/Day21_Downreg_Primary_WEGO", quote=FALSE, row.names = FALSE, col.names = FALSE)
resdata.d14.All.Primary_Treatment_M_vs_A
===============================================
exp.data.d14$Primary_Treatment <- factor(exp.data.d14$Primary_Treatment) # change Primary_Treatment to factor
exp.data.d14$Second_Treament <- factor(exp.data.d14$Second_Treament) # change Second_Treament to factor
exp.data.d14$Time <- factor(exp.data.d14$Time) # change Time to factor
#==================== #
# Primary + Second; additive effect
# format Experiment/design dataframe into matrix
exp.data.d14.PRIM_SEC <- exp.data.d14 %>% dplyr::select(c('Sample.Name', 'Primary_Treatment', 'Second_Treament', 'Time')) # coondense dataset to build target matrix
exp.data.d14.PRIM_SEC <- data.frame(exp.data.d14.PRIM_SEC[,-1], row.names=exp.data.d14.PRIM_SEC[,1]) # move Sample.Name column as row names
exp.data.d14.PRIM_SEC.mtx <- as.matrix(exp.data.d14.PRIM_SEC, row.names="Geoduck.ID") # create matrix
# CKECK THE cts.matrix AND THE exp.data.mtx
exp.data.d14.PRIM_SEC.mtx <- exp.data.d14.PRIM_SEC.mtx[match(colnames(cts.merged.d14),rownames(exp.data.d14.PRIM_SEC.mtx)), ]
all(rownames(exp.data.d14.PRIM_SEC.mtx) %in% colnames(cts.matrix.d14.filtered)) # should be TRUE
all(rownames(exp.data.d14.PRIM_SEC.mtx) == colnames(cts.matrix.d14.filtered)) # should be TRUE
all(rownames(exp.data.d14.PRIM_SEC.mtx) == colnames(cts.matrix.d14.filtered))  # should be TRUE
# build dds
dds.d14 <- DESeqDataSetFromMatrix(countData = cts.matrix.d14.filtered,
colData = exp.data.d14.PRIM_SEC.mtx,
design = ~ Primary_Treatment+Second_Treament) # DESeq Data Set (dds) - design as ~Primary_Treatment
# dds.d14 # view dds
# prep for DESeq2
dds.d14$Primary_Treatment <- relevel(dds.d14$Primary_Treatment, ref = "A") # specify the reference level for count analysis - A = the control treatment
dds.d14$Second_Treament <- relevel(dds.d14$Second_Treament, ref = "A") # specify the reference level for count analysis - A = the control treatment
dds.d14$Time <- droplevels(dds.d14$Time) # drop levels of time
levels(dds.d14$Time) # NULL
levels(dds.d14$Primary_Treatment) #  levels for condition 'Treatment': "A" "M"
levels(dds.d14$Second_Treament) #  levels for condition 'Treatment': "A" "M" "S"
design(dds.d14) # view the design we have specified
ncol(dds.d14) # 35 cols - Good
nrow(dds.d14)  # 8541 (10 CPM) 14241 (3 CPM)
# DEG ANALYSIS READY!!
# ------------------------------------------------------------------------------------------------------------------------------------------------- #
# Interaction term '...INT': All Treatment ( AA, AM, AS, MM, MA, MS)
# format Experiment/design dataframe into matrix
exp.data.d14.INT <- exp.data.d14 %>% dplyr::select(c('Sample.Name', 'All_Treatment', 'Time')) # coondense dataset to build target matrix
exp.data.d14.INT <- data.frame(exp.data.d14.INT[,-1], row.names=exp.data.d14.INT[,1]) # move Sample.Name column as row names
exp.data.d14.INT.mtx <- as.matrix(exp.data.d14.INT, row.names="Geoduck.ID") # create matrix
# CKECK THE cts.matrix AND THE exp.data.mtx
exp.data.d14.INT.mtx <- exp.data.d14.INT.mtx[match(colnames(cts.merged.d14),rownames(exp.data.d14.INT.mtx)), ]
all(rownames(exp.data.d14.INT.mtx) %in% colnames(cts.matrix.d14.filtered)) # should be TRUE
all(rownames(exp.data.d14.INT.mtx) == colnames(cts.matrix.d14.filtered)) # should be TRUE
all(rownames(exp.data.d14.INT.mtx) == colnames(cts.matrix.d14.filtered))  # should be TRUE
# build dds
dds.d14.INT <- DESeqDataSetFromMatrix(countData = cts.matrix.d14.filtered,
colData = exp.data.d14.INT.mtx,
design = ~ All_Treatment) # DESeq Data Set (dds) - design as ~All_Treatment
# dds.d14 # view dds
# prep for DESeq2
dds.d14.INT$All_Treatment <- relevel(dds.d14.INT$All_Treatment, ref = "AA") # specify the reference level for count analysis - A = the control treatment
dds.d14.INT$Time <- droplevels(dds.d14.INT$Time) # drop levels of time
levels(dds.d14$Time) # NULL
levels(dds.d14.INT$All_Treatment) #  levels for condition 'Treatment': "AA" "AM" "AS" "MA" "MM" "MS"
design(dds.d14.INT) # view the design we have specified
ncol(dds.d14.INT) # 35 cols - Good
nrow(dds.d14.INT)  # 8541 (10 CPM) 14241 (3 CPM)
# Primary + Secondary Treatment  =========================================================================================== #
nrow(dds.d14) # 8456 total genes pre filtered; FDR cutoff of 0.1 = 845.6 false positives; 0.05 = 422.8 flase positives
dds.d14 <- DESeq(dds.d14) # wait for this to complete....
resultsNames(dds.d14) # view the names of your results model
resd14.all.primary_M_vs_A<- results(dds.d14, name="Primary_Treatment_M_vs_A", alpha = 0.05)
hist(resd14.all.primary_M_vs_A$pvalue, breaks=20, col="grey") # view histogram,  about 425 genes are likely false positives, alpha = 0.0
abline(h=(nrow(dds.d14)*0.05),col="red") # add line at expected 5% false positive
table(resd14.all.primary_M_vs_A$padj<0.05) #  502 DEGs
resd14.all.primary_M_vs_A <- resd14.all.primary_M_vs_A[order(resd14.all.primary_M_vs_A$padj), ] ## Order by adjusted p-value
resdata.d14.all.prim.M_vs_A  <- merge(as.data.frame(resd14.all.primary_M_vs_A), as.data.frame(counts(dds.d14, normalized=TRUE)), by="row.names", sort=FALSE) ## Merge with normalized count data
names(resdata.d14.all.prim.M_vs_A)[1] <- "Gene" # assign col 1
resd14.all.second_M_vs_A<- results(dds.d14, name="Second_Treament_M_vs_A", alpha = 0.05) # FDR 5%
hist(resd14.all.second_M_vs_A$pvalue, breaks=20, col="grey") # view histogram,  about 425 genes are likely false positives, alpha = 0.05 FDR is good!
abline(h=(nrow(dds.d14)*0.05),col="red") # add line at expected 5% false positive
table(resd14.all.second_M_vs_A$padj<0.05) # 0 DEGs
resd14.all.second_M_vs_A <- resd14.all.second_M_vs_A[order(resd14.all.second_M_vs_A$padj), ] ## Order by adjusted p-value
resdata.d14.second_M_vs_A  <- merge(as.data.frame(resd14.all.second_M_vs_A), as.data.frame(counts(dds.d14, normalized=TRUE)), by="row.names", sort=FALSE) ## Merge with normalized count data
names(resdata.d14.second_M_vs_A)[1] <- "Gene" # assign col 1
resd14.all.second_S_vs_A<- results(dds.d14, name="Second_Treament_S_vs_A", alpha = 0.05) # FDR 5%
hist(resd14.all.second_S_vs_A$pvalue, breaks=20, col="grey") # view histogram,  about 425 genes are likely false positives, alpha = 0.05 FDR is good!
abline(h=(nrow(dds.d14)*0.05),col="red") # add line at expected 5% false positive
table(resd14.all.second_S_vs_A$padj<0.05) # 1 DEGs
resd14.all.second_S_vs_A <- resd14.all.second_S_vs_A[order(resd14.all.second_S_vs_A$padj), ] ## Order by adjusted p-value
resdata.d14.all.second_S_vs_A    <- merge(as.data.frame(resd14.all.second_S_vs_A), as.data.frame(counts(dds.d14, normalized=TRUE)), by="row.names", sort=FALSE) ## Merge with normalized count data
names(resdata.d14.all.second_S_vs_A)[1] <- "Gene" # assign col 1
resdata.d14.All.Primary_Treatment_M_vs_A
# Day 14  primary treatment data  ======================================================================================
resd14.all.primary_M_vs_A # 214 DEGS (log2FoldChange > 1; < -1 & padj < 0.05) on day 14 in response to Primary treatment (initial Mdoerate vs. Ambient conditioning)
DEGS.d14.primary<- resd14.all.primary_M_vs_A %>%  dplyr::filter(padj<0.05)
resd14.all.primary_M_vs_A
# Day 14  primary treatment data  ======================================================================================
resdata.d14.all.prim.M_vs_A # 5002 DEGS (log2FoldChange > 1; < -1 & padj < 0.05) on day 14 in response to Primary treatment (initial Mdoerate vs. Ambient conditioning)
DEGS.d14.primary<- resdata.d14.all.prim.M_vs_A %>%  dplyr::filter(padj<0.05)
nrow(DEGS.d14.primary) # 214 - we have all DEGs now
UPREG.d14.primary <- DEGS.d14.primary %>%  dplyr::filter(log2FoldChange > 1) # call upregulated genes
DWNREG.d14.primary <- DEGS.d14.primary %>%  dplyr::filter(log2FoldChange < 1) # call downregulated genes
nrow(UPREG.d14.primary) + nrow(DWNREG.d14.primary) # should be equal to 214
UPREG_GO <- merge(UPREG.d14.primary, annotation.df, by = "Gene")
UPREG_WEGO <- UPREG_GO %>% dplyr::select(c('Gene', 'GO.terms'))
UPREG_WEGO$GO.terms[is.na(UPREG_WEGO$GO.terms)] <- " " # make NA blank
View(UPREG_WEGO)
D14.UPREG_GO <- merge(UPREG.d14.primary, annotation.df, by = "Gene")
D14.UPREG_WEGO <- D14.UPREG_GO %>% dplyr::select(c('Gene', 'GO.terms'))
D14.UPREG_WEGO$GO.terms[is.na(UPREG_WEGO$GO.terms)] <- " " # make NA blank
View(D14.UPREG_WEGO)
D14.UPREG_WEGO$GO.terms[is.na(D14.UPREG_WEGO$GO.terms)] <- " " # make NA blank
D14.UPREG_GO <- merge(UPREG.d14.primary, annotation.df, by = "Gene")
D14.UPREG_WEGO <- D14.UPREG_GO %>% dplyr::select(c('Gene', 'GO.terms'))
D14.UPREG_WEGO$GO.terms[is.na(D14.UPREG_WEGO$GO.terms)] <- " " # make NA blank
View(D14.UPREG_WEGO)
DWNREG.d14.primary
D14.DWNREG_GO <- merge(DWNREG.d14.primary, annotation.df, by = "Gene")
D14.DWNREG_WEGO <- D14.DWNREG_GO %>% dplyr::select(c('Gene', 'GO.terms'))
D14.DWNREG_WEGO$GO.terms[is.na(D14.DWNREG_WEGO$GO.terms)] <- " " # make NA blank
View(D14.DWNREG_WEGO)
# write to GO folder
write.table(D14.UPREG_GO, file = "RAnalysis/GO/Day14_Upreg_Primary_WEGO", quote=FALSE, row.names = FALSE, col.names = FALSE) # call at 'Native Format' on  https://wego.genomics.cn/
write.table(D14.DWNREG_GO, file = "RAnalysis/GO/Day14_Downreg_Primary_WEGO", quote=FALSE, row.names = FALSE, col.names = FALSE) # call at 'Native Format' on  https://wego.genomics.cn/
nrow(DWNREG.d14.primary)
nrow(UPREG.d14.primary)
D14.UPREG_GO <- merge(UPREG.d14.primary, annotation.df, by = "Gene")
D14.UPREG_WEGO <- D14.UPREG_GO %>% dplyr::select(c('Gene', 'GO.terms'))
D14.UPREG_WEGO$GO.terms[is.na(D14.UPREG_WEGO$GO.terms)] <- " " # make NA blank
D14.UPREG_WEGO
View(D14.UPREG_WEGO)
nrow(UPREG.d14.primary)
View(D14.DWNREG_WEGO)
# write to GO folder
write.table(D14.UPREG_GO, file = "RAnalysis/GO/Day14_Upreg_Primary_WEGO", quote=FALSE, row.names = FALSE, col.names = FALSE) # call at 'Native Format' on  https://wego.genomics.cn/
write.table(D14.DWNREG_GO, file = "RAnalysis/GO/Day14_Downreg_Primary_WEGO", quote=FALSE, row.names = FALSE, col.names = FALSE) # call at 'Native Format' on  https://wego.genomics.cn/
D14.UPREG_GO <- merge(UPREG.d14.primary, annotation.df, by = "Gene")
D14.UPREG_WEGO <- D14.UPREG_GO %>% dplyr::select(c('Gene', 'GO.terms'))
D14.UPREG_WEGO$GO.terms[is.na(D14.UPREG_WEGO$GO.terms)] <- " " # make NA blank
# write to GO folder
write.table(D14.UPREG_WEGO, file = "RAnalysis/GO/Day14_Upreg_Primary_WEGO", quote=FALSE, row.names = FALSE, col.names = FALSE) # call at 'Native Format' on  https://wego.genomics.cn/
write.table(D14.DWNREG_WEGO, file = "RAnalysis/GO/Day14_Downreg_Primary_WEGO", quote=FALSE, row.names = FALSE, col.names = FALSE) # call at 'Native Format' on  https://wego.genomics.cn/
: TagSeq count matrix == 'cts.matrix.d7.filtered' (3 CPM in 50% samples)
# ==========================================================
exp.data.d7$Primary_Treatment <- factor(exp.data.d7$Primary_Treatment) # change Primary_Treatment to factor
exp.data.d7$Second_Treament <- factor(exp.data.d7$Second_Treament) # change Second_Treament to factor
exp.data.d7$Time <- factor(exp.data.d7$Time) # change Time to factor
#==================== #
# Primary*Second (ALL) Treatment
# format Experiment/design dataframe into matrix
exp.data.d7.PRIM_SEC <- exp.data.d7 %>% dplyr::select(c('Sample.Name', 'Primary_Treatment', 'Second_Treament', 'Time')) # coondense dataset to build target matrix
exp.data.d7.PRIM_SEC <- data.frame(exp.data.d7.PRIM_SEC[,-1], row.names=exp.data.d7.PRIM_SEC[,1]) # move Sample.Name column as row names
exp.data.d7.PRIM_SEC.mtx <- as.matrix(exp.data.d7.PRIM_SEC, row.names="Geoduck.ID") # create matrix
# CKECK THE cts.matrix AND THE exp.data.mtx
exp.data.d7.PRIM_SEC.mtx <- exp.data.d7.PRIM_SEC.mtx[match(colnames(cts.merged.d7),rownames(exp.data.d7.PRIM_SEC.mtx)), ]
all(rownames(exp.data.d7.PRIM_SEC.mtx) %in% colnames(cts.matrix.d7.filtered)) # should be TRUE
all(rownames(exp.data.d7.PRIM_SEC.mtx) == colnames(cts.matrix.d7.filtered)) # should be TRUE
all(rownames(exp.data.d7.PRIM_SEC.mtx) == colnames(cts.matrix.d7.filtered))  # should be TRUE
# build dds
dds.d7 <- DESeqDataSetFromMatrix(countData = cts.matrix.d7.filtered,
colData = exp.data.d7.PRIM_SEC.mtx,
design = ~ Primary_Treatment+Second_Treament) # DESeq Data Set (dds) - design as ~Primary_Treatment
# dds.primary.d0 # view dds
# prep for DESeq2
dds.d7$Primary_Treatment <- relevel(dds.d7$Primary_Treatment, ref = "A") # specify the reference level for count analysis - A = the control treatment
dds.d7$Second_Treament <- relevel(dds.d7$Second_Treament, ref = "A") # specify the reference level for count analysis - A = the control treatment
dds.d7$Time <- droplevels(dds.d7$Time) # drop levels of time
levels(dds.d7$Time) # NULL
levels(dds.d7$Primary_Treatment) #  levels for condition 'Treatment':  "A" "M"
levels(dds.d7$Second_Treament) #  levels for condition 'Treatment': "A" "M" "S"
design(dds.d7) # view the design we have specified
ncol(dds.d7) # 36 cols - Good
nrow(dds.d7) # 8456 cols (10 CPM) 13670 (3 CPM)
+ Secondary Treatment  =========================================================================================== #
nrow(dds.d7) # 8456 total genes pre filtered; FDR cutoff of 0.1 = 845.6 false positives; 0.05 = 422.8 flase positives
dds.d7 <- DESeq(dds.d7) # wait for this to complete....
resultsNames(dds.d7) # view the names of your results model
resd7.all.primary_M_vs_A<- results(dds.d7, name="Primary_Treatment_M_vs_A", alpha = 0.05)
hist(resd7.all.primary_M_vs_A$pvalue, breaks=20, col="grey") # view histogram,  about 425 genes are likely false positives, alpha = 0.0
abline(h=(nrow(dds.d7)*0.05),col="red") # add line at expected 5% false positive
table(resd7.all.primary_M_vs_A$padj<0.05) # 94 DEGs
resd7.all.primary_M_vs_A <- resd7.all.primary_M_vs_A[order(resd7.all.primary_M_vs_A$padj), ] ## Order by adjusted p-value
resdata.d7.all.prim.M_vs_A  <- merge(as.data.frame(resd7.all.primary_M_vs_A), as.data.frame(counts(dds.d7, normalized=TRUE)), by="row.names", sort=FALSE) ## Merge with normalized count data
names(resdata.d7.all.prim.M_vs_A)[1] <- "Gene" # assign col 1
resd7.all.primary_M_vs_A<- results(dds.d7, name="Primary_Treatment_M_vs_A", alpha = 0.05)
hist(resd7.all.primary_M_vs_A$pvalue, breaks=20, col="grey") # view histogram,  about 425 genes are likely false positives, alpha = 0.0
abline(h=(nrow(dds.d7)*0.05),col="red") # add line at expected 5% false positive
table(resd7.all.primary_M_vs_A$padj<0.05) # 94 DEGs
resd7.all.primary_M_vs_A <- resd7.all.primary_M_vs_A[order(resd7.all.primary_M_vs_A$padj), ] ## Order by adjusted p-value
resdata.d7.all.prim.M_vs_A  <- merge(as.data.frame(resd7.all.primary_M_vs_A), as.data.frame(counts(dds.d7, normalized=TRUE)), by="row.names", sort=FALSE) ## Merge with normalized count data
names(resdata.d7.all.prim.M_vs_A)[1] <- "Gene" # assign col 1
resdata.d7.all.prim.M_vs_A # 502 DEGS (log2FoldChange > 1; < -1 & padj < 0.05) on day 14 in response to Primary treatment (initial Mdoerate vs. Ambient conditioning)
DEGS.d7.primary<- resdata.d7.all.prim.M_vs_A %>%  dplyr::filter(padj<0.05)
nrow(DEGS.d7.primary) # 502 - we have all DEGs now
UPREG.d7.primary <- DEGS.d7.primary %>%  dplyr::filter(log2FoldChange > 1) # call upregulated genes
DWNREG.d7.primary <- DEGS.d7.primary %>%  dplyr::filter(log2FoldChange < 1) # call downregulated genes
nrow(UPREG.d7.primary) + nrow(DWNREG.d7.primary) # should be equal to 502
D7.UPREG_GO <- merge(UPREG.d7.primary, annotation.df, by = "Gene")
D7.UPREG_WEGO <- D7.UPREG_GO %>% dplyr::select(c('Gene', 'GO.terms'))
D7.UPREG_WEGO$GO.terms[is.na(D7.UPREG_WEGO$GO.terms)] <- " " # make NA blank
D7.DWNREG_GO <- merge(DWNREG.d7.primary, annotation.df, by = "Gene")
D7.DWNREG_WEGO <- D7.DWNREG_GO %>% dplyr::select(c('Gene', 'GO.terms'))
D7.DWNREG_WEGO$GO.terms[is.na(D7.DWNREG_WEGO$GO.terms)] <- " " # make NA blank
# write to GO folder
write.table(D7.UPREG_WEGO, file = "RAnalysis/GO/Day7_Upreg_Primary_WEGO", quote=FALSE, row.names = FALSE, col.names = FALSE) # call at 'Native Format' on  https://wego.genomics.cn/
write.table(D7.DWNREG_WEGO, file = "RAnalysis/GO/Day7_Downreg_Primary_WEGO", quote=FALSE, row.names = FALSE, col.names = FALSE) # call at 'Native Format' on  https://wego.genomics.cn/
exp.data.Moderate
# format Experiment/design dataframe into matrix
exp.data.Amb_all <- exp.data.AmbControl %>% dplyr::select(c('Sample.Name', 'Primary_Treatment', 'Time')) # coondense dataset to build target matrix
exp.data.Amb_all
exp.data.AmbControl
# format Experiment/design dataframe into matrix
exp.data.Amb_all <- exp.data.AmbControl %>% dplyr::select(c('Sample.Name', 'Primary_Treatment', 'Treat.day')) # coondense dataset to build target matrix
# format Experiment/design dataframe into matrix
exp.data.Amb_all <- exp.data.AmbControl %>% dplyr::select(c('Sample.Name', 'Treat.day')) # coondense dataset to build target matrix
exp.data.Amb_all
exp.data.Amb_all$Treat.day <- factor(exp.data.Amb_all$Treat.day) # change Primary_Treatment to factor
# exp.data.d0.PRIMARY$Time <- factor(exp.data.d0.PRIMARY$Time) # change Time to factor
exp.data.Amb_all <- data.frame(exp.data.Amb_all[,-1], row.names=exp.data.Amb_all[,1]) # move Sample.Name column as row names
exp.data.Amb_all
exp.data.Amb_all.mtx <- as.matrix(exp.data.d0.PRIMARY, row.names="Geoduck.ID") # create matrix
exp.data.Amb_all.mtx
exp.data.Amb_all.mtx <- as.matrix(exp.data.Amb_all, row.names="Geoduck.ID") # create matrix
exp.data.Amb_all.mtx
exp.data.AmbControl
# format Experiment/design dataframe into matrix
exp.data.Amb_all <- exp.data.AmbControl %>% dplyr::select(c('Sample.Name', 'Treat.day', 'All_Treatment')) # coondense dataset to build target matrix
exp.data.Amb_all$Treat.day <- factor(exp.data.Amb_all$Treat.day) # change Primary_Treatment to factor
# exp.data.d0.PRIMARY$Time <- factor(exp.data.d0.PRIMARY$Time) # change Time to factor
exp.data.Amb_all <- data.frame(exp.data.Amb_all[,-1], row.names=exp.data.Amb_all[,1]) # move Sample.Name column as row names
exp.data.Amb_all.mtx <- as.matrix(exp.data.Amb_all, row.names="Geoduck.ID") # create matrix
exp.data.Amb_all.mtx
# fix(exp.data.mtx) # view data - remove # to open
# CKECK THE cts.matrix AND THE exp.data.mtx
exp.data.Amb_all.mtx <- exp.data.Amb_all.mtx[match(colnames(all.counts.filtered),rownames(exp.data.Amb_all.mtx)), ]
exp.data.Amb_all.mtx
match(colnames(all.counts.filtered)
colnames(all.counts.filtered)
all.counts.filtered
rownames(exp.data.Amb_all.mtx)
exp.data.Amb_all.mtx <- as.matrix(exp.data.Amb_all, row.names="Geoduck.ID") # create matrix
exp.data.Amb_all.mtx
rownames(exp.data.Amb_all.mtx)
colnames(all.counts.filtered)
# fix(exp.data.mtx) # view data - remove # to open
# CKECK THE cts.matrix AND THE exp.data.mtx
exp.data.Amb_all.mtx <- exp.data.Amb_all.mtx[match(colnames(all.counts.filtered),rownames(exp.data.Amb_all.mtx)), ]
exp.data.Amb_all.mtx
all(rownames(exp.data.d0.PRIMARY.mtx) %in% colnames(cts.matrix.d0.filtered)) # should be TRUE
all(rownames(exp.data.d0.PRIMARY.mtx) == colnames(cts.matrix.d0.filtered)) # should be TRUE
all(rownames(exp.data.d0.PRIMARY.mtx) == colnames(cts.matrix.d0.filtered))  # should be TRUE
all(rownames(exp.data.Amb_all.mtx) %in% colnames(all.counts.filtered)) # should be TRUE
all(rownames(exp.data.Amb_all.mtx) == colnames(all.counts.filtered)) # should be TRUE
all(rownames(exp.data.Amb_all.mtx) == colnames(all.counts.filtered))  # should be TRUE
all.counts.filtered
cts.merged.as.table
cts.merged
cts.merged.as.table
cts.matrix.all.filtered
exp.data.Amb_all.mtx <- as.matrix(exp.data.Amb_all, row.names="Geoduck.ID") # create matrix
# fix(exp.data.mtx) # view data - remove # to open
# CKECK THE cts.matrix AND THE exp.data.mtx
exp.data.Amb_all.mtx <- exp.data.Amb_all.mtx[match(colnames(cts.matrix.all.filtered),rownames(exp.data.Amb_all.mtx)), ]
all(rownames(exp.data.Amb_all.mtx) %in% colnames(all.counts.filtered)) # should be TRUE
exp.data.Amb_all.mtx
exp.data.Amb_all
cts.merged.Ambient.all <- cts.matrix.all.filtered[,c(1,na.omit(match(exp.data.AmbControl$Sample.Name, colnames(cts.matrix.all.filtered))))]
cts.merged.Ambient.all <- data.frame(cts.merged.Ambient.all[,-1], row.names=cts.merged.Ambient.all[,1])
cts.merged.Ambient.all  <-as.matrix(cts.merged.Ambient.all, row.names="transcript_id")
cts.merged.Ambient.all
cts.merged.Ambient.all <- cts.matrix.all.filtered[,c(1,na.omit(match(exp.data.AmbControl$Sample.Name, colnames(cts.matrix.all.filtered))))]
cts.merged.Ambient.all <- data.frame(cts.merged.Ambient.all[,-1], row.names=cts.merged.Ambient.all[,1])
cts.merged.Ambient.all
# fix(exp.data.mtx) # view data - remove # to open
# CKECK THE cts.matrix AND THE exp.data.mtx
exp.data.Amb_all.mtx <- exp.data.Amb_all.mtx[match(colnames(cts.merged.Ambient.all),rownames(exp.data.Amb_all.mtx)), ]
exp.data.Amb_all.mtx
all(rownames(exp.data.Amb_all.mtx) %in% colnames(cts.merged.Ambient.all)) # should be TRUE
all(rownames(exp.data.Amb_all.mtx) == colnames(cts.merged.Ambient.all)) # should be TRUE
all(rownames(exp.data.Amb_all.mtx) == colnames(cts.merged.Ambient.all))  # should be TRUE
# build dds
dds.Amb_all <- DESeqDataSetFromMatrix(countData = cts.merged.Ambient.all,
colData = exp.data.Amb_all.mtx,
design = ~ Treat.day) # DESeq Data Set (dds) - design as ~Primary_Treatment
dds.Amb_all # view dds
exp.data.AmbControl
# prep for DESeq2
dds.Amb_all$Treat.day <- relevel(dds.d0$Primary_Treatment, ref = "A_0") # specify the reference level for count analysis - A = the control treatment
# prep for DESeq2
dds.Amb_all$Treat.day <- relevel(dds.Amb_all$Treat.day, ref = "A_0") # specify the reference level for count analysis - A = the control treatment
dds.Amb_all$All_Treatment <- droplevels(dds.Amb_all$All_Treatment)
levels(dds.d0$Time) # NULL
levels(dds.Amb_all$All_Treatment) # NULL
levels(dds.Amb_all$Treat.day) #  levels for condition 'Treatment': "A" "M"
design(dds.Amb_all) # view the design we have specified
ncol(dds.Amb_all) # 8 cols - Good
nrow(dds.Amb_all) # 9091 cols (cutoff at 10 CPM) 15036 (cut-off of 3 CPM)
dim(cts.merged.Ambient.all)
nrow(dds.Amb_all) # 15036 total genes pre filtered; FDR cutoff  0.05 = 751.8 false positives
#  pre-filtered in edgeR - use independentFiltering=FALSE
dds.Amb_all <- DESeq(dds.Amb_all) # wait for this to complete....
resultsNames(dds.Amb_all) # view the names of your results model 'Primary_Treatment_M_vs_A'
res.Amb <- results(dds.Amb_all, alpha = 0.5) # already filtered in edgeR; FDR of 0.05 (~ 450 in 9091 genes)
hist(res.Amb$pvalue, breaks=20, col="grey") # view histogram,  about 425 genes are likely false positives, alpha = 0.05 FDR is good!
resAmb.d0vd7 <- results(dds.Amb_all, name="Treat.day_AA_7_vs_A_0", alpha = 0.05)
hist(resAmb.d0vd7$pvalue, breaks=20, col="grey") # view histogram,  about 425 genes are likely false positives, alpha = 0.0
abline(h=(nrow(dds.Amb_all)*0.05),col="red") # add line at expected 5% false positive
table(resAmb.d0vd7$padj<0.05) # 94 DEGs
resAmb.d0vd14 <- results(dds.Amb_all, name="Treat.day_AA_14_vs_A_0", alpha = 0.05)
hist(resAmb.d0vd14$pvalue, breaks=20, col="grey") # view histogram,  about 425 genes are likely false positives, alpha = 0.0
abline(h=(nrow(dds.Amb_all)*0.05),col="red") # add line at expected 5% false positive
table(resAmb.d0vd14$padj<0.05) # 0 DEGs
resAmb.d0vd21 <- results(dds.Amb_all, name="Treat.day_AAA_21_vs_A_0", alpha = 0.05)
hist(resAmb.d0vd21$pvalue, breaks=20, col="grey") # view histogram,  about 425 genes are likely false positives, alpha = 0.0
abline(h=(nrow(dds.Amb_all)*0.05),col="red") # add line at expected 5% false positive
table(resAmb.d0vd21$padj<0.05) # 11 DEGs
resAmb.d0vd21 <- results(dds.Amb_all, name="Treat.day_AAA_21_vs_A_0", alpha = 0.05)
hist(resAmb.d0vd21$pvalue, breaks=20, col="grey") # view histogram,  about 425 genes are likely false positives, alpha = 0.0
abline(h=(nrow(dds.Amb_all)*0.05),col="red") # add line at expected 5% false positive
table(resAmb.d0vd21$padj<0.05) # 94 DEGs
EnhancedVolcano(resAmb.d0vd21,
lab = rownames(resAmb.d0vd21),
x = 'log2FoldChange',
y = 'pvalue',
title = 'Day 21 v. Day 0 (Ambient Control)',
subtitle = "DESeq2 - Differential expression",
FCcutoff = 2.0,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0,
widthConnectors = 0.75)
