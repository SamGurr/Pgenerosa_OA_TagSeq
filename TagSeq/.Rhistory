rownames(d21sum)<-NULL
colnames(d21sum) <- "sum"
sumMaster_10cpm <-rbind(d0sum, d7sum, d14sum, d21sum)
colMeans(sumMaster_10cpm)
colSdDiffs(sumMaster_10cpm)
install.packages('colStats')
install.packages('tineSeries')
install.packages('timeSeries')
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
library(dplyr)
library(edgeR)
library(cowplot)
library(ggplot2)
print(getwd())  # working directory is the scipts folder
# path for output ting all .csv filtered count files
path = 'C:/Users/samjg/Documents/Github_repositories/Pgenerosa_TagSeq_Metabolomics/TagSeq/Analysis/Data/Filtered_Counts' # run this for all count matrix outputs!!!
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
library(dplyr)
library(edgeR)
library(cowplot)
library(ggplot2)
print(getwd())  # working directory is the scipts folder
# path for output ting all .csv filtered count files
path = 'C:/Users/samjg/Documents/Github_repositories/Pgenerosa_TagSeq_Metabolomics/TagSeq/Analysis/Data/Filtered_Counts' # run this for all count matrix outputs!!!
# write to table
filt_cts_table$Time <- c("all", "d0", "d7", "d14", "d21")
filt_cts_table$GeneCount_5cpm <- c(all_1_numgenes, d0_1_numgenes, d7_1_numgenes, d14_1_numgenes, d21_1_numgenes)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
d0_filt_10CPM  <- read.csv("../Data/Filtered_Counts/10cpm_50perc/day0.counts.filtered_10cpm50perc.csv", sep=',', header=TRUE)
d0_filt_10CPM  <- d0_filt_10CPM[,-1]
d7_filt_10CPM  <- read.csv("../Data/Filtered_Counts/10cpm_50perc/day7.counts.filtered_10cpm50perc.csv", sep=',', header=TRUE)
d7_filt_10CPM  <- d7_filt_10CPM[,-1]
d14_filt_10CPM  <- read.csv("../Data/Filtered_Counts/10cpm_50perc/day14.counts.filtered_10cpm50perc.csv", sep=',', header=TRUE)
d14_filt_10CPM  <- d14_filt_10CPM[,-1]
d21_filt_10CPM  <- read.csv("../Data/Filtered_Counts/10cpm_50perc/day21.counts.filtered_10cpm50perc.csv", sep=',', header=TRUE)
d21_filt_10CPM  <- d21_filt_10CPM[,-1]
# Mean +- SD filtered read counts for 10 CPM 50% filtered data
d0means  <- as.data.frame(colMeans(d0_filt_10CPM))
rownames(d0means)<-NULL
colnames(d0means) <- "mean"
d7means  <- as.data.frame(colMeans(d7_filt_10CPM))
rownames(d7means)<-NULL
colnames(d7means) <- "mean"
d14means <- as.data.frame(colMeans(d14_filt_10CPM))
rownames(d14means)<-NULL
colnames(d14means) <- "mean"
d21means <- as.data.frame(colMeans(d21_filt_10CPM))
rownames(d21means)<-NULL
colnames(d21means) <- "mean"
meanMaster_10cpm <-rbind(d0means, d7means, d14means, d21means)
colMeans(meanMaster_10cpm)
colSdDiffs(meanMaster_10cpm)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
library(timeSeries)
colSdDiffs(meanMaster_10cpm)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
install.packages('matrixStats')
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
library(matrixStats)
colSdDiffs(meanMaster_10cpm)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
# Sum  read counts for 10 CPM 50% filtered data
d0sum  <- as.data.frame(colSums(d0_filt_10CPM))
rownames(d0sum)<-NULL
colnames(d0sum) <- "sum"
d7sum  <- as.data.frame(colSums(d7_filt_10CPM))
rownames(d7sum)<-NULL
colnames(d7sum) <- "sum"
d14sum <- as.data.frame(colSums(d14_filt_10CPM))
rownames(d14sum)<-NULL
colnames(d14sum) <- "sum"
d21sum <- as.data.frame(colSums(d21_filt_10CPM))
rownames(d21sum)<-NULL
colnames(d21sum) <- "sum"
sumMaster_10cpm <-rbind(d0sum, d7sum, d14sum, d21sum)
colMeans(sumMaster_10cpm)
colSdDiffs(sumMaster_10cpm)
d0sum
d7sum
sumMaster_10cpm
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
min(sumMaster_10cpm)
max(sumMaster_10cpm)
sumMaster_10cpm
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
View(sumMaster_10cpm)
---
# title: "DESeq2_FrontloadingAnalysis.R"
# author: "Samuel Gurr"
# date: "January 8, 2021"
---
# LOAD PACKAGES
library(dplyr)
library(reshape2)
# SET WORKING DIRECTORY AND LOAD DATA
setwd("C:/Users/samjg/Documents/Github_repositories/Pgenerosa_TagSeq_Metabolomics/TagSeq/")
Day7AvMSecond_totalDEGs <- read.csv(file="Analysis/Output/DESeq2/10cpm/Day7/ Day7.SecondDEGs_AvM_DESeq2results.csv", sep=',', header=TRUE) %>% dplyr::select(!c('X','baseMean'))
Day7AvMSecond_UP        <- Day7AvMSecond_totalDEGs %>%
dplyr::filter(padj < 0.05) %>%
dplyr::filter(log2FoldChange < 0) %>%
mutate(log2FoldChange = abs(log2FoldChange))
nrow(Day7AvMSecond_UP) # 92 total genes!
ncol(Day7AvMSecond_UP[7:ncol(Day7AvMSecond_UP)]) # 36 total samples!
# Steps
# (2) ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# we have out 92 genes in question! 'Day7AvMSecond_UP'
# now lets call in the experiment metadata to get the assigned treatment by the sample IDs!
Master.Exp.Metadata   <- read.csv(file="Analysis/Data/Experiment_Metadata/Master_Phyenotype.and.Exp.Treatment_Metadata.csv", sep=',', header=TRUE) %>%
dplyr::filter(Date %in% 20190731) %>% # call only day 7
dplyr::select(c('Sample.Name', 'All_Treatment')) %>% # select only the sample names and the treatment groups
dplyr::mutate(All_Treatment = factor(All_Treatment)) # make the treatment groups a factor
nrow(Master.Exp.Metadata) # 36 total samples!
Day7UP_melted     <- Day7AvMSecond_UP %>%
dplyr::select(!c('log2FoldChange', 'lfcSE','stat','pvalue','padj')) %>%
reshape2::melt(id.var = 'Gene') %>%
dplyr::rename(Sample.Name = variable)
Day7UP_TreatMerge <- merge(Day7UP_melted, Master.Exp.Metadata, by = 'Sample.Name') %>%
dplyr::group_by(Gene, All_Treatment) %>%
dplyr::select(!'Sample.Name') %>%
dplyr::summarise(meanExp = mean(value))
View(Day7UP_TreatMerge)
# LOAD DATA
day7.ModMem   <- read.csv(file="Analysis/Output/WGCNA/subseq_treatments_all/Day7/d7.WGCNA_ModulMembership.csv", sep=',', header=TRUE)   %>%  dplyr::rename(Pgen_ID = X) %>%  mutate(Pgen_ID = as.character(Pgen_ID)) %>%  dplyr::select(c('Pgen_ID','moduleColor'))
day14.ModMem  <- read.csv(file="Analysis/Output/WGCNA/subseq_treatments_all/Day14/d14.WGCNA_ModulMembership.csv", sep=',', header=TRUE)  %>%  dplyr::rename(Pgen_ID = X) %>%  mutate(Pgen_ID = as.character(Pgen_ID)) %>%  dplyr::select(c('Pgen_ID','moduleColor'))
day21.ModMem  <- read.csv(file="Analysis/Output/WGCNA/subseq_treatments_all/Day21/d21.WGCNA_ModulMembership.csv", sep=',', header=TRUE)  %>%  dplyr::rename(Pgen_ID = X) %>%  mutate(Pgen_ID = as.character(Pgen_ID)) %>%  dplyr::select(c('Pgen_ID','moduleColor'))
# ALL MODULES SHOWING HIGHER EXPRESSION BY PREEXPOSED CLAMS
# NOTE: no genes in these modules thorugh
# all three days (day 7,14, 21), instead called all genes present on 2/3 days
# (1) Preexposed_modules # modules with higher expression by preexposed/acclimate/stress-primed animals (relative to naive animals)
day7.yellow   <- day7.ModMem %>% dplyr::filter(moduleColor %in% 'yellow')  %>% dplyr::mutate(day ='Day7')
day14.black   <- day14.ModMem %>% dplyr::filter(moduleColor %in% 'black')  %>% dplyr::mutate(day ='Day14')
day21.yellow  <- day21.ModMem %>% dplyr::filter(moduleColor %in% 'yellow') %>% dplyr::mutate(day ='Day21')
Preexposed_modules   <- rbind(day7.yellow, day14.black, day21.yellow)
PreexpResponse_genes <- Preexposed_modules %>%
dplyr::group_by(Pgen_ID) %>%
dplyr::summarise(count = n()) %>%
dplyr::filter(count == 2)
# View(Frontloaded_genes)
PreexpResponse_genes       = PreexpResponse_genes$Pgen_ID
PreexpResponse_genes_ANNOT = match(PreexpResponse_genes, annot$V1)
PreexpResponse_genes_data <- data.frame(geneSymbol = annot$V1[PreexpResponse_genes_ANNOT],
Annotation = annot$V7[PreexpResponse_genes_ANNOT])
# load the P generosa annotated genes file
annot           = read.delim2(file = "Seq_details/Panopea-generosa-genes-annotations.txt",header = F);
# load the P generosa annotated genes file
annot = read.delim2(file = "Seq_details/Panopea-generosa-genes-annotations.txt",header = F);
Preexposed_modules   <- rbind(day7.yellow, day14.black, day21.yellow)
PreexpResponse_genes <- Preexposed_modules %>%
dplyr::group_by(Pgen_ID) %>%
dplyr::summarise(count = n()) %>%
dplyr::filter(count == 2)
# View(Frontloaded_genes)
PreexpResponse_genes       = PreexpResponse_genes$Pgen_ID
PreexpResponse_genes_ANNOT = match(PreexpResponse_genes, annot$V1)
PreexpResponse_genes_data <- data.frame(geneSymbol = annot$V1[PreexpResponse_genes_ANNOT],
Annotation = annot$V7[PreexpResponse_genes_ANNOT])
nrow(PreexpResponse_genes_data) # 243 genes present in 2/3 days of repeat exposures
# ALL MODULES SHOWING HIGHER EXPRESSION BY NAIVE CLAMS
# (2) Naive_modules # modules with higher expression by naive animals (relaive to preexposed animals)
day7.brown    <- day7.ModMem %>% dplyr::filter(moduleColor %in% 'brown')     %>% dplyr::mutate(day ='Day7')
day14.brown   <- day14.ModMem %>% dplyr::filter(moduleColor %in% 'brown')    %>% dplyr::mutate(day ='Day14')
day21.blue    <- day21.ModMem %>% dplyr::filter(moduleColor %in% 'blue')     %>% dplyr::mutate(day ='Day21')
day21.magenta <- day21.ModMem %>% dplyr::filter(moduleColor %in% 'magenta')  %>% dplyr::mutate(day ='Day21')
Naive_modules <- rbind(day7.brown, day14.brown, day21.blue, day21.magenta)
NaiveResponse_genes <- Naive_modules %>%
dplyr::group_by(Pgen_ID) %>%
dplyr::summarise(count = n()) %>%
dplyr::filter(count == 3)
# View(NaiveResponse_genes)
NaiveResponse_genes        = NaiveResponse_genes$Pgen_ID
NaiveResponse_genes_ANNOT  = match(NaiveResponse_genes, annot$V1)
NaiveResponse_genes_data   <- data.frame(geneSymbol = annot$V1[NaiveResponse_genes_ANNOT],
Annotation = annot$V7[NaiveResponse_genes_ANNOT])
nrow(NaiveResponse_genes_data) # 315 genes present on all sampling days
# NEXT......
# this set of genes represents those that CONTINUOUSLY present in modules
# highly correlated with the primary treatment for higher expression by NAIVE animals than preexposed animals
# Thus, these genes are NOT present  any modules correlated with preexposed animals
# NOTE: are these the same as the TimeSeries WGNCA??
Annot_ModuleMembership <-  read.csv("Analysis/Output/WGCNA/subseq_treatments_all/TimeSeries/TimeSeries.WGCNA_ModulMembership.csv") %>% dplyr::select(c('geneSymbol','moduleColor'))
Day7AvMSecond_totalDEGs
# Day 7 gene expression
WGCNA_presistantNaive_genes <- Day7AvMSecond_totalDEGs %>%
dplyr::filter(Gene %in% NaiveResponse_genes)
WGCNA_presistantNaive_genes
WGCNA_presistantNaive_genes
WGCNA_presistantNaive_genes
WGCNA_naive_melted     <- WGCNA_presistantNaive_genes %>%
dplyr::select(!c('log2FoldChange', 'lfcSE','stat','pvalue','padj')) %>%
reshape2::melt(id.var = 'Gene') %>%
dplyr::rename(Sample.Name = variable)
WGCNA_naive_melted
WGCNA_naive_Merge
WGCNA_naive_Merge <- merge(WGCNA_naive_melted, Master.Exp.Metadata, by = 'Sample.Name') %>%
dplyr::group_by(Gene, All_Treatment) %>%
dplyr::select(!'Sample.Name') %>%
dplyr::summarise(meanExp = mean(value))
WGCNA_naive_Merge
WGCNA_naive_READY <- dcast(WGCNA_naive_Merge, Gene ~ All_Treatment)
WGCNA_naive_READY
for (i in 1:nrow(WGCNA_naive_READY)) {
if (WGCNA_naive_READY$AM > WGCNA_naive_READY$AA) {
# X axis
WGCNA_naive_READY$wgcna.xall_mod[i,] <- ( (WGCNA_naive_READY$MM / WGCNA_naive_READY$MA) / (WGCNA_naive_READY$AM / WGCNA_naive_READY$AA) ) # call MA as the control for the MM ratio
WGCNA_naive_READY$wgcna.xall_sev[i,] <- ( (WGCNA_naive_READY$MS / WGCNA_naive_READY$MA) / (WGCNA_naive_READY$AS / WGCNA_naive_READY$AA) ) # call AA as the control for the MM ratio
# Y Axis - this is simply the conditioned control over the naive control ( MA / AA )
WGCNA_naive_READY$wgcna.yall[i,] <- (WGCNA_naive_READY$MA / WGCNA_naive_READY$AA)
} else {
# X axis  - call NA
WGCNA_naive_READY$wgcna.xall_mod[i,] <- NA
WGCNA_naive_READY$wgcna.xall_sev[i,] <- NA
# Y Axis  - call NA
WGCNA_naive_READY$wgcna.yall[i,] <- NA
}
}
WGCNA_naive_READY$AA[i,]
WGCNA_naive_READY$AA[i]
for (i in 1:nrow(WGCNA_naive_READY)) {
if (WGCNA_naive_READY$AM[i] > WGCNA_naive_READY$AA[i]) {
# X axis
WGCNA_naive_READY$wgcna.xall_mod[i] <- ( (WGCNA_naive_READY$MM / WGCNA_naive_READY$MA) / (WGCNA_naive_READY$AM / WGCNA_naive_READY$AA) ) # call MA as the control for the MM ratio
WGCNA_naive_READY$wgcna.xall_sev[i] <- ( (WGCNA_naive_READY$MS / WGCNA_naive_READY$MA) / (WGCNA_naive_READY$AS / WGCNA_naive_READY$AA) ) # call AA as the control for the MM ratio
# Y Axis - this is simply the conditioned control over the naive control ( MA / AA )
WGCNA_naive_READY$wgcna.yall[i] <- (WGCNA_naive_READY$MA / WGCNA_naive_READY$AA)
} else {
# X axis  - call NA
WGCNA_naive_READY$wgcna.xall_mod[i] <- NA
WGCNA_naive_READY$wgcna.xall_sev[i] <- NA
# Y Axis  - call NA
WGCNA_naive_READY$wgcna.yall[i] <- NA
}
}
WGCNA_naive_READY
for (i in 1:nrow(WGCNA_naive_READY)) {
if (WGCNA_naive_READY$AM[i] > WGCNA_naive_READY$AA[i]) {
# X axis
WGCNA_naive_READY$wgcna.xall_mod[i] <- ( (WGCNA_naive_READY$MM[i] / WGCNA_naive_READY$MA[i]) / (WGCNA_naive_READY$AM[i] / WGCNA_naive_READY$AA[i]) ) # call MA as the control for the MM ratio
WGCNA_naive_READY$wgcna.xall_sev[i] <- ( (WGCNA_naive_READY$MS[i] / WGCNA_naive_READY$MA[i]) / (WGCNA_naive_READY$AS[i] / WGCNA_naive_READY$AA[i]) ) # call AA as the control for the MM ratio
# Y Axis - this is simply the conditioned control over the naive control ( MA / AA )
WGCNA_naive_READY$wgcna.yall[i] <- (WGCNA_naive_READY$MA[i] / WGCNA_naive_READY$AA[i])
} else {
# X axis  - call NA
WGCNA_naive_READY$wgcna.xall_mod[i] <- NA
WGCNA_naive_READY$wgcna.xall_sev[i] <- NA
# Y Axis  - call NA
WGCNA_naive_READY$wgcna.yall[i] <- NA
}
}
WGCNA_naive_READY
WGCNA_naive_READY$AM[i] > WGCNA_naive_READY$AA[i]
WGCNA_naive_READY
WGCNA_naive_Merge <- merge(WGCNA_naive_melted, Master.Exp.Metadata, by = 'Sample.Name') %>%
dplyr::group_by(Gene, All_Treatment) %>%
dplyr::select(!'Sample.Name') %>%
dplyr::summarise(meanExp = mean(value))
WGCNA_naive_READY <- dcast(WGCNA_naive_Merge, Gene ~ All_Treatment)
for (i in 1:nrow(WGCNA_naive_READY)) {
# Moderate - higher expression AM > AA
if (WGCNA_naive_READY$AM[i] > WGCNA_naive_READY$AA[i]) {
# X axis
WGCNA_naive_READY$wgcna.xall_mod[i] <- ( (WGCNA_naive_READY$MM[i] / WGCNA_naive_READY$MA[i]) / (WGCNA_naive_READY$AM[i] / WGCNA_naive_READY$AA[i]) ) # call MA as the control for the MM ratio
# Y Axis - this is simply the conditioned control over the naive control ( MA / AA )
WGCNA_naive_READY$wgcna.yall_mod[i] <- (WGCNA_naive_READY$MA[i] / WGCNA_naive_READY$AA[i])
} else {
# X axis  - call NA
WGCNA_naive_READY$wgcna.xall_mod[i] <- NA
# Y Axis  - call NA
WGCNA_naive_READY$wgcna.yall_mod[i] <- NA
}
# Severe - higher expression AS > AA
if (WGCNA_naive_READY$AS[i] > WGCNA_naive_READY$AA[i]) {
# X axis
WGCNA_naive_READY$wgcna.xall_sev[i] <- ( (WGCNA_naive_READY$MS[i] / WGCNA_naive_READY$MA[i]) / (WGCNA_naive_READY$AS[i] / WGCNA_naive_READY$AA[i]) ) # call AA as the control for the MM ratio
# Y Axis - this is simply the conditioned control over the naive control ( MA / AA )
WGCNA_naive_READY$wgcna.yall_sev[i] <- (WGCNA_naive_READY$MA[i] / WGCNA_naive_READY$AA[i])
} else {
# X axis  - call NA
WGCNA_naive_READY$wgcna.xall_sev[i] <- NA
# Y Axis  - call NA
WGCNA_naive_READY$wgcna.yall_sev[i] <- NA
}
}
WGCNA_naive_READY
# Steps
# (4) ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# lets plot it!
library(ggplot2)
# plot the frontloaded genes formula using x axis for the moderate treatment (second exposure, day 7)
par(mfrow=c(1,2))
P.wgcna.mod <- WGCNA_naive_READY %>% dplyr::filter(yall < 3) %>%
ggplot(aes(x=xall_mod, y=yall_mod)) +
geom_point() +
theme_classic() +
stat_smooth(method = "lm",
formula = y ~ x + poly(x, 2) - 1) +
geom_vline(xintercept=1, linetype="dotted") +
geom_hline(yintercept=1, linetype="dotted") +
labs(y= "Conditioned to naive control ratio",
x = "Conditioned to naive foldchange ratio",
title = "Frontloaded genes; response to moderate pCO2") +
expand_limits(x = 0, y = 0) +
annotate("rect", xmin = 0, xmax = 1, ymin = 1, ymax = 1.5,
alpha = .2) +
annotate("rect", xmin = 0, xmax = 1, ymin = 0, ymax = 1,
alpha = .5)
P.wgcna.mod
P.wgcna.mod <- WGCNA_naive_READY %>%
dplyr::select(!c('xall_sev', 'yall_sev')) %>%
dplyr::filter(yall < 3) %>%
ggplot(aes(x=xall_mod, y=yall_mod)) +
geom_point() +
theme_classic() +
stat_smooth(method = "lm",
formula = y ~ x + poly(x, 2) - 1) +
geom_vline(xintercept=1, linetype="dotted") +
geom_hline(yintercept=1, linetype="dotted") +
labs(y= "Conditioned to naive control ratio",
x = "Conditioned to naive foldchange ratio",
title = "Frontloaded genes; response to moderate pCO2") +
expand_limits(x = 0, y = 0) +
annotate("rect", xmin = 0, xmax = 1, ymin = 1, ymax = 1.5,
alpha = .2) +
annotate("rect", xmin = 0, xmax = 1, ymin = 0, ymax = 1,
alpha = .5)
WGCNA_naive_READY
P.wgcna.mod <- WGCNA_naive_READY %>%
dplyr::select(!c('wgcna.xall_sev', 'wgcna.yall_sev')) %>%
dplyr::filter(wgcna.yall_mod < 3) %>%
ggplot(aes(x=wgcna.xall_mod, y=wgcna.yall_mod)) +
geom_point() +
theme_classic() +
stat_smooth(method = "lm",
formula = y ~ x + poly(x, 2) - 1) +
geom_vline(xintercept=1, linetype="dotted") +
geom_hline(yintercept=1, linetype="dotted") +
labs(y= "Conditioned to naive control ratio",
x = "Conditioned to naive foldchange ratio",
title = "Frontloaded genes; response to moderate pCO2") +
expand_limits(x = 0, y = 0) +
annotate("rect", xmin = 0, xmax = 1, ymin = 1, ymax = 1.5,
alpha = .2) +
annotate("rect", xmin = 0, xmax = 1, ymin = 0, ymax = 1,
alpha = .5)
P.wgcna.mod
P.wgcna.mod <- WGCNA_naive_READY %>%
dplyr::select(!c('wgcna.xall_sev', 'wgcna.yall_sev')) %>%
na.omi() %>%
dplyr::filter(wgcna.yall_mod < 3) %>%
ggplot(aes(x=wgcna.xall_mod, y=wgcna.yall_mod)) +
geom_point() +
theme_classic() +
stat_smooth(method = "lm",
formula = y ~ x + poly(x, 2) - 1) +
geom_vline(xintercept=1, linetype="dotted") +
geom_hline(yintercept=1, linetype="dotted") +
labs(y= "Conditioned to naive control ratio",
x = "Conditioned to naive foldchange ratio",
title = "Frontloaded genes; response to moderate pCO2") +
expand_limits(x = 0, y = 0) +
annotate("rect", xmin = 0, xmax = 1, ymin = 1, ymax = 1.5,
alpha = .2) +
annotate("rect", xmin = 0, xmax = 1, ymin = 0, ymax = 1,
alpha = .5)
P.wgcna.mod <- WGCNA_naive_READY %>%
dplyr::select(!c('wgcna.xall_sev', 'wgcna.yall_sev')) %>%
na.omit() %>%
dplyr::filter(wgcna.yall_mod < 3) %>%
ggplot(aes(x=wgcna.xall_mod, y=wgcna.yall_mod)) +
geom_point() +
theme_classic() +
stat_smooth(method = "lm",
formula = y ~ x + poly(x, 2) - 1) +
geom_vline(xintercept=1, linetype="dotted") +
geom_hline(yintercept=1, linetype="dotted") +
labs(y= "Conditioned to naive control ratio",
x = "Conditioned to naive foldchange ratio",
title = "Frontloaded genes; response to moderate pCO2") +
expand_limits(x = 0, y = 0) +
annotate("rect", xmin = 0, xmax = 1, ymin = 1, ymax = 1.5,
alpha = .2) +
annotate("rect", xmin = 0, xmax = 1, ymin = 0, ymax = 1,
alpha = .5)
P.wgcna.mod
# plot the frontloaded genes formula using x axis for the severe treatment (second exposure, day 7)
P.wgcna.sev <- WGCNA_naive_READY %>%
dplyr::select(!c('wgcna.xall_mod', 'wgcna.yall_mode')) %>%
na.omit() %>%
# dplyr::filter(wgcna.yall_sev < 3) %>%
ggplot(aes(x=wgcna.xall_sev, y=wgcna.yall_sev)) +
geom_point() +
theme_classic() +
stat_smooth(method = "lm",
formula = y ~ x + poly(x, 2) - 1) +
geom_vline(xintercept=1, linetype="dotted") +
geom_hline(yintercept=1, linetype="dotted") +
labs(y= "Conditioned to naive control ratio",
x = "Conditioned to naive foldchange ratio",
title = "Frontloaded genes; response to severe pCO2") +
expand_limits(x = 0, y = 0) +
annotate("rect", xmin = 0, xmax = 1, ymin = 1, ymax = 1.5,
alpha = .2) +
annotate("rect", xmin = 0, xmax = 1, ymin = 0, ymax = 1,
alpha = .5)
# plot the frontloaded genes formula using x axis for the severe treatment (second exposure, day 7)
P.wgcna.sev <- WGCNA_naive_READY %>%
dplyr::select(!c('wgcna.xall_mod', 'wgcna.yall_mod')) %>%
na.omit() %>%
# dplyr::filter(wgcna.yall_sev < 3) %>%
ggplot(aes(x=wgcna.xall_sev, y=wgcna.yall_sev)) +
geom_point() +
theme_classic() +
stat_smooth(method = "lm",
formula = y ~ x + poly(x, 2) - 1) +
geom_vline(xintercept=1, linetype="dotted") +
geom_hline(yintercept=1, linetype="dotted") +
labs(y= "Conditioned to naive control ratio",
x = "Conditioned to naive foldchange ratio",
title = "Frontloaded genes; response to severe pCO2") +
expand_limits(x = 0, y = 0) +
annotate("rect", xmin = 0, xmax = 1, ymin = 1, ymax = 1.5,
alpha = .2) +
annotate("rect", xmin = 0, xmax = 1, ymin = 0, ymax = 1,
alpha = .5)
P.wgcna.sev
# plot the frontloaded genes formula using x axis for the severe treatment (second exposure, day 7)
P.wgcna.sev <- WGCNA_naive_READY %>%
dplyr::select(!c('wgcna.xall_mod', 'wgcna.yall_mod')) %>%
na.omit() %>%
dplyr::filter(wgcna.yall_sev < 3) %>%
ggplot(aes(x=wgcna.xall_sev, y=wgcna.yall_sev)) +
geom_point() +
theme_classic() +
stat_smooth(method = "lm",
formula = y ~ x + poly(x, 2) - 1) +
geom_vline(xintercept=1, linetype="dotted") +
geom_hline(yintercept=1, linetype="dotted") +
labs(y= "Conditioned to naive control ratio",
x = "Conditioned to naive foldchange ratio",
title = "Frontloaded genes; response to severe pCO2") +
expand_limits(x = 0, y = 0) +
annotate("rect", xmin = 0, xmax = 1, ymin = 1, ymax = 1.5,
alpha = .2) +
annotate("rect", xmin = 0, xmax = 1, ymin = 0, ymax = 1,
alpha = .5)
P.wgcna.sev
P.wgcna.mod <- WGCNA_naive_READY %>%
dplyr::select(!c('wgcna.xall_sev', 'wgcna.yall_sev')) %>%
na.omit() %>%
dplyr::filter(wgcna.yall_mod < 3) %>%
ggplot(aes(x=wgcna.xall_mod, y=wgcna.yall_mod)) +
geom_point() +
theme_classic() +
stat_smooth(method = "lm",
formula = y ~ x + poly(x, 2) - 1) +
geom_vline(xintercept=1, linetype="dotted") +
geom_hline(yintercept=1, linetype="dotted") +
labs(y= "Conditioned to naive control ratio",
x = "Conditioned to naive foldchange ratio",
title = "Day 7
Frontloaded genes; response to moderate pCO2") +
expand_limits(x = 0, y = 0) +
annotate("rect", xmin = 0, xmax = 1, ymin = 1, ymax = 1.5,
alpha = .2) +
annotate("rect", xmin = 0, xmax = 1, ymin = 0, ymax = 1,
alpha = .5)
P.wgcna.mod
# plot the frontloaded genes formula using x axis for the severe treatment (second exposure, day 7)
P.wgcna.sev <- WGCNA_naive_READY %>%
dplyr::select(!c('wgcna.xall_mod', 'wgcna.yall_mod')) %>%
na.omit() %>%
dplyr::filter(wgcna.yall_sev < 3) %>%
ggplot(aes(x=wgcna.xall_sev, y=wgcna.yall_sev)) +
geom_point() +
theme_classic() +
stat_smooth(method = "lm",
formula = y ~ x + poly(x, 2) - 1) +
geom_vline(xintercept=1, linetype="dotted") +
geom_hline(yintercept=1, linetype="dotted") +
labs(y= "Conditioned to naive control ratio",
x = "Conditioned to naive foldchange ratio",
title = "Day 7 Frontloaded genes; response to severe pCO2") +
expand_limits(x = 0, y = 0) +
annotate("rect", xmin = 0, xmax = 1, ymin = 1, ymax = 1.5,
alpha = .2) +
annotate("rect", xmin = 0, xmax = 1, ymin = 0, ymax = 1,
alpha = .5)
P.wgcna.sev
# MODERATE second treatment
wgcna.frontloaded_genes_mod <- WGCNA_naive_READY %>%
dplyr::filter(wgcna.xall_mod < 1) %>%
dplyr::filter(yall > 1) %>%
dplyr::select('Gene') # %>%
# MODERATE second treatment
wgcna.frontloaded_genes_mod <- WGCNA_naive_READY %>%
dplyr::filter(wgcna.xall_mod < 1) %>%
dplyr::filter(wgcna.yall_mod > 1) %>%
dplyr::select('Gene') # %>%
wgcna.frontloadprobes_mod        = wgcna.frontloaded_genes_mod$Gene
probes2annot_mod                 = match(wgcna.frontloadprobes_mod, annot$V1)
wgcna.frontloaded_mod_ANNOT      = data.frame(geneSymbol = annot$V1[probes2annot_mod],
Genes = annot$V7[probes2annot_mod])
View(wgcna.frontloaded_mod_ANNOT)
# SEVERE second treatment
wgcna.frontloaded_genes_sev <- WGCNA_naive_READY %>%
dplyr::filter(wgcna.xall_sev < 1) %>%
dplyr::filter(wgcna.yall_sev > 1) %>%
dplyr::select('Gene') # %>%
wgcna.frontloadprobes_sev        = wgcna.frontloaded_genes_sev$Gene
probes2annot_sev                 = match(wgcna.frontloadprobes_sev, annot$V1)
wgcna.frontloaded_sev_ANNOT      = data.frame(geneSymbol = annot$V1[probes2annot_sev],
Genes = annot$V7[probes2annot_sev])
View(wgcna.frontloaded_sev_ANNOT)
