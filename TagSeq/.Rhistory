d14.exp_data  <- read.csv(file="../Data/Experiment_Metadata/day14.exp.data.csv", sep=',', header=TRUE) %>%   mutate_if(is.character, as.factor)
d21.exp_data  <- read.csv(file="../Data/Experiment_Metadata/day21.exp.data.csv", sep=',', header=TRUE) %>%   mutate_if(is.character, as.factor)
# ==========================================================
# DAY 0 FULL MODEL ==  design = ~ Primary_Treatment
# ========================================================== #
#####
d0.metadata <- d0.exp_data %>% dplyr::select(c('Sample.Name', 'Primary_Treatment', 'All_Treatment')) # coondense dataset to build target matrix
d0.metadata <- data.frame(d0.metadata[,-1], row.names=d0.metadata[,1]) # move Sample.Name column as row names
d0.metadata.mtx <- as.matrix(d0.metadata, row.names="Geoduck.ID") # create matrix
# check for 'TRUE' in each - check before proceeding  design
d0.metadata.mtx <- d0.metadata.mtx[match(colnames(d0.counts_matrix),rownames(d0.metadata.mtx)), ]
# all(rownames(d0.metadata.mtx) %in% colnames(d0.counts_matrix)) # should be TRUE
# all(rownames(d0.metadata.mtx) == colnames(d0.counts_matrix)) # should be TRUE
# all(rownames(d0.metadata.mtx) == colnames(d0.counts_matrix))  # should be TRUE
# build dds
dds.d0 <- DESeqDataSetFromMatrix(countData = d0.counts_matrix,
colData = d0.metadata.mtx,
design = ~ Primary_Treatment) # DESeq Data Set (dds) - design as ~Primary_Treatment
# ==========================================================
# DAY 7 - FULL MODEL     ==  design = ~ Primary_Treatment+Second_Treament+Primary_Treatment:Second_Treament
#       - ADDITIVE MODEL ==  design = ~ Primary_Treatment+Second_Treament
#       - GROUP    MODEL ==  design = ~ Primary_Treatment+Second_Treament
# ========================================================== #
#####
d7.metadata <- d7.exp_data %>% dplyr::select(c('Sample.Name', 'Primary_Treatment', 'Second_Treament', 'All_Treatment')) # condense dataset to   build target matrix
d7.metadata <- data.frame(d7.metadata[,-1], row.names=d7.metadata[,1]) # move Sample.Name column as row names
d7.metadata.mtx <- as.matrix(d7.metadata, row.names="Geoduck.ID") # create matrix
# CKECK THE cts.matrix AND THE exp.data.mtx
d7.metadata.mtx <- d7.metadata.mtx[match(colnames(d7.counts_matrix),rownames(d7.metadata.mtx)), ]
# all(rownames(d7.metadata.mtx) %in% colnames(d7.counts_matrix)) # should be TRUE
# all(rownames(d7.metadata.mtx) == colnames(d7.counts_matrix)) # should be TRUE
# all(rownames(d7.metadata.mtx) == colnames(d7.counts_matrix))  # should be TRUE
# build dds
# FULL MODEL
dds.d7 <- DESeqDataSetFromMatrix(countData = d7.counts_matrix,
colData = d7.metadata.mtx,
design = ~ Second_Treament+Primary_Treatment+Second_Treament:Primary_Treatment) # DESeq Data Set (dds) - design as ~Primary_Treatment
# ADDITIVE MODEL
dds.d7.main <- DESeqDataSetFromMatrix(countData = d7.counts_matrix,
colData = d7.metadata.mtx,
design = ~ Second_Treament+Primary_Treatment)
# GROUP MODEL- note! ~group -1` removed the intercept to call each pariwise interaction
dds.d7.group <- DESeqDataSetFromMatrix(countData = d7.counts_matrix,
colData = d7.metadata.mtx,
design = ~ All_Treatment-1)
# ==========================================================
# DAY 14  - FULL MODEL     ==  design = ~ Primary_Treatment+Second_Treament+Primary_Treatment:Second_Treament
#       - ADDITIVE MODEL ==  design = ~ Primary_Treatment+Second_Treament
#       - GROUP    MODEL ==  design = ~ Primary_Treatment+Second_Treament
# ========================================================== #
#####
d14.metadata <- d14.exp_data %>% dplyr::select(c('Sample.Name', 'Primary_Treatment', 'Second_Treament', 'All_Treatment')) # condense dataset to build target matrix
d14.metadata <- data.frame(d14.metadata[,-1], row.names=d14.metadata[,1]) # move Sample.Name column as row names
d14.metadata.mtx <- as.matrix(d14.metadata, row.names="Geoduck.ID") # create matrix
# CKECK THE cts.matrix AND THE exp.data.mtx
d14.metadata.mtx <- d14.metadata.mtx[match(colnames(d14.counts_matrix),rownames(d14.metadata.mtx)), ]
# all(rownames(d14.metadata.mtx) %in% colnames(d14.counts_matrix)) # should be TRUE
# all(rownames(d14.metadata.mtx) == colnames(d14.counts_matrix)) # should be TRUE
# all(rownames(d14.metadata.mtx) == colnames(d14.counts_matrix))  # should be TRUE
# build dds
# FULL MODEL
dds.d14 <- DESeqDataSetFromMatrix(countData = d14.counts_matrix,
colData = d14.metadata.mtx,
design = ~ Second_Treament+Primary_Treatment+Second_Treament:Primary_Treatment) # DESeq Data Set (dds) - design as ~Primary_Treatment
# GROUP MDOEL
dds.d14.group <- DESeqDataSetFromMatrix(countData = d14.counts_matrix,
colData = d14.metadata.mtx,
design = ~ All_Treatment-1)
# ADDITIVE MODEL
dds.d14.main <- DESeqDataSetFromMatrix(countData = d14.counts_matrix,
colData = d14.metadata.mtx,
design = ~ Second_Treament+Primary_Treatment)
# ==========================================================
# DAY 21 -  FULL MODEL == design = ~Primary_Treatment+Second_Treament+Third_Treatment+Primary_Treatment:Second_Treament+Primary_Treatment:Third_Treatment+Second_Treament:Third_Treatment
#---- INPUT: Experiment/design matrix == 'exp.data.d21'
#---- INPUT: TagSeq count matrix == 'cts.matrix.d21.filtered' (3 CPM in 50% samples)
# ==========================================================
#####
d21.metadata <- d21.exp_data %>% dplyr::select(c('Sample.Name', 'Primary_Treatment','Second_Treament', 'Third_Treatment', 'All_Treatment')) # coondense dataset to build target matrix
d21.metadata <- data.frame(d21.metadata[,-1], row.names=d21.metadata[,1]) # move Sample.Name column as row names
d21.metadata.mtx <- as.matrix(d21.metadata, row.names="Geoduck.ID") # create matrix
# CKECK THE cts.matrix AND THE exp.data.mtx
d21.metadata.mtx <- d21.metadata.mtx[match(colnames(d21.counts_matrix),rownames(d21.metadata.mtx)), ]
# all(rownames(d21.metadata.mtx) %in% colnames(d21.counts_matrix)) # should be TRUE
# all(rownames(d21.metadata.mtx) == colnames(d21.counts_matrix)) # should be TRUE
# all(rownames(d21.metadata.mtx) == colnames(d21.counts_matrix))  # should be TRUE
# build dds
# FULL MODEL
dds.d21 <- DESeqDataSetFromMatrix(countData = d21.counts_matrix,
colData = d21.metadata.mtx,
design = ~ Primary_Treatment+
Second_Treament+
Third_Treatment+
Primary_Treatment:Second_Treament+
Primary_Treatment:Third_Treatment+
Second_Treament:Third_Treatment)
# GROUP MDOEL
dds.d21.group <- DESeqDataSetFromMatrix(countData = d21.counts_matrix,
colData = d21.metadata.mtx,
design = ~ All_Treatment-1)
# ADDITIVE MODEL
dds.d21.main <- DESeqDataSetFromMatrix(countData = d21.counts_matrix,
colData = d21.metadata.mtx,
design = ~ Third_Treatment+Second_Treament+Primary_Treatment)
# call path for all output cvs of DE results
path_out.subseq_intxns = 'C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/Analysis/Output/DESeq2/10cpm/DEGs_pairwise_subseqent_exposures/' # call path
res.d7.AMvMM            <- results(dds.d7.group, contrast = list(("All_TreatmentAM"),("All_TreatmentMM")),  alpha= 0.05)
dds.d7.group <- DESeq(dds.d7.group) # group model     wait for this to complete....
dds.d14.group <- DESeq(dds.d14.group) # group model   wait for this to complete....
dds.d21.group <- DESeq(dds.d21.group) # group model      wait for this to complete....
# call path for all output cvs of DE results
path_out.subseq_intxns = 'C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/Analysis/Output/DESeq2/10cpm/DEGs_pairwise_subseqent_exposures/' # call path
res.d7.AMvMM            <- results(dds.d7.group, contrast = list(("All_TreatmentAM"),("All_TreatmentMM")),  alpha= 0.05)
table(res.d7.AMvMM$padj<0.05) #  13 DEGs
resdata.d7.AMvMM        <- as.data.frame(res.d7.AMvMM[order(res.d7.AMvMM$padj), ]) # Order by adjusted p-value
resdata.d7.AMvMM <- resdata.d7.AMvMM %>%  rownames_to_column()
resdata.d7.AMvMM <- resdata.d7.AMvMM %>%  rownames_to_column(V1)
resdata.d7.AMvMM <- resdata.d7.AMvMM %>%  dplyr::rownames_to_column(V1)
resdata.d7.AMvMM <- resdata.d7.AMvMM %>%  dplyr::rownames_to_column()
resdata.d7.AMvMM
resdata.d7.AMvMM$geneSymbol <- row.names(resdata.d7.AMvMM)
resdata.d7.AMvMM_Annot  <- merge(Pgen_annot, resdata.d7.AMvMM, by.x=“V1”,by.y=“geneSymbol”)
resdata.d7.AMvMM_Annot  <- merge(Pgen_annot, resdata.d7.AMvMM, by.x='V1',by.y='geneSymbol')
write.csv(resdata.d7.AMvMM, paste(path_out.subseq_intxns,"Day7.AMvMM.csv")) # write
resdata.d7.AMvMM$geneSymbol <- row.names(resdata.d7.AMvMM)
resdata.d7.AMvMM_Annot  <- merge(Pgen_annot, resdata.d7.AMvMM, by.x='V1',by.y='geneSymbol')
View(resdata.d7.AMvMM_Annot)
write.csv(resdata.d7.AMvMM_Annot, paste(path_out.subseq_intxns,"Day7.AMvMM.csv")) # write
resdata.d7.AMvMM_Annot        <- as.data.frame(resdata.d7.AMvMM_Annot[order(resdata.d7.AMvMM_Annot$padj), ]) # Order by adjusted p-value
write.csv(resdata.d7.AMvMM_Annot, paste(path_out.subseq_intxns,"Day7.AMvMM.csv")) # write
res.d7.ASvMS            <- results(dds.d7.group, contrast = list(("All_TreatmentAS"),("All_TreatmentMS")),  alpha= 0.05)
table(res.d7.ASvMS$padj<0.05) #  13 DEGs
resdata.d7.ASvMS $geneSymbol <- row.names(resdata.d7.ASvMS)
res.d7.ASvMS_Annot  <- merge(Pgen_annot, resdata.d7.ASvMS, by.x='V1',by.y='geneSymbol')
resdata.d7.ASvMS_Annot        <- as.data.frame(res.d7.ASvMS[order(res.d7.ASvMS$padj), ]) # Order by adjusted p-value
resdata.d7.ASvMS_Annot$geneSymbol  <- row.names(resdata.d7.ASvMS_Annot)
resdata.d7.ASvMS        <- as.data.frame(res.d7.ASvMS[order(res.d7.ASvMS$padj), ]) # Order by adjusted p-value
resdata.d7.ASvMS$geneSymbol  <- row.names(resdata.d7.ASvMS)
res.d7.ASvMS_Annot            <- merge(Pgen_annot, resdata.d7.ASvMS, by.x='V1',by.y='geneSymbol')
write.csv(resdata.d7.ASvMS_Annot, paste(path_out.subseq_intxns,"Day7.ASvMS.csv")) # write
write.csv(res.d7.ASvMS_Annot, paste(path_out.subseq_intxns,"Day7.ASvMS.csv")) # write
resdata.d7.ASvMS             <- as.data.frame(res.d7.ASvMS) # Order by adjusted p-value
resdata.d7.ASvMS$geneSymbol  <- row.names(resdata.d7.ASvMS)
res.d7.ASvMS_Annot           <- merge(Pgen_annot, resdata.d7.ASvMS, by.x='V1',by.y='geneSymbol')
res.d7.ASvMS_Annot             <- as.data.frame(res.d7.ASvMS_Annot[order(res.d7.ASvMS_Annot$padj), ]) # Order by adjusted p-value
write.csv(res.d7.ASvMS_Annot, paste(path_out.subseq_intxns,"Day7.ASvMS.csv")) # write
res.d14.AMvMM            <- results(dds.d14.group, contrast = list(("All_TreatmentAM"),("All_TreatmentMM")),  alpha= 0.05)
table(res.d14.AMvMM$padj<0.05) #  5 DEGs
resdata.d14.AMvMM$geneSymbol <- row.names(resdata.d14.AMvMM)
res.d14.AMvMM            <- results(dds.d14.group, contrast = list(("All_TreatmentAM"),("All_TreatmentMM")),  alpha= 0.05)
table(res.d14.AMvMM$padj<0.05) #  5 DEGs
resdata.d14.AMvMM$geneSymbol <- row.names(res.d14.AMvMM)
res.d14.AMvMM
res.d14.AMvMM            <- results(dds.d14.group, contrast = list(("All_TreatmentAM"),("All_TreatmentMM")),  alpha= 0.05)
table(res.d14.AMvMM$padj<0.05) #  5 DEGs
resdata.d7.AMvMM               <- as.data.frame(res.d14.AMvMM) # Order by adjusted p-value
resdata.d14.AMvMM$geneSymbol   <- row.names(res.d14.AMvMM)
res.d14.AMvMM            <- results(dds.d14.group, contrast = list(("All_TreatmentAM"),("All_TreatmentMM")),  alpha= 0.05)
table(res.d14.AMvMM$padj<0.05) #  5 DEGs
resdata.d7.AMvMM               <- as.data.frame(res.d14.AMvMM) # Order by adjusted p-value
resdata.d14.AMvMM$geneSymbol   <- row.names(resdata.d7.AMvMM)
res.d14.AMvMM            <- results(dds.d14.group, contrast = list(("All_TreatmentAM"),("All_TreatmentMM")),  alpha= 0.05)
table(res.d14.AMvMM$padj<0.05) #  5 DEGs
resdata.d14.AMvMM               <- as.data.frame(res.d14.AMvMM) # Order by adjusted p-value
resdata.d14.AMvMM$geneSymbol   <- row.names(resdata.d7.AMvMM)
resdata.d14.AMvMM_Annot        <- merge(Pgen_annot, resdata.d14.AMvMM, by.x='V1',by.y='geneSymbol')
resdata.d14.AMvMM_Annot        <- as.data.frame(resdata.d14.AMvMM_Annot[order(resdata.d14.AMvMM_Annot$padj), ]) # Order by adjusted p-value
write.csv(resdata.d14.AMvMM_Annot, paste(path_out.subseq_intxns,"Day14.AMvMM.csv")) # write
res.d14.ASvMS            <- results(dds.d14.group, contrast = list(("All_TreatmentAS"),("All_TreatmentMS")),  alpha= 0.05)
table(res.d14.ASvMS$padj<0.05) #  15 DEGs
resdata.d14.ASvMS              <- as.data.frame(res.d14.ASvMS) # Order by adjusted p-value
resdata.d14.ASvMS             <- as.data.frame(resdata.d14.ASvMS) # Order by adjusted p-value
resdata.d14.ASvMS$geneSymbol  <- row.names(resdata.d14.ASvMS)
res.d14.ASvMS_Annot           <- merge(Pgen_annot, resdata.d14.ASvMS, by.x='V1',by.y='geneSymbol')
res.d14.ASvMS_Annot             <- as.data.frame(res.d14.ASvMS_Annot[order(res.d14.ASvMS_Annot$padj), ]) # Order by adjusted p-value
write.csv(res.d14.ASvMS_Annot, paste(path_out.subseq_intxns,"Day14.ASvMS.csv")) # writ
resdata.d14.AMvMM_Annot_DEGs   <- resdata.d14.AMvMM_Annot %>% filter(padj <0.05)
write.csv(resdata.d14.AMvMM_Annot_DEGs, paste(path_out.subseq_intxns,"Day14.AMvMM.csv")) # write
resdata.d14.AMvMM_Annot_DEGs   <- resdata.d14.AMvMM_Annot %>% filter(padj <0.05)
write.csv(resdata.d14.AMvMM_Annot_DEGs, paste(path_out.subseq_intxns,"Day14.AMvMM.csv")) # write
res.d14.ASvMS_Annot           <- as.data.frame(res.d14.ASvMS_Annot[order(res.d14.ASvMS_Annot$padj), ]) # Order by adjusted p-value
res.d14.ASvMS_Annot_DEGs      <- res.d14.ASvMS_Annot %>% filter(padj <0.05)
write.csv(res.d14.ASvMS_Annot, paste(path_out.subseq_intxns,"Day14.ASvMS.csv")) # write
res.d7.ASvMS_Annot_DEGs      <- res.d7.ASvMS_Annot %>% filter(padj <0.05)
write.csv(res.d7.ASvMS_Annot_DEGs, paste(path_out.subseq_intxns,"Day7.ASvMS.csv")) # write
write.csv(res.d14.ASvMS_Annot_DEGs, paste(path_out.subseq_intxns,"Day14.ASvMS.csv")) # write
resdata.d7.AMvMM_Annot_DEGs   <- resdata.d7.AMvMM_Annot %>% filter(padj <0.05)
write.csv(resdata.d7.AMvMM_Annot_DEGs, paste(path_out.subseq_intxns,"Day7.AMvMM.csv")) # write
dds.d21.group
res.d21.AMMvMMM                 <- results(dds.d21.group, contrast = list(("All_TreatmentAMM"),("All_TreatmentMMM")),  alpha= 0.05)
table(res.d21.AMvMM$padj<0.05) #  5 DEGs
table(res.d21.AMMvMMM$padj<0.05) #  5 DEGs
resdata.d21.AMMvMMM              <- as.data.frame(res.d21.AMMvMMM) # Order by adjusted p-value
resdata.d21.AMMvMMM$geneSymbol   <- row.names(resdata.d7.AMMvMMM)
resdata.d21.AMMvMMM$geneSymbol   <- row.names(resdata.d21.AMMvMMM)
resdata.d21.AMMvMMM_Annot        <- merge(Pgen_annot, resdata.d21.AMMvMMM, by.x='V1',by.y='geneSymbol')
resdata.d21.AMMvMMM_Annot        <- as.data.frame(resdata.d21.AMMvMMM_Annot[order(resdata.d21.AMMvMMM_Annot$padj), ]) # Order by adjusted p-value
resdata.d21.AMMvMMM_Annot_DEGs   <- resdata.d21.AMMvMMM_Annot %>% filter(padj <0.05)
write.csv(resdata.d21.AMMvMMM_Annot_DEGs, paste(path_out.subseq_intxns,"Day21.AMMvMMM.csv")) # write
res.d21.ASMvMSM                <- results(dds.d21.group, contrast = list(("All_TreatmentASM"),("All_TreatmentMSM")),  alpha= 0.05)
table(res.d21.ASMvMSM$padj<0.05) #   26 DEGs
resdata.d21.ASMvMSM             <- as.data.frame(res.d21.ASMvMSM) # Order by adjusted p-value
resdata.d21.ASMvMSM$geneSymbol   <- row.names(resdata.d21.ASMvMSM)
resdata.d21.ASMvMSM_Annot        <- merge(Pgen_annot, resdata.d21.ASMvMSM, by.x='V1',by.y='geneSymbol')
resdata.d21.ASMvMSM_Annot        <- as.data.frame(resdata.d21.ASMvMSM_Annot[order(resdata.d21.ASMvMSM_Annot$padj), ]) # Order by adjusted p-value
resdata.d21.ASMvMSM_Annot_DEGs   <- resdata.d21.ASMvMSM_Annot %>% filter(padj <0.05)
write.csv(resdata.d21.ASMvMSM_Annot_DEGs, paste(path_out.subseq_intxns,"Day21.ASMvMSM.csv")) # write
s the purpose of this script and how does it differ from the full dataset ('_all' version)?
# One can think of this analysis as a sanity test relative to the full analysis of controls (ambient exposures)
#  to hone in on the our biological hypothesis; the goal of this experimental design is to determine whether
#  stress history (acclimation) affects gene expression under subseqent stress encounters.
#  Thus, to proposerly address this it is critical to let the data do the work and see the broad patterns (completed in other script)
#  and run a sanity check against target samples core to this question
# To do this....
# We will focus on the WGCNA results from the scripts '..._subseq_exp' in which samples from ambient subseqwent exposures were ommitted
# WHY? we are interest in the how the initial acclimation ( M and A) affected gene expression patterns
# during the subseqent stress. Ambient concurrent conditions (i.e. Second A and Third A) to assess the response specifically under  elevated pCO2
# LOAD PACKAGES
library(KEGGprofile) # BiocManager::install("KEGGprofile")
library(clusterProfiler)
library(KEGGREST)
library(tidyr)
library(stringr)
library(forcats)
library(ggplot2)
library(scales)
library(ape)
library(data.table)
library(tidyverse)
library(fBasics)
# SET WORKING DIRECTORY   ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;: #
setwd("C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/")
# LOAD DATA  :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;: #
# Crass_gigas_genome_dataframe - what is this? after KEGG enrichment analysis this script with unlist genes ithin enriched pathways and merge IDs to obtain the gene names
#NOTE: view the Pgenerasa genome - there are no instance of '-like', '-like isoform', '-like protein precursor', 'isoform X', 'precursor' at the end of terms,
Crass_gigas_genome <- keggList("crg") # call the C. gigas genome! - notice the csa terms are rownames!
Crass_gigas_genome_dataframe <- as.data.frame(Crass_gigas_genome) %>%  rownames_to_column() # with will allow us to merge
colnames(Crass_gigas_genome_dataframe) <- c('sseqid', 'Gene_name') # rename the columns - call the KP term 'sseqid' to merge with the blast data - youll see why donwstream below...
# Crass_gigas_genome_dataframe2 <- tibble::rownames_to_column(Crass_gigas_genome_dataframe, "Cgigas_KEGG_IDs") # tubbel to make th rows a column
# Crass_gigas_genome_dataframe2$Gene_terms  <- sub(" \\-like isoform|-like precursor|-like protein precursor| precursor| isoform X.*", "", Crass_gigas_genome_dataframe$Gene_terms) # none of the Pgenerosa genome has "isoform X1" as the putative term - remove this and merge to see if this increases mapping efficieny
# Crass_gigas_genome_dataframe2$Gene_terms  <- sub("-like$","",Crass_gigas_genome_dataframe$Gene_terms) # remove all occurance of "-like" only when they occur at the end of the string using '$' to call 'only at the end of the string
# hashed out lines are for reducing the name down to core ID (wihtout iosofrm, precorcsors -like, etc. in putative gene names)
# Pgen annotation files and the blastx (using DIAMONd) hits to Cgigas to use downstream in KEGG pathway analysis
Geoduck_annotation      <- read.delim2(file="C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/Seq_details/Panopea-generosa-genes-annotations.txt", header=F)
ref_update_20210602     <- read.gff("C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/Seq_details/Panopea-generosa-v1.0.a4.gene.gff3", GFF3 = TRUE) # use library(ape) to import a gff3 as a datatable
crgKEGG_Pgenref_DIAMOND <- read.table(file ="C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/HPC_work/Output/crgKEGG_diamond_out.txt", sep = '\t', header = F)
colnames(crgKEGG_Pgenref_DIAMOND) <- c('qseqid','sseqid','pident', 'length', 'mismatch', 'gapopen', 'qstart', 'qend', 'sstart', 'send', 'evalue', 'bitscore') # change the names of the columns if the best blast hits
# WGCNA resilts (all treatments)
d7_WGCNA_all    <- read.csv("Analysis/Output/WGCNA/subseq_hypercapnia/Day7/d7.WGCNA_ModulMembership.csv")
d14_WGCNA_all   <- read.csv("Analysis/Output/WGCNA/subseq_hypercapnia/Day14/d14.WGCNA_ModulMembership.csv")
d21_WGCNA_all   <- read.csv("Analysis/Output/WGCNA/subseq_hypercapnia/Day21/d21.WGCNA_ModulMembership.csv")
table(d21_WGCNA_all$moduleColor)
# DESEq2 results - load data and assign up and downregualted genes!
DESeq2_PrimaryEffects    <- read.csv(file="Analysis/Output/DESeq2/10cpm/DE_PrimaryTreatment.All.csv", sep=',', header=TRUE)
# Day 7
d7_PrimaryEffects_up   <- DESeq2_PrimaryEffects %>% dplyr::filter(Day_Trmt %in% 'Day7_Primary_AvM',  up == "TRUE")   %>% dplyr::arrange(desc(log2FoldChange)) %>% dplyr::mutate(DE_dir = 'up')
d7_PrimaryEffects_down <- DESeq2_PrimaryEffects %>% dplyr::filter(Day_Trmt %in% 'Day7_Primary_AvM',  down == "TRUE") %>% dplyr::arrange(desc(abs(log2FoldChange))) %>% dplyr::mutate(DE_dir = 'down')
# Day 14
d14_PrimaryEffects_up   <- DESeq2_PrimaryEffects %>% dplyr::filter(Day_Trmt %in% 'Day14_Primary_AvM',  up == "TRUE")   %>% dplyr::arrange(desc(log2FoldChange)) %>% dplyr::mutate(DE_dir = 'up')
d14_PrimaryEffects_down <- DESeq2_PrimaryEffects %>% dplyr::filter(Day_Trmt %in% 'Day14_Primary_AvM',  down == "TRUE") %>% dplyr::arrange(desc(abs(log2FoldChange))) %>% dplyr::mutate(DE_dir = 'down')
# Day 21
d21_PrimaryEffects_up   <- DESeq2_PrimaryEffects %>% dplyr::filter(Day_Trmt %in% 'Day21_Primary_AvM',  up == "TRUE")   %>% dplyr::arrange(desc(log2FoldChange)) %>% dplyr::mutate(DE_dir = 'up')
d21_PrimaryEffects_down <- DESeq2_PrimaryEffects %>% dplyr::filter(Day_Trmt %in% 'Day21_Primary_AvM',  down == "TRUE") %>% dplyr::arrange(desc(abs(log2FoldChange))) %>% dplyr::mutate(DE_dir = 'down')
# merge for a master file of all primary effects (acclimation 110 days under ambient pCO2 vs. moderate pCO2)  on DE
DESeq2_PrimaryEffects_master <- rbind(d7_PrimaryEffects_up, d7_PrimaryEffects_down,
d14_PrimaryEffects_up, d14_PrimaryEffects_down,
d21_PrimaryEffects_up, d21_PrimaryEffects_down)
# INITAL SANITY CHECKS AND FILTER FOR BEST BLAST HITS  :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;: #
#  INITIAL ASSESSMENTS
#  in the annotated geneome relative to the number of genes that hat a blast hit to Cgigas proteins (using blastx in DIAMOND - review the HPC script and output folder....)
# lets see the coverage of the blast hist to the crg KEGG genome
length(na.omit(Geoduck_annotation$V7)) # 14671 total genes with a gene name
length(unique(crgKEGG_Pgenref_DIAMOND$qseqid)) # 18027 of 14671
(( length(unique(crgKEGG_Pgenref_DIAMOND$qseqid)) ) / ( length(na.omit(Geoduck_annotation$V7)) ) ) * 100 # 122.8751 % of annotated unigenes genes had a blast hit on default settings!
###############################################################################################################################################
#::::::::::::::::::::::::::::::::::: MERGE PGENEROSA WITH CGIGAS BY GENE SEQ RELATEDNESS :::::::::::::::::::::::::::::::::::::::::::::::::::;: #
#:::::::::::::::::::::::::::::::::::::: BEST OPTION!!! (next cluster is by gene name) ::::::::::::::::::::::::::::::::::::::::::::::::::::::;: #
# FILTER BEST BLAST HITS - Clean the blast (using DIAMOND) hits ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;: #
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;: #
#::::::::::::::::::::::::::::::::::::::::::::::::::::::  crgKEGG_PgenREF_besthits  :::::::::::::::::::::::::::::::::::::::::::::::::::::::::;: #
###############################################################################################################################################
# merge with the cgigas KEGG genome IDs
crgKEGG_Pgenref_DIAMOND_merge  <- merge(crgKEGG_Pgenref_DIAMOND, Crass_gigas_genome_dataframe, by = 'sseqid')
# PERCENT OF ANNOTATED (GENE NAME AND GO TERM) UNIGENS OF PGENEROSA WITH A BLAST HIT
# lets see how many of the gens in the Pgneorsa geome with putative gene name (unigenes annotated) have a successful blast hit!
Geoduck_annotation_OM <- na.omit(Geoduck_annotation) # remove all instances of NA (genes without gene name!)
test <- Geoduck_annotation_OM %>% dplyr::filter(V1 %in% crgKEGG_Pgenref_DIAMOND_merge$qseqid) # filter this dataset by the names in the crg KEGG blast result set
length(test$V1) # 12811 total unigenes from the blast hit in the pool of unigenes iwth gene name
( length(test$V1) / length(Geoduck_annotation_OM$V1) ) * 100 # 87.32193 % of the Pgen genome (unigenes with gene name) had a successful blast hit to the Cgigas protein database!
# NOTE: we see that there are many genes labeled as "uncharacterized protein ..."
# In some cases this gene may have the best bti sccore (lowest evalue) and not contribute to the pathway enrichment, whereas another significant gene
# with putative gene name/annotation can be overlooked! Thus, we will remoe all instanced in  which a blast hit contained an unchracterized protein occurance
# before we call for the blast hit with greatest stttrongt (lowest evalue,highest bitc score)
# ommit all rows that contain the specifi string"uncharacterized protein" in the 'Gene_name' column
crgKEGG_Pgenref_DIAMOND_OM <- crgKEGG_Pgenref_DIAMOND_merge[- grep("uncharacterized", crgKEGG_Pgenref_DIAMOND_merge$Gene_name),]
length(unique(crgKEGG_Pgenref_DIAMOND_OM$qseqid)) # 13726 of 14671 - narrowed down about 5000 hits!
# FILTER BEST BLAST HITS - Clean the blast (using DIAMOND) hits
# call unique rows (containg unique Pgenerosa IDs and the corresponsding 'crg' KEGG number or 'KO' ID)
# w/ the hightest bit score
crgKEGG_PgenREF           <- as.data.table(crgKEGG_Pgenref_DIAMOND_OM)
crgKEGG_PgenREF_besthits  <- crgKEGG_PgenREF[,.SD[which.max(bitscore)],by=qseqid] # best hits by highest bit score - do sanity check below..
# sanity check - run by max bitcore and by min evalue - should all say TRUE - use View(booleans)
bybitscore  <- crgKEGG_PgenREF[,.SD[which.max(bitscore)],by=qseqid] # max bitscore
byevalue    <- crgKEGG_PgenREF[,.SD[which.min(evalue)],by=qseqid] # min evalue
# View(bybitscore == byevalue) # use View(booleans). should say TRUE everywhere - this confims the assumption that whether btcore or evalue, you get the same strongest hit
View(crgKEGG_PgenREF_besthits) # file does not contain any ocurance s of 'uncharacterized..." that will not provide insight on pathway enrichment
# WHAT IS THE MEANSD BIT SCORE, EVALUE AND PERCENTID OF THE best hits (note: also NON 'uncharacteried protein or uncharacterized family)
mean(crgKEGG_PgenREF_besthits$pident) # 55.21958
colnames(crgKEGG_PgenREF_besthits) #  "qseqid"    "sseqid"    "pident"    "length"    "mismatch"  "gapopen"   "qstart"    "qend"      "sstart"    "send"      "evalue"    "bitscore"  "Gene_name"
colMeans(crgKEGG_PgenREF_besthits[,c('pident', 'length', 'evalue', 'bitscore')], na.rm=TRUE)  # pident       length       evalue     bitscore   # 5.521958e+01 1.505178e+02 1.126924e-05 1.290717e+02
colStdevs(crgKEGG_PgenREF_besthits[,c('pident', 'length', 'evalue', 'bitscore')], na.rm=TRUE) # pident       length       evalue     bitscore  # 1.776542e+01 1.842089e+02 7.259175e-05 1.105934e+02
table(d21_WGCNA_all$moduleColor)
crgKEGG_PgenREF_besthits$qseqid
colnames(crgKEGG_PgenREF_besthits)[1:2] <- c('geneSymbol', 'crg_KO') # reanme the first two columns to merge witht he WGCNA results!
d7_WGCNA_crgKEGGhits  <- merge(d7_WGCNA_all, crgKEGG_PgenREF_besthits[,c(1:2)], by ='geneSymbol')
d14_WGCNA_crgKEGGhits <- merge(d14_WGCNA_all, crgKEGG_PgenREF_besthits[,c(1:2)], by ='geneSymbol')
d21_WGCNA_crgKEGGhits <- merge(d21_WGCNA_all, crgKEGG_PgenREF_besthits[,c(1:2)], by ='geneSymbol')
# Day 7 for loop ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;;; #
Day7_WGCNA_sigmodules <- as.data.frame(c('blue','brown', 'greenyellow', 'turquoise'))
for (i in 1:nrow(Day7_WGCNA_sigmodules)) {
# start with loop by calling the row value common with the 'Master_KEGG_BPTerms' data frind from rbind above
modColor <- Day7_WGCNA_sigmodules[i,1]
# call the module color in the Day 7 data
module_without_filter   <- d7_WGCNA_all %>% dplyr::filter(moduleColor %in% modColor)
genes_per_module        <- length(unique(module_without_filter$geneSymbol)) # nrow(ModuleLoop) # use this for the looped print out
annotgenes_per_module   <- length(na.omit(module_without_filter$HGNC)) # nrow(ModuleLoop) # use this for the looped print out
ModuleLoop_blasthit            <- d7_WGCNA_crgKEGGhits %>% dplyr::filter(moduleColor %in% modColor)
genes_per_module_blasthit      <- na.omit(module_without_filter)  %>% # ommit  genes without gene name annotation
dplyr::filter(moduleColor %in% modColor) %>%   # filter for the module loop
dplyr::filter(geneSymbol %in% d7_WGCNA_crgKEGGhits$geneSymbol) %>%  # call only genes that have a blast hit
nrow() #
perc_annot_genes_with_blasthit <- ( genes_per_module_blasthit / annotgenes_per_module ) *100
# calculate the percent mapped and print this...
print(paste("Day7", modColor, " ",
genes_per_module, "genes per module",
annotgenes_per_module, " annotated; ",
genes_per_module_blasthit, " or", perc_annot_genes_with_blasthit,"% annotated genes with blasthit", sep = ' '))
# Run KEGG analysis
KEGG_vector_Pgen_Cgigas   <- as.vector(gsub(".*:","",ModuleLoop_blasthit$crg_KO)) # ommit the 'crg:' before the actual terms
KEGG_cgigas <- enrichKEGG(gene = KEGG_vector_Pgen_Cgigas,
organism  = 'crg', # 'hsa' is human 'crg' is pacific oyster
pvalueCutoff = 0.05)
# if loop to output the KEGG enrichment analysis ONLY if genes were successfully mapped...
if (  nrow(as.data.frame(head(KEGG_cgigas))) > 0 ) {
# creat dateframe and write the csv file out
df <- as.data.frame(head(KEGG_cgigas))
rownames(df) <- c()
KEGGoutput <- as.data.frame(do.call(cbind.data.frame, df))
KEGGoutput$GeneRatio_2 <- gsub("/"," of ", KEGGoutput$GeneRatio)
KEGGoutput$Rich_Factor <- (  (as.numeric(sub("/.*", "", KEGGoutput$GeneRatio))) / (as.numeric(sub("/.*", "", KEGGoutput$BgRatio)))  )
write.csv(KEGGoutput, file = paste("Analysis/Output/KEGG/subseq_hypercapnia/WGCNA/Day7_",modColor,"_KEGG_allgenes.csv", sep =''))
# Plot
theme_set(theme_classic())
plot<- KEGGoutput %>%
ggplot(aes(x=reorder(Description, Rich_Factor), y= Rich_Factor)) +
geom_point( aes(col=qvalue, size=Count)) +   # Draw points
geom_segment(aes(x=Description,
xend=Description,
y=min(Rich_Factor),
yend=max(Rich_Factor)),
linetype=NA,
size=0) +   # Draw dashed lines
labs(title="Day 7",
x = "Pathway",
y = "Rich Factor",
subtitle=paste("WGCNA Module:", modColor, sep =' ')) +
coord_flip()
pdf(paste("Analysis/Output/KEGG/subseq_hypercapnia/WGCNA/Day7_",modColor,"_RichFactorPlot.pdf", sep =''), width=5, height=6)
print(plot)
dev.off()
# stringsplit and unnest for a data set of genes and IDs associated with each pathway
df_2 <- as.data.frame(KEGG_cgigas)[c(1:2,8:9)]
df_2$gene_IDs <- as.vector(strsplit(as.character(df_2$geneID), "/"))
colnames(df_2) <- c("Cgigas_PathwayID", "Pathway_Description", "Pathway_gene_list", "Pathway_gene_count", "gene_IDs")
df_3 <- unnest(df_2, gene_IDs)
df_3$Cgigas_KEGG_IDs <- paste("crg:", df_3$gene_IDs, sep='')
Crass_gigas_ref <- Crass_gigas_genome_dataframe %>% mutate(Cgigas_KEGG_IDs = Crass_gigas_genome_dataframe$sseqid) %>% select(c('Cgigas_KEGG_IDs','Gene_name'))
df_final <- merge(df_3, Crass_gigas_ref, by='Cgigas_KEGG_IDs')
write.csv(df_final, file = paste("Analysis/Output/KEGG/subseq_hypercapnia/WGCNA/Day7_",modColor,"_KEGG_allgenes_unlisted.csv", sep =''))
} else {}
print(paste("Finished! Day7 module = ", modColor, sep = " "))
}
# Day 14 for loop ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;;; #
Day14_WGCNA_sigmodules <- as.data.frame(c('pink','blue'))
for (i in 1:nrow(Day14_WGCNA_sigmodules)) {
# start with loop by calling the row value common with the 'Master_KEGG_BPTerms' data frind from rbind above
modColor <- Day14_WGCNA_sigmodules[i,1]
# call the module color in the Day 7 data
module_without_filter   <- d14_WGCNA_all %>% dplyr::filter(moduleColor %in% modColor)
genes_per_module        <- length(unique(module_without_filter$geneSymbol)) # nrow(ModuleLoop) # use this for the looped print out
annotgenes_per_module   <- length(na.omit(module_without_filter$HGNC)) # nrow(ModuleLoop) # use this for the looped print out
ModuleLoop_blasthit            <- d14_WGCNA_crgKEGGhits %>% dplyr::filter(moduleColor %in% modColor)
genes_per_module_blasthit      <- na.omit(module_without_filter)  %>% # ommit  genes without gene name annotation
dplyr::filter(moduleColor %in% modColor) %>%   # filter for the module loop
dplyr::filter(geneSymbol %in% d14_WGCNA_crgKEGGhits$geneSymbol) %>%  # call only genes that have a blast hit
nrow() #
perc_annot_genes_with_blasthit <- ( genes_per_module_blasthit / annotgenes_per_module ) *100
# calculate the percent mapped and print this...
print(paste("Day14", modColor, " ",
genes_per_module, "genes per module",
annotgenes_per_module, " annotated; ",
genes_per_module_blasthit, " or", perc_annot_genes_with_blasthit,"% annotated genes with blasthit", sep = ' '))
# Run KEGG analysis
KEGG_vector_Pgen_Cgigas   <- as.vector(gsub(".*:","",ModuleLoop_blasthit$crg_KO)) # ommit the 'crg:' before the actual terms
KEGG_cgigas <- enrichKEGG(gene = KEGG_vector_Pgen_Cgigas,
organism  = 'crg', # 'hsa' is human 'crg' is pacific oyster
pvalueCutoff = 0.05)
# if lloop to output the KEGG enrichment analysis ONLY if genes were successfully mapped...
if (  nrow(as.data.frame(head(KEGG_cgigas))) > 0 ) {
# creat dateframe and write the csv file out
df <- as.data.frame(head(KEGG_cgigas))
rownames(df) <- c()
KEGGoutput <- as.data.frame(do.call(cbind.data.frame, df))
KEGGoutput$GeneRatio_2 <- gsub("/"," of ", KEGGoutput$GeneRatio)
KEGGoutput$Rich_Factor <- (  (as.numeric(sub("/.*", "", KEGGoutput$GeneRatio))) / (as.numeric(sub("/.*", "", KEGGoutput$BgRatio)))  )
write.csv(KEGGoutput, file = paste("Analysis/Output/KEGG/subseq_hypercapnia/WGCNA/Day14_",modColor,"_KEGG_allgenes.csv", sep =''))
# Plot
theme_set(theme_classic())
plot<- KEGGoutput %>%
ggplot(aes(x=reorder(Description, Rich_Factor), y= Rich_Factor)) +
geom_point( aes(col=qvalue, size=Count)) +   # Draw points
geom_segment(aes(x=Description,
xend=Description,
y=min(Rich_Factor),
yend=max(Rich_Factor)),
linetype=NA,
size=0) +   # Draw dashed lines
labs(title="Day 14",
x = "Pathway",
y = "Rich Factor",
subtitle=paste("WGCNA Module:", modColor, sep =' ')) +
coord_flip()
pdf(paste("Analysis/Output/KEGG/subseq_hypercapnia/WGCNA/Day14_",modColor,"_RichFactorPlot.pdf", sep =''), width=5, height=6)
print(plot)
dev.off()
# stringsplit and unnest for a data set of genes and IDs associated with each pathway
df_2 <- as.data.frame(KEGG_cgigas)[c(1:2,8:9)]
df_2$gene_IDs <- as.vector(strsplit(as.character(df_2$geneID), "/"))
colnames(df_2) <- c("Cgigas_PathwayID", "Pathway_Description", "Pathway_gene_list", "Pathway_gene_count", "gene_IDs")
df_3 <- unnest(df_2, gene_IDs)
df_3$Cgigas_KEGG_IDs <- paste("crg:", df_3$gene_IDs, sep='')
Crass_gigas_ref <- Crass_gigas_genome_dataframe %>% mutate(Cgigas_KEGG_IDs = Crass_gigas_genome_dataframe$sseqid) %>% select(c('Cgigas_KEGG_IDs','Gene_name'))
df_final <- merge(df_3, Crass_gigas_ref, by='Cgigas_KEGG_IDs')
write.csv(df_final, file = paste("Analysis/Output/KEGG/subseq_hypercapnia/WGCNA/Day14_",modColor,"_KEGG_allgenes_unlisted.csv", sep =''))
} else {}
print(paste("Finished! Day14 module = ", modColor, sep = " "))
}
# Day 21 for loop ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;;; #
Day21_WGCNA_sigmodules <- as.data.frame(c('yellow','magenta', 'blue', 'pink'))
for (i in 1:nrow(Day21_WGCNA_sigmodules)) {
# start with loop by calling the row value common with the 'Master_KEGG_BPTerms' data frind from rbind above
modColor <- Day21_WGCNA_sigmodules[i,1]
# call the module color in the Day 7 data
module_without_filter   <- d21_WGCNA_all %>% dplyr::filter(moduleColor %in% modColor)
genes_per_module        <- length(unique(module_without_filter$geneSymbol)) # nrow(ModuleLoop) # use this for the looped print out
annotgenes_per_module   <- length(na.omit(module_without_filter$HGNC)) # nrow(ModuleLoop) # use this for the looped print out
ModuleLoop_blasthit            <- d21_WGCNA_crgKEGGhits %>% dplyr::filter(moduleColor %in% modColor)
genes_per_module_blasthit      <- na.omit(module_without_filter)  %>% # ommit  genes without gene name annotation
dplyr::filter(moduleColor %in% modColor) %>%   # filter for the module loop
dplyr::filter(geneSymbol %in% d21_WGCNA_crgKEGGhits$geneSymbol) %>%  # call only genes that have a blast hit
nrow() #
perc_annot_genes_with_blasthit <- ( genes_per_module_blasthit / annotgenes_per_module ) *100
# calculate the percent mapped and print this...
print(paste("Day21", modColor, " ",
genes_per_module, "genes per module",
annotgenes_per_module, " annotated; ",
genes_per_module_blasthit, " or", perc_annot_genes_with_blasthit,"% annotated genes with blasthit", sep = ' '))
# Run KEGG analysis
KEGG_vector_Pgen_Cgigas   <- as.vector(gsub(".*:","",ModuleLoop_blasthit$crg_KO)) # ommit the 'crg:' before the actual terms
KEGG_cgigas <- enrichKEGG(gene = KEGG_vector_Pgen_Cgigas,
organism  = 'crg', # 'hsa' is human 'crg' is pacific oyster
pvalueCutoff = 0.05)
# if lloop to output the KEGG enrichment analysis ONLY if genes were successfully mapped...
if (  nrow(as.data.frame(head(KEGG_cgigas))) > 0 ) {
# creat dateframe and write the csv file out
df <- as.data.frame(head(KEGG_cgigas))
rownames(df) <- c()
KEGGoutput <- as.data.frame(do.call(cbind.data.frame, df))
KEGGoutput$GeneRatio_2 <- gsub("/"," of ", KEGGoutput$GeneRatio)
KEGGoutput$Rich_Factor <- (  (as.numeric(sub("/.*", "", KEGGoutput$GeneRatio))) / (as.numeric(sub("/.*", "", KEGGoutput$BgRatio)))  )
write.csv(KEGGoutput, file = paste("Analysis/Output/KEGG/subseq_hypercapnia/WGCNA/Day21_",modColor,"_KEGG_allgenes.csv", sep =''))
# Plot
theme_set(theme_classic())
plot<- KEGGoutput %>%
ggplot(aes(x=reorder(Description, Rich_Factor), y= Rich_Factor)) +
geom_point( aes(col=qvalue, size=Count)) +   # Draw points
geom_segment(aes(x=Description,
xend=Description,
y=min(Rich_Factor),
yend=max(Rich_Factor)),
linetype=NA,
size=0) +   # Draw dashed lines
labs(title="Day 21",
x = "Pathway",
y = "Rich Factor",
subtitle=paste("WGCNA Module:", modColor, sep =' ')) +
coord_flip()
pdf(paste("Analysis/Output/KEGG/subseq_hypercapnia/WGCNA/Day21_",modColor,"_RichFactorPlot.pdf", sep =''), width=5, height=6)
print(plot)
dev.off()
# stringsplit and unnest for a data set of genes and IDs associated with each pathway
df_2 <- as.data.frame(KEGG_cgigas)[c(1:2,8:9)]
df_2$gene_IDs <- as.vector(strsplit(as.character(df_2$geneID), "/"))
colnames(df_2) <- c("Cgigas_PathwayID", "Pathway_Description", "Pathway_gene_list", "Pathway_gene_count", "gene_IDs")
df_3 <- unnest(df_2, gene_IDs)
df_3$Cgigas_KEGG_IDs <- paste("crg:", df_3$gene_IDs, sep='')
Crass_gigas_ref <- Crass_gigas_genome_dataframe %>% mutate(Cgigas_KEGG_IDs = Crass_gigas_genome_dataframe$sseqid) %>% select(c('Cgigas_KEGG_IDs','Gene_name'))
df_final <- merge(df_3, Crass_gigas_ref, by='Cgigas_KEGG_IDs')
write.csv(df_final, file = paste("Analysis/Output/KEGG/subseq_hypercapnia/WGCNA/Day21_",modColor,"_KEGG_allgenes_unlisted.csv", sep =''))
} else {}
print(paste("Finished! Day21 module = ", modColor, sep = " "))
}
