slim_d7  <- data.frame(Day = 'Day7',  Gene.ID = unlist(slim_MF[1,10]))  # name the first row
slim_d14 <- data.frame(Day = 'Day14', Gene.ID = unlist(slim_MF[2,10])) # name the second row
slim_d21 <- data.frame(Day = 'Day21', Gene.ID = unlist(slim_MF[3,10])) # name the third row
slim_df  <- list(
Day7_BrownMod           = slim_d7$Gene.ID,
Day14_BrownMod          = slim_d14$Gene.ID,
Day21_BlueMod           = slim_d21$Gene.ID) # create a list to call in using ggvenn
# Venn diagram
VennDiag <- ggvenn(slim_df,  # Venn diagram
fill_color = c("white", "white", "white"),
stroke_size = 0.5, set_name_size = 4) +
ggtitle(paste("WGCNA: ",  slim, sep = ''))
pdf(paste("Analysis/Output/GO/WGCNA_goseq/PrimaryEffect_Figures/GOslim_venn_tables/Modules_Ambient/Ambient_MF_",substr(slim,1,13),".pdf", sep =''))
print(VennDiag)
# grid.arrange(Day7.volcano.primary, Day14.volcano.primary,ncol=1, nrow=2, clip="off")
dev.off()
# write a csv for the corresponding Venn
bind_data <- rbind(slim_d7, slim_d14, slim_d21)
colnames(bind_data)[2] <- 'Gene_IDs'
merged_with_annot <- merge(bind_data, annot.condenced[c(1,2,4)], by = 'Gene_IDs') %>%
group_by(Gene_IDs, gene) %>%
mutate(count = n()) %>%
arrange(desc(count))
# write csv
write.csv(merged_with_annot, paste("Analysis/Output/GO/WGCNA_goseq/PrimaryEffect_Figures/GOslim_venn_tables/Modules_Ambient/Ambient_MF_",substr(slim,1,13),".csv", sep =''))
panelfig_data <- merged_with_annot %>% dplyr::filter(count ==3)
if (nrow(panelfig_data) > 0) {
Day7.ExpVST_GOIs <- Day7.ExpVST %>% dplyr::select('Sample.Name', 'Primary_Treatment', 'Second_Treament', any_of(panelfig_data$Gene_IDs))
Day7.ExpVST_GOIs$group <- paste(Day7.ExpVST_GOIs$Primary_Treatment , Day7.ExpVST_GOIs$Second_Treament , sep='')
Day14.ExpVST_GOIs <- Day14.ExpVST %>% dplyr::select('Sample.Name', 'Primary_Treatment', 'Second_Treament', any_of(panelfig_data$Gene_IDs))
Day14.ExpVST_GOIs$group <- paste(Day14.ExpVST_GOIs$Primary_Treatment , Day14.ExpVST_GOIs$Second_Treament , sep='')
Day21.ExpVST_GOIs <- Day21.ExpVST %>% dplyr::select('Sample.Name', 'Primary_Treatment', 'Second_Treament', 'Third_Treatment', any_of(panelfig_data$Gene_IDs))
Day21.ExpVST_GOIs$group <- paste(Day21.ExpVST_GOIs$Primary_Treatment , Day21.ExpVST_GOIs$Second_Treament , Day21.ExpVST_GOIs$Third_Treatment,  sep='')
# ===================================================================================
# Day 7 data prep for figures
#
# ===================================================================================
# reshape the data frame and merge geneIDs with tragetGOIs to add back the gene titles - use this to name figures downstream
Day7.ExpVST_GOIs_MELT <- reshape2::melt(Day7.ExpVST_GOIs, id=(c('Sample.Name', 'Primary_Treatment', 'Second_Treament', 'group'))) # melt using reshape2
names(Day7.ExpVST_GOIs_MELT)[(5:6)] <- c('Gene_IDs', 'vst_Expression') # change column names
Day7_ExpVst_Master <- merge(panelfig_data, Day7.ExpVST_GOIs_MELT, by = 'Gene_IDs')
# calc the m an expressio by gene ID (add gene title in group but this is the same unique level as GeneID - review target_GOIs)
Day7_meanExpr <- Day7_ExpVst_Master %>%
dplyr::select(c('Sample.Name','group', 'vst_Expression', 'Gene_IDs', 'gene')) %>%
group_by( group) %>%
dplyr::summarize(mean.vstExp = mean(vst_Expression),
sd.vsdtExp = sd(vst_Expression),
n = n(),
se.vsdtExp = sd.vsdtExp/sqrt(n))
# create treatment groups
Day7_meanExpr$PrimaryTreatment <- substr(Day7_meanExpr$group, 1,1) # primary
Day7_meanExpr$SecondTreatment <- substr(Day7_meanExpr$group, 2,2) # second
# ===================================================================================
# Day 14 data prep for figures
#
# ===================================================================================
# reshape the data frame and merge geneIDs with tragetGOIs to add back the gene titles - use this to name figures downstream
Day14.ExpVST_GOIs_MELT <- reshape2::melt(Day14.ExpVST_GOIs, id=(c('Sample.Name', 'Primary_Treatment', 'Second_Treament', 'group'))) # melt using reshape2
names(Day14.ExpVST_GOIs_MELT)[(5:6)] <- c('Gene_IDs', 'vst_Expression') # change column names
Day14_ExpVst_Master <- merge(panelfig_data, Day14.ExpVST_GOIs_MELT, by = 'Gene_IDs')
# calc the m an expressio by gene ID (add gene title in group but this is the same unique level as GeneID - review target_GOIs)
Day14_meanExpr <- Day14_ExpVst_Master %>%
dplyr::select(c('Sample.Name','group', 'vst_Expression', 'Gene_IDs', 'gene')) %>%
group_by(group) %>%
dplyr::summarize(mean.vstExp = mean(vst_Expression),
sd.vsdtExp = sd(vst_Expression),
n = n(),
se.vsdtExp = sd.vsdtExp/sqrt(n))
# create treatment groups
Day14_meanExpr$PrimaryTreatment <- substr(Day14_meanExpr$group, 1,1) # primary
Day14_meanExpr$SecondTreatment <- substr(Day14_meanExpr$group, 2,2) # second
# ===================================================================================
# Day 21 data prep for figures
#
# ===================================================================================
# reshape the data frame and merge geneIDs with tragetGOIs to add back the gene titles - use this to name figures downstream
Day21.ExpVST_GOIs_MELT <- reshape2::melt(Day21.ExpVST_GOIs, id=(c('Sample.Name', 'Primary_Treatment', 'Second_Treament', 'Third_Treatment','group'))) # melt using reshape2
names(Day21.ExpVST_GOIs_MELT)[(6:7)] <- c('Gene_IDs', 'vst_Expression') # change column names
Day21_ExpVst_Master <- merge(panelfig_data, Day21.ExpVST_GOIs_MELT, by = 'Gene_IDs')
# calc the m an expressio by gene ID (add gene title in group but this is the same unique level as GeneID - review target_GOIs)
Day21_meanExpr <- Day21_ExpVst_Master %>%
dplyr::select(c('Sample.Name','group', 'vst_Expression', 'Gene_IDs', 'gene')) %>%
group_by(group) %>%
dplyr::summarize(mean.vstExp = mean(vst_Expression),
sd.vsdtExp = sd(vst_Expression),
n = n(),
se.vsdtExp = sd.vsdtExp/sqrt(n))
# fix(Day21_meanExpr)
# create treatment groups
Day21_meanExpr$PrimaryTreatment <- substr(Day21_meanExpr$group, 1,1) # primary
Day21_meanExpr$SecondTreatment <- substr(Day21_meanExpr$group, 2,2) # second
Day21_meanExpr$ThirdTreatment <- substr(Day21_meanExpr$group, 3,3) # third
# ===================================================================================
# Now for the for looped plots!
#
# ===================================================================================
pd <- position_dodge(0.3)
# for(i in 1:nrow(target_GOIs)) {
#
#         if ( (nrow(Day7_meanExpr %>%  dplyr::filter(genes %in% target_GOIs[i,1]))) > 0 ) {
d7_plots <- Day7_meanExpr %>%
ggplot(aes(x=SecondTreatment, y=mean.vstExp, fill=PrimaryTreatment)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean.vstExp-se.vsdtExp, ymax=mean.vstExp+se.vsdtExp), colour="black", width=.1, position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Second pCO2 treatment") +
ylab('') +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
ggtitle(paste("Day 7:",substr(slim,1,13), " (N = ", nrow(unique(panelfig_data[,c(1,4)])), ")", sep='')) +
# expand_limits(y=0) +                                                    # Expand y range
#scale_y_continuous(limits=c((min_p1), (max_p1))) +
theme(text = element_text(size=15)) +
theme(legend.position = "none")
# } else { d7_plots <- plot.new() }
#
#
#       if ( (nrow(Day14_meanExpr %>%  dplyr::filter(genes %in% target_GOIs[i,1]))) > 0 ) {
d14_plots <- Day14_meanExpr %>%
# dplyr::filter(genes %in% target_GOIs[i,1]) %>%
ggplot(aes(x=SecondTreatment, y=mean.vstExp, fill=PrimaryTreatment)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean.vstExp-se.vsdtExp, ymax=mean.vstExp+se.vsdtExp), colour="black", width=.1, position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Second pCO2 treatment") +
ylab("Gene Expression (meanÂ±SE VST transformed)") +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
ggtitle(paste("Day 14:",substr(slim,1,13), " (N = ", nrow(unique(panelfig_data[,c(1,4)])), ")", sep='')) +
# expand_limits(y=0) +                                                    # Expand y range
#scale_y_continuous(limits=c((min_p1), (max_p1))) +
theme(text = element_text(size=15)) +
theme(legend.position = "none")
# } else { d14_plots <- plot.new() }
#
#
#
#       if ( (nrow(Day21_meanExpr %>%  dplyr::filter(genes %in% target_GOIs[i,1]))) > 0 ) {
d21_plots <- Day21_meanExpr %>%
# dplyr::filter(genes %in% target_GOIs[i,1]) %>%
ggplot(aes(x=ThirdTreatment, y=mean.vstExp, fill=PrimaryTreatment)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean.vstExp-se.vsdtExp, ymax=mean.vstExp+se.vsdtExp), colour="black", width=.1, position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Third pCO2 treatment") +
ylab('') +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
ggtitle(paste("Day 21:",substr(slim,1,13), " (N = ", nrow(unique(panelfig_data[,c(1,4)])), ")", sep='')) +
# expand_limits(y=0) +                                                    # Expand y range
#scale_y_continuous(limits=c((min_p1), (max_p1))) +
theme(text = element_text(size=15)) +
theme(legend.position = "none") +
facet_wrap(~SecondTreatment)
# } else { d21_plots <- plot.new() }
pdf(paste("Analysis/Output/GO/WGCNA_goseq/PrimaryEffect_Figures/GOslim_venn_tables/Modules_Ambient/Ambient_BP_",substr(slim,1,13),"_vstExpression.pdf", sep =''), width=15, height=6)
print(ggarrange(d7_plots, d14_plots, d21_plots,
plotlist = NULL,
ncol = 3,
nrow = 1,
labels = NULL))
dev.off()
} # plotting for loop
else {}
}
for (i in 1:nrow(MF_Amb_GOslim)) {
slim <- MF_Amb_GOslim[i,1] # call the term for the loop - creates Venn and Figures
# prep data
slim_MF <- MF_Amb  %>% dplyr::filter(slim_term %in% slim, Gene_count >0)
slim_MF$slimSplitted  <- strsplit(as.character(slim_MF$Gene_IDs), ";") # split the Gene IDs for Venn
slim_d7  <- data.frame(Day = 'Day7',  Gene.ID = unlist(slim_MF[1,10]))  # name the first row
slim_d14 <- data.frame(Day = 'Day14', Gene.ID = unlist(slim_MF[2,10])) # name the second row
slim_d21 <- data.frame(Day = 'Day21', Gene.ID = unlist(slim_MF[3,10])) # name the third row
slim_df  <- list(
Day7_BrownMod           = slim_d7$Gene.ID,
Day14_BrownMod          = slim_d14$Gene.ID,
Day21_BlueMod           = slim_d21$Gene.ID) # create a list to call in using ggvenn
# Venn diagram
VennDiag <- ggvenn(slim_df,  # Venn diagram
fill_color = c("white", "white", "white"),
stroke_size = 0.5, set_name_size = 4) +
ggtitle(paste("WGCNA: ",  slim, sep = ''))
pdf(paste("Analysis/Output/GO/WGCNA_goseq/PrimaryEffect_Figures/GOslim_venn_tables/Modules_Ambient/Ambient_MF_",substr(slim,1,13),".pdf", sep =''))
print(VennDiag)
# grid.arrange(Day7.volcano.primary, Day14.volcano.primary,ncol=1, nrow=2, clip="off")
dev.off()
# write a csv for the corresponding Venn
bind_data <- rbind(slim_d7, slim_d14, slim_d21)
colnames(bind_data)[2] <- 'Gene_IDs'
merged_with_annot <- merge(bind_data, annot.condenced[c(1,2,4)], by = 'Gene_IDs') %>%
group_by(Gene_IDs, gene) %>%
mutate(count = n()) %>%
arrange(desc(count))
# write csv
write.csv(merged_with_annot, paste("Analysis/Output/GO/WGCNA_goseq/PrimaryEffect_Figures/GOslim_venn_tables/Modules_Ambient/Ambient_MF_",substr(slim,1,13),".csv", sep =''))
panelfig_data <- merged_with_annot %>% dplyr::filter(count ==3)
if (nrow(panelfig_data) > 0) {
Day7.ExpVST_GOIs <- Day7.ExpVST %>% dplyr::select('Sample.Name', 'Primary_Treatment', 'Second_Treament', any_of(panelfig_data$Gene_IDs))
Day7.ExpVST_GOIs$group <- paste(Day7.ExpVST_GOIs$Primary_Treatment , Day7.ExpVST_GOIs$Second_Treament , sep='')
Day14.ExpVST_GOIs <- Day14.ExpVST %>% dplyr::select('Sample.Name', 'Primary_Treatment', 'Second_Treament', any_of(panelfig_data$Gene_IDs))
Day14.ExpVST_GOIs$group <- paste(Day14.ExpVST_GOIs$Primary_Treatment , Day14.ExpVST_GOIs$Second_Treament , sep='')
Day21.ExpVST_GOIs <- Day21.ExpVST %>% dplyr::select('Sample.Name', 'Primary_Treatment', 'Second_Treament', 'Third_Treatment', any_of(panelfig_data$Gene_IDs))
Day21.ExpVST_GOIs$group <- paste(Day21.ExpVST_GOIs$Primary_Treatment , Day21.ExpVST_GOIs$Second_Treament , Day21.ExpVST_GOIs$Third_Treatment,  sep='')
# ===================================================================================
# Day 7 data prep for figures
#
# ===================================================================================
# reshape the data frame and merge geneIDs with tragetGOIs to add back the gene titles - use this to name figures downstream
Day7.ExpVST_GOIs_MELT <- reshape2::melt(Day7.ExpVST_GOIs, id=(c('Sample.Name', 'Primary_Treatment', 'Second_Treament', 'group'))) # melt using reshape2
names(Day7.ExpVST_GOIs_MELT)[(5:6)] <- c('Gene_IDs', 'vst_Expression') # change column names
Day7_ExpVst_Master <- merge(panelfig_data, Day7.ExpVST_GOIs_MELT, by = 'Gene_IDs')
# calc the m an expressio by gene ID (add gene title in group but this is the same unique level as GeneID - review target_GOIs)
Day7_meanExpr <- Day7_ExpVst_Master %>%
dplyr::select(c('Sample.Name','group', 'vst_Expression', 'Gene_IDs', 'gene')) %>%
group_by( group) %>%
dplyr::summarize(mean.vstExp = mean(vst_Expression),
sd.vsdtExp = sd(vst_Expression),
n = n(),
se.vsdtExp = sd.vsdtExp/sqrt(n))
# create treatment groups
Day7_meanExpr$PrimaryTreatment <- substr(Day7_meanExpr$group, 1,1) # primary
Day7_meanExpr$SecondTreatment <- substr(Day7_meanExpr$group, 2,2) # second
# ===================================================================================
# Day 14 data prep for figures
#
# ===================================================================================
# reshape the data frame and merge geneIDs with tragetGOIs to add back the gene titles - use this to name figures downstream
Day14.ExpVST_GOIs_MELT <- reshape2::melt(Day14.ExpVST_GOIs, id=(c('Sample.Name', 'Primary_Treatment', 'Second_Treament', 'group'))) # melt using reshape2
names(Day14.ExpVST_GOIs_MELT)[(5:6)] <- c('Gene_IDs', 'vst_Expression') # change column names
Day14_ExpVst_Master <- merge(panelfig_data, Day14.ExpVST_GOIs_MELT, by = 'Gene_IDs')
# calc the m an expressio by gene ID (add gene title in group but this is the same unique level as GeneID - review target_GOIs)
Day14_meanExpr <- Day14_ExpVst_Master %>%
dplyr::select(c('Sample.Name','group', 'vst_Expression', 'Gene_IDs', 'gene')) %>%
group_by(group) %>%
dplyr::summarize(mean.vstExp = mean(vst_Expression),
sd.vsdtExp = sd(vst_Expression),
n = n(),
se.vsdtExp = sd.vsdtExp/sqrt(n))
# create treatment groups
Day14_meanExpr$PrimaryTreatment <- substr(Day14_meanExpr$group, 1,1) # primary
Day14_meanExpr$SecondTreatment <- substr(Day14_meanExpr$group, 2,2) # second
# ===================================================================================
# Day 21 data prep for figures
#
# ===================================================================================
# reshape the data frame and merge geneIDs with tragetGOIs to add back the gene titles - use this to name figures downstream
Day21.ExpVST_GOIs_MELT <- reshape2::melt(Day21.ExpVST_GOIs, id=(c('Sample.Name', 'Primary_Treatment', 'Second_Treament', 'Third_Treatment','group'))) # melt using reshape2
names(Day21.ExpVST_GOIs_MELT)[(6:7)] <- c('Gene_IDs', 'vst_Expression') # change column names
Day21_ExpVst_Master <- merge(panelfig_data, Day21.ExpVST_GOIs_MELT, by = 'Gene_IDs')
# calc the m an expressio by gene ID (add gene title in group but this is the same unique level as GeneID - review target_GOIs)
Day21_meanExpr <- Day21_ExpVst_Master %>%
dplyr::select(c('Sample.Name','group', 'vst_Expression', 'Gene_IDs', 'gene')) %>%
group_by(group) %>%
dplyr::summarize(mean.vstExp = mean(vst_Expression),
sd.vsdtExp = sd(vst_Expression),
n = n(),
se.vsdtExp = sd.vsdtExp/sqrt(n))
# fix(Day21_meanExpr)
# create treatment groups
Day21_meanExpr$PrimaryTreatment <- substr(Day21_meanExpr$group, 1,1) # primary
Day21_meanExpr$SecondTreatment <- substr(Day21_meanExpr$group, 2,2) # second
Day21_meanExpr$ThirdTreatment <- substr(Day21_meanExpr$group, 3,3) # third
# ===================================================================================
# Now for the for looped plots!
#
# ===================================================================================
pd <- position_dodge(0.3)
# for(i in 1:nrow(target_GOIs)) {
#
#         if ( (nrow(Day7_meanExpr %>%  dplyr::filter(genes %in% target_GOIs[i,1]))) > 0 ) {
d7_plots <- Day7_meanExpr %>%
ggplot(aes(x=SecondTreatment, y=mean.vstExp, fill=PrimaryTreatment)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean.vstExp-se.vsdtExp, ymax=mean.vstExp+se.vsdtExp), colour="black", width=.1, position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Second pCO2 treatment") +
ylab('') +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
ggtitle(paste("Day 7:",substr(slim,1,13), " (N = ", nrow(unique(panelfig_data[,c(1,4)])), ")", sep='')) +
# expand_limits(y=0) +                                                    # Expand y range
#scale_y_continuous(limits=c((min_p1), (max_p1))) +
theme(text = element_text(size=15)) +
theme(legend.position = "none")
# } else { d7_plots <- plot.new() }
#
#
#       if ( (nrow(Day14_meanExpr %>%  dplyr::filter(genes %in% target_GOIs[i,1]))) > 0 ) {
d14_plots <- Day14_meanExpr %>%
# dplyr::filter(genes %in% target_GOIs[i,1]) %>%
ggplot(aes(x=SecondTreatment, y=mean.vstExp, fill=PrimaryTreatment)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean.vstExp-se.vsdtExp, ymax=mean.vstExp+se.vsdtExp), colour="black", width=.1, position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Second pCO2 treatment") +
ylab("Gene Expression (meanÂ±SE VST transformed)") +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
ggtitle(paste("Day 14:",substr(slim,1,13), " (N = ", nrow(unique(panelfig_data[,c(1,4)])), ")", sep='')) +
# expand_limits(y=0) +                                                    # Expand y range
#scale_y_continuous(limits=c((min_p1), (max_p1))) +
theme(text = element_text(size=15)) +
theme(legend.position = "none")
# } else { d14_plots <- plot.new() }
#
#
#
#       if ( (nrow(Day21_meanExpr %>%  dplyr::filter(genes %in% target_GOIs[i,1]))) > 0 ) {
d21_plots <- Day21_meanExpr %>%
# dplyr::filter(genes %in% target_GOIs[i,1]) %>%
ggplot(aes(x=ThirdTreatment, y=mean.vstExp, fill=PrimaryTreatment)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean.vstExp-se.vsdtExp, ymax=mean.vstExp+se.vsdtExp), colour="black", width=.1, position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Third pCO2 treatment") +
ylab('') +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
ggtitle(paste("Day 21:",substr(slim,1,13), " (N = ", nrow(unique(panelfig_data[,c(1,4)])), ")", sep='')) +
# expand_limits(y=0) +                                                    # Expand y range
#scale_y_continuous(limits=c((min_p1), (max_p1))) +
theme(text = element_text(size=15)) +
theme(legend.position = "none") +
facet_wrap(~SecondTreatment)
# } else { d21_plots <- plot.new() }
pdf(paste("Analysis/Output/GO/WGCNA_goseq/PrimaryEffect_Figures/GOslim_venn_tables/Modules_Ambient/Ambient_MF_",substr(slim,1,13),"_vstExpression.pdf", sep =''), width=15, height=6)
print(ggarrange(d7_plots, d14_plots, d21_plots,
plotlist = NULL,
ncol = 3,
nrow = 1,
labels = NULL))
dev.off()
} # plotting for loop
else {}
}
# BIOLOGICAL PROCESS:  HIGHER expression under AMBIENT CONDITIONING ========================================================== #
BP_Amb_GOslim <- BP_Amb %>%
group_by(slim_term) %>%
tally() %>%
dplyr::filter(n == 3) # create the dataset to loop Venn diagrams
BP_Amb_GOslim
for (i in 1:nrow(BP_Amb_GOslim)) {
# PREP THE LOOP DATA CALLS
slim <- BP_Amb_GOslim[i,1] # call the term for the loop - creates Venn and Figures
# prep data
slim_BP <- BP_Amb %>% dplyr::filter(slim_term %in% slim)
slim_BP$slimSplitted  <- strsplit(as.character(slim_BP$Gene_IDs), ";") # split the Gene IDs for Venn
slim_d7  <- data.frame(Day = 'Day7', Gene.ID = unlist(slim_BP[1,10]))  # name the first row
slim_d14 <- data.frame(Day = 'Day14', Gene.ID = unlist(slim_BP[2,10])) # name the second row
slim_d21 <- data.frame(Day = 'Day21', Gene.ID = unlist(slim_BP[3,10])) # name the third row
slim_df  <- list(
Day7_BrownMod           = slim_d7$Gene.ID,
Day14_BrownMod          = slim_d14$Gene.ID,
Day21_BlueMod           = slim_d21$Gene.ID) # create a list to call in using ggvenn
# Venn diagram
VennDiag <- ggvenn(slim_df,  # Venn diagram
fill_color = c("white", "white", "white"),
stroke_size = 0.5, set_name_size = 4) +
ggtitle(paste("WGCNA: ",  slim, sep = ''))
pdf(paste("Analysis/Output/GO/WGCNA_goseq/PrimaryEffect_Figures/GOslim_venn_tables/Modules_Ambient/Ambient_BP_",slim,".pdf", sep =''))
print(VennDiag)
# grid.arrange(Day7.volcano.primary, Day14.volcano.primary,ncol=1, nrow=2, clip="off")
dev.off()
# write a csv for the corresponding Venn
bind_data <- rbind(slim_d7, slim_d14, slim_d21)
colnames(bind_data)[2] <- 'Gene_IDs'
merged_with_annot <- merge(bind_data, annot.condenced[c(1,2,4)], by = 'Gene_IDs') %>%
group_by(Gene_IDs, gene) %>%
mutate(count = n()) %>%
arrange(desc(count))
# write csv
write.csv(merged_with_annot, paste("Analysis/Output/GO/WGCNA_goseq/PrimaryEffect_Figures/GOslim_venn_tables/Modules_Ambient/Ambient_BP_",slim,".csv", sep =''))
panelfig_data <- merged_with_annot %>% dplyr::filter(count ==3)
if (nrow(panelfig_data) > 0) {
Day7.ExpVST_GOIs <- Day7.ExpVST %>% dplyr::select('Sample.Name', 'Primary_Treatment', 'Second_Treament', any_of(panelfig_data$Gene_IDs))
Day7.ExpVST_GOIs$group <- paste(Day7.ExpVST_GOIs$Primary_Treatment , Day7.ExpVST_GOIs$Second_Treament , sep='')
Day14.ExpVST_GOIs <- Day14.ExpVST %>% dplyr::select('Sample.Name', 'Primary_Treatment', 'Second_Treament', any_of(panelfig_data$Gene_IDs))
Day14.ExpVST_GOIs$group <- paste(Day14.ExpVST_GOIs$Primary_Treatment , Day14.ExpVST_GOIs$Second_Treament , sep='')
Day21.ExpVST_GOIs <- Day21.ExpVST %>% dplyr::select('Sample.Name', 'Primary_Treatment', 'Second_Treament', 'Third_Treatment', any_of(panelfig_data$Gene_IDs))
Day21.ExpVST_GOIs$group <- paste(Day21.ExpVST_GOIs$Primary_Treatment , Day21.ExpVST_GOIs$Second_Treament , Day21.ExpVST_GOIs$Third_Treatment,  sep='')
# ===================================================================================
# Day 7 data prep for figures
#
# ===================================================================================
# reshape the data frame and merge geneIDs with tragetGOIs to add back the gene titles - use this to name figures downstream
Day7.ExpVST_GOIs_MELT <- reshape2::melt(Day7.ExpVST_GOIs, id=(c('Sample.Name', 'Primary_Treatment', 'Second_Treament', 'group'))) # melt using reshape2
names(Day7.ExpVST_GOIs_MELT)[(5:6)] <- c('Gene_IDs', 'vst_Expression') # change column names
Day7_ExpVst_Master <- merge(panelfig_data, Day7.ExpVST_GOIs_MELT, by = 'Gene_IDs')
# calc the m an expressio by gene ID (add gene title in group but this is the same unique level as GeneID - review target_GOIs)
Day7_meanExpr <- Day7_ExpVst_Master %>%
dplyr::select(c('Sample.Name','group', 'vst_Expression', 'Gene_IDs', 'gene')) %>%
group_by( group) %>%
dplyr::summarize(mean.vstExp = mean(vst_Expression),
sd.vsdtExp = sd(vst_Expression),
n = n(),
se.vsdtExp = sd.vsdtExp/sqrt(n))
# create treatment groups
Day7_meanExpr$PrimaryTreatment <- substr(Day7_meanExpr$group, 1,1) # primary
Day7_meanExpr$SecondTreatment <- substr(Day7_meanExpr$group, 2,2) # second
# ===================================================================================
# Day 14 data prep for figures
#
# ===================================================================================
# reshape the data frame and merge geneIDs with tragetGOIs to add back the gene titles - use this to name figures downstream
Day14.ExpVST_GOIs_MELT <- reshape2::melt(Day14.ExpVST_GOIs, id=(c('Sample.Name', 'Primary_Treatment', 'Second_Treament', 'group'))) # melt using reshape2
names(Day14.ExpVST_GOIs_MELT)[(5:6)] <- c('Gene_IDs', 'vst_Expression') # change column names
Day14_ExpVst_Master <- merge(panelfig_data, Day14.ExpVST_GOIs_MELT, by = 'Gene_IDs')
# calc the m an expressio by gene ID (add gene title in group but this is the same unique level as GeneID - review target_GOIs)
Day14_meanExpr <- Day14_ExpVst_Master %>%
dplyr::select(c('Sample.Name','group', 'vst_Expression', 'Gene_IDs', 'gene')) %>%
group_by(group) %>%
dplyr::summarize(mean.vstExp = mean(vst_Expression),
sd.vsdtExp = sd(vst_Expression),
n = n(),
se.vsdtExp = sd.vsdtExp/sqrt(n))
# create treatment groups
Day14_meanExpr$PrimaryTreatment <- substr(Day14_meanExpr$group, 1,1) # primary
Day14_meanExpr$SecondTreatment <- substr(Day14_meanExpr$group, 2,2) # second
# ===================================================================================
# Day 21 data prep for figures
#
# ===================================================================================
# reshape the data frame and merge geneIDs with tragetGOIs to add back the gene titles - use this to name figures downstream
Day21.ExpVST_GOIs_MELT <- reshape2::melt(Day21.ExpVST_GOIs, id=(c('Sample.Name', 'Primary_Treatment', 'Second_Treament', 'Third_Treatment','group'))) # melt using reshape2
names(Day21.ExpVST_GOIs_MELT)[(6:7)] <- c('Gene_IDs', 'vst_Expression') # change column names
Day21_ExpVst_Master <- merge(panelfig_data, Day21.ExpVST_GOIs_MELT, by = 'Gene_IDs')
# calc the m an expressio by gene ID (add gene title in group but this is the same unique level as GeneID - review target_GOIs)
Day21_meanExpr <- Day21_ExpVst_Master %>%
dplyr::select(c('Sample.Name','group', 'vst_Expression', 'Gene_IDs', 'gene')) %>%
group_by(group) %>%
dplyr::summarize(mean.vstExp = mean(vst_Expression),
sd.vsdtExp = sd(vst_Expression),
n = n(),
se.vsdtExp = sd.vsdtExp/sqrt(n))
# fix(Day21_meanExpr)
# create treatment groups
Day21_meanExpr$PrimaryTreatment <- substr(Day21_meanExpr$group, 1,1) # primary
Day21_meanExpr$SecondTreatment <- substr(Day21_meanExpr$group, 2,2) # second
Day21_meanExpr$ThirdTreatment <- substr(Day21_meanExpr$group, 3,3) # third
# ===================================================================================
# Now for the for looped plots!
#
# ===================================================================================
pd <- position_dodge(0.3)
# for(i in 1:nrow(target_GOIs)) {
#
#         if ( (nrow(Day7_meanExpr %>%  dplyr::filter(genes %in% target_GOIs[i,1]))) > 0 ) {
d7_plots <- Day7_meanExpr %>%
ggplot(aes(x=SecondTreatment, y=mean.vstExp, fill=PrimaryTreatment)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean.vstExp-se.vsdtExp, ymax=mean.vstExp+se.vsdtExp), colour="black", width=.1, position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Second pCO2 treatment") +
ylab('') +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
ggtitle(paste("Day 7:",substr(slim,1,13), " (N = ", nrow(unique(panelfig_data[,c(1,4)])), ")", sep='')) +
# expand_limits(y=0) +                                                    # Expand y range
#scale_y_continuous(limits=c((min_p1), (max_p1))) +
theme(text = element_text(size=15)) +
theme(legend.position = "none")
# } else { d7_plots <- plot.new() }
#
#
#       if ( (nrow(Day14_meanExpr %>%  dplyr::filter(genes %in% target_GOIs[i,1]))) > 0 ) {
d14_plots <- Day14_meanExpr %>%
# dplyr::filter(genes %in% target_GOIs[i,1]) %>%
ggplot(aes(x=SecondTreatment, y=mean.vstExp, fill=PrimaryTreatment)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean.vstExp-se.vsdtExp, ymax=mean.vstExp+se.vsdtExp), colour="black", width=.1, position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Second pCO2 treatment") +
ylab("Gene Expression (meanÂ±SE VST transformed)") +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
ggtitle(paste("Day 14:",substr(slim,1,13), " (N = ", nrow(unique(panelfig_data[,c(1,4)])), ")", sep='')) +
# expand_limits(y=0) +                                                    # Expand y range
#scale_y_continuous(limits=c((min_p1), (max_p1))) +
theme(text = element_text(size=15)) +
theme(legend.position = "none")
# } else { d14_plots <- plot.new() }
#
#
#
#       if ( (nrow(Day21_meanExpr %>%  dplyr::filter(genes %in% target_GOIs[i,1]))) > 0 ) {
d21_plots <- Day21_meanExpr %>%
# dplyr::filter(genes %in% target_GOIs[i,1]) %>%
ggplot(aes(x=ThirdTreatment, y=mean.vstExp, fill=PrimaryTreatment)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean.vstExp-se.vsdtExp, ymax=mean.vstExp+se.vsdtExp), colour="black", width=.1, position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Third pCO2 treatment") +
ylab('') +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
ggtitle(paste("Day 21:",substr(slim,1,13), " (N = ", nrow(unique(panelfig_data[,c(1,4)])), ")", sep='')) +
# expand_limits(y=0) +                                                    # Expand y range
#scale_y_continuous(limits=c((min_p1), (max_p1))) +
theme(text = element_text(size=15)) +
theme(legend.position = "none") +
facet_wrap(~SecondTreatment)
# } else { d21_plots <- plot.new() }
pdf(paste("Analysis/Output/GO/WGCNA_goseq/PrimaryEffect_Figures/GOslim_venn_tables/Modules_Ambient/Ambient_BP_",substr(slim,1,13),"_vstExpression.pdf", sep =''), width=15, height=6)
print(ggarrange(d7_plots, d14_plots, d21_plots,
plotlist = NULL,
ncol = 3,
nrow = 1,
labels = NULL))
dev.off()
} # plotting for loop
else {}
}
