lab = rownames(resd7.all.second_S_vs_A),
x = 'log2FoldChange',
y = 'pvalue',
title = 'Severe versus Ambient Treatment (Second)',
subtitle = "DESeq2 - Differential expression",
FCcutoff = 2.0,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0,
widthConnectors = 0.75)
dev.off()
# Effect of second treatment M v. A 'resdata.d7.second_M_vs_A' - 105 DEGs
png("RAnalysis/DESeq2/output/Day7/Day7.SecondTreatment_MvA-VolcanoPlot.png", 1000, 1000, pointsize=20)
EnhancedVolcano(resdata.d7.second_M_vs_A,
lab = rownames(resdata.d7.second_M_vs_A),
x = 'log2FoldChange',
y = 'pvalue',
title = 'Moderate versus Ambient Treatment (Second)',
subtitle = "DESeq2 - Differential expression",
FCcutoff = 2.0,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0,
widthConnectors = 0.75)
dev.off()
save_pheatmap <- function(x, filename, width=1000, height=960) { # template for saving pheatmap outputs
stopifnot(!missing(x))
stopifnot(!missing(filename))
png(filename,width = width, height=height)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
select <- order(rowMeans(counts(dds.d7,normalized=TRUE)), decreasing=TRUE)[1:20]
dds.d7
df <- as.data.frame(colData(dds.d7)[,c("Primary_Treatment","Second_Treament")])
df
annotation_colors = list(Treatment = c(A="Blue", M="Orange"))
# rlog - regularized log transformation of origin count data to log2 scale - fit for each sample and dist. of coefficients in the data
rld.d7<- rlogTransformation(dds.d7) # rlog transform (regularized log)
head(assays(rld.d7)) # view first few rows
hist(assay(rld.d7)) # view histogram
meanSdPlot(assay(rld.d7)) # plot using "vsn" bioconductor package - shows the sd y axis (sq root of varaince in all samples) - flat curve may seem like a goals, BUT may be unreasonable in cases with MANY true DEGs from experimental conditions
# this gives log2(n + 1)
ntd.d7 <- normTransform(dds.d7)
head(assay(ntd.d7)) # view first few rows
hist(assay(ntd.d7)) # view histogram
meanSdPlot(assay(ntd.d7)) # plot using "vsn" bioconductor package - shows the sd y axis (sq root of varaince in all samples) - flat curve may seem like a goals, BUT may be unreasonable in cases with MANY true DEGs from experimental conditions
meanSdPlot(assay(rld.d7)) # plot using "vsn" bioconductor package - shows the sd y axis (sq root of varaince in all samples) - flat curve may seem like a goals, BUT may be unreasonable in cases with MANY true DEGs from experimental conditions
save_pheatmap <- function(x, filename, width=1000, height=960) { # template for saving pheatmap outputs
stopifnot(!missing(x))
stopifnot(!missing(filename))
png(filename,width = width, height=height)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
select <- order(rowMeans(counts(dds.d7,normalized=TRUE)), decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds.d7)[,c("Primary_Treatment","Second_Treament")])
annotation_colors = list(Treatment = c(A="Blue", M="Orange"))
# rlog heatmap
d7.rlog.heatmap<- pheatmap(assay(rld.d7)[select,], cluster_rows=T, show_rownames=F, # rlog heatmap
cluster_cols=T, annotation_col=df, annotation_colors = annotation_colors,
main = "rlog_Day0_MvsA")
save_pheatmap(d7.rlog.heatmap, filename = "RAnalysis/DESeq2/output/Day7/Day7-rlog_heatmap.png")
# ntd heatmap
d7.ntd.heatmap<- pheatmap(assay(ntd.d7)[select,], cluster_rows=T, show_rownames=F, # rlog heatmap
cluster_cols=T, annotation_col=df, annotation_colors = annotation_colors,
main = "ntd_Day0_MvsA")
save_pheatmap(d7.ntd.heatmap, filename = "RAnalysis/DESeq2/output/Day7/Day7-ntd_heatmap.png")
# rlog heatmap
d7.rlog.heatmap<- pheatmap(assay(rld.d7)[select,], cluster_rows=T, show_rownames=F, # rlog heatmap
cluster_cols=T, annotation_col=df, annotation_colors = annotation_colors,
main = "rlog_Day7_MvsA")
save_pheatmap(d7.rlog.heatmap, filename = "RAnalysis/DESeq2/output/Day7/Day7-rlog_heatmap.png")
# ntd heatmap
d7.ntd.heatmap<- pheatmap(assay(ntd.d7)[select,], cluster_rows=T, show_rownames=F, # rlog heatmap
cluster_cols=T, annotation_col=df, annotation_colors = annotation_colors,
main = "ntd_Day7_MvsA")
save_pheatmap(d7.ntd.heatmap, filename = "RAnalysis/DESeq2/output/Day7/Day7-ntd_heatmap.png")
# rlog heatmap
d7.rlog.heatmap<- pheatmap(assay(rld.d7)[select,], cluster_rows=T, show_rownames=F, # rlog heatmap
cluster_cols=T, annotation_col=df, annotation_colors = annotation_colors,
main = "rlog_Day7")
save_pheatmap(d7.rlog.heatmap, filename = "RAnalysis/DESeq2/output/Day7/Day7-rlog_heatmap.png")
# ntd heatmap
d7.ntd.heatmap<- pheatmap(assay(ntd.d7)[select,], cluster_rows=T, show_rownames=F, # rlog heatmap
cluster_cols=T, annotation_col=df, annotation_colors = annotation_colors,
main = "ntd_Day7")
save_pheatmap(d7.ntd.heatmap, filename = "RAnalysis/DESeq2/output/Day7/Day7-ntd_heatmap.png")
# Colors for plots below; Use RColorBrewer, better and assign mycols variable
mycols.d7 <- brewer.pal(8, "Dark2")[1:length(unique(rld.d7$Primary_Treatment))]
mycols.d7_2 <- brewer.pal(8, "Dark2")[1:length(unique(rld.d7$Second_Treament))]
# Sample distance heatmap
sampleDists.d7 <- as.matrix(dist(t(assay(rld.d7))))
png("RAnalysis/DESeq2/output/Day7/Day7-heatmap.png", 1000, 1000, pointsize=20)
heatmap.2(as.matrix(sampleDists.d7), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols.d7_2[rld.d7$Second_Treament], RowSideColors=mycols.d7[rld.d7$Primary_Treatment],
margin=c(10, 10), main="Day 7 Sample to Sample heatmap")
dev.off()
# Principal components analysis ------------------------------------------------------------------------------------------ #
pcaExplorer(dds = dds.d7)
# Principal components analysis ------------------------------------------------------------------------------------------ #
pcaExplorer(dds = dds.d7)
path_out.d14 = 'C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/RAnalysis/DESeq2/output/Day14/'
# Primary + Secondary Treatment  =========================================================================================== #
nrow(dds.d14) # 8456 total genes pre filtered; FDR cutoff of 0.1 = 845.6 false positives; 0.05 = 422.8 flase positives
dds.d14 <- DESeq(dds.d14) # wait for this to complete....
=====================================================
exp.data.d14$Primary_Treatment <- factor(exp.data.d14$Primary_Treatment) # change Primary_Treatment to factor
exp.data.d14$Second_Treament <- factor(exp.data.d14$Second_Treament) # change Second_Treament to factor
exp.data.d14$Time <- factor(exp.data.d14$Time) # change Time to factor
#==================== #
# Primary*Second (ALL) Treatment
# format Experiment/design dataframe into matrix
exp.data.d14.PRIM_SEC <- exp.data.d14 %>% dplyr::select(c('Sample.Name', 'Primary_Treatment', 'Second_Treament', 'Time')) # coondense dataset to build target matrix
exp.data.d14.PRIM_SEC <- data.frame(exp.data.d14.PRIM_SEC[,-1], row.names=exp.data.d14.PRIM_SEC[,1]) # move Sample.Name column as row names
exp.data.d14.PRIM_SEC.mtx <- as.matrix(exp.data.d14.PRIM_SEC, row.names="Geoduck.ID") # create matrix
# CKECK THE cts.matrix AND THE exp.data.mtx
exp.data.d14.PRIM_SEC.mtx <- exp.data.d14.PRIM_SEC.mtx[match(colnames(cts.merged.d14),rownames(exp.data.d14.PRIM_SEC.mtx)), ]
all(rownames(exp.data.d14.PRIM_SEC.mtx) %in% colnames(cts.matrix.d14.filtered)) # should be TRUE
all(rownames(exp.data.d14.PRIM_SEC.mtx) == colnames(cts.matrix.d14.filtered)) # should be TRUE
all(rownames(exp.data.d14.PRIM_SEC.mtx) == colnames(cts.matrix.d14.filtered))  # should be TRUE
# build dds
dds.d14 <- DESeqDataSetFromMatrix(countData = cts.matrix.d14.filtered,
colData = exp.data.d14.PRIM_SEC.mtx,
design = ~ Primary_Treatment+Second_Treament) # DESeq Data Set (dds) - design as ~Primary_Treatment
# dds.primary.d0 # view dds
# prep for DESeq2
dds.d14$Primary_Treatment <- relevel(dds.d14$Primary_Treatment, ref = "A") # specify the reference level for count analysis - A = the control treatment
dds.d14$Second_Treament <- relevel(dds.d14$Second_Treament, ref = "A") # specify the reference level for count analysis - A = the control treatment
dds.d14$Time <- droplevels(dds.d14$Time) # drop levels of time
levels(dds.d14$Time) # NULL
levels(dds.d14$Primary_Treatment) #  levels for condition 'Treatment': "A" "M"
levels(dds.d14$Second_Treament) #  levels for condition 'Treatment': "A" "M" "S"
design(dds.d14) # view the design we have specified
ncol(dds.d14) # 35 cols - Good
nrow(dds.d14)  # 854
path_out.d14 = 'C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/RAnalysis/DESeq2/output/Day14/'
# Primary + Secondary Treatment  =========================================================================================== #
nrow(dds.d14) # 8456 total genes pre filtered; FDR cutoff of 0.1 = 845.6 false positives; 0.05 = 422.8 flase positives
dds.d14 <- DESeq(dds.d14) # wait for this to complete....
resultsNames(dds.d14) # view the names of your results model
resd14.all.primary_M_vs_A<- results(dds.d14, name="Primary_Treatment_M_vs_A", alpha = 0.05)
hist(resd14.all.primary_M_vs_A$pvalue, breaks=20, col="grey") # view histogram,  about 425 genes are likely false positives, alpha = 0.0
abline(h=(nrow(dds.d14)*0.05),col="red") # add line at expected 5% false positive
table(resd14.all.primary_M_vs_A$padj<0.05) #  349 DEGs
resd14.all.primary_M_vs_A <- resd14.all.primary_M_vs_A[order(resd14.all.primary_M_vs_A$padj), ] ## Order by adjusted p-value
resdata.d14.all.prim.M_vs_A  <- merge(as.data.frame(resd14.all.primary_M_vs_A), as.data.frame(counts(dds.d14, normalized=TRUE)), by="row.names", sort=FALSE) ## Merge with normalized count data
names(resdata.d14.all.prim.M_vs_A)[1] <- "Gene" # assign col 1
resd14.all.second_M_vs_A<- results(dds.d14, name="Second_Treament_M_vs_A", alpha = 0.05) # FDR 5%
hist(resd14.all.second_M_vs_A$pvalue, breaks=20, col="grey") # view histogram,  about 425 genes are likely false positives, alpha = 0.05 FDR is good!
abline(h=(nrow(dds.primary.d14)*0.05),col="red") # add line at expected 5% false positive
abline(h=(nrow(dds.d14)*0.05),col="red") # add line at expected 5% false positive
table(resd14.all.second_M_vs_A$padj<0.05) # 0 DEGs
resd14.all.second_M_vs_A <- resd14.all.second_M_vs_A[order(resd14.all.second_M_vs_A$padj), ] ## Order by adjusted p-value
resdata.d14.second_M_vs_A  <- merge(as.data.frame(resd14.all.second_M_vs_A), as.data.frame(counts(dds.d14, normalized=TRUE)), by="row.names", sort=FALSE) ## Merge with normalized count data
names(resdata.d14.second_M_vs_A)[1] <- "Gene" # assign col 1
resd14.all.second_S_vs_A<- results(dds.d14, name="Second_Treament_S_vs_A", alpha = 0.05) # FDR 5%
hist(resd14.all.second_S_vs_A$pvalue, breaks=20, col="grey") # view histogram,  about 425 genes are likely false positives, alpha = 0.05 FDR is good!
abline(h=(nrow(dds.d14)*0.05),col="red") # add line at expected 5% false positive
table(resd14.all.second_S_vs_A$padj<0.05) # 0 DEGs
table(resd14.all.second_S_vs_A$padj<0.05) # 1 DEGs
resd14.all.second_S_vs_A <- resd14.all.second_S_vs_A[order(resd14.all.second_S_vs_A$padj), ] ## Order by adjusted p-value
resdata.d14.all.second_S_vs_A    <- merge(as.data.frame(resd14.all.second_S_vs_A), as.data.frame(counts(dds.d14, normalized=TRUE)), by="row.names", sort=FALSE) ## Merge with normalized count data
names(resdata.d14.all.second_S_vs_A)[1] <- "Gene" # assign col 1
## Write results
path_out.d14 = 'C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/RAnalysis/DESeq2/output/Day14/'
write.csv(resdata.d14.all.prim.M_vs_A, paste(path_out.d14, "Day14.PrimaryTreament_diffexpr-results.csv"))
write.csv(resdata.d14.second_M_vs_A, paste(path_out.d14, "Day14.SecondTreament_MvsA_diffexpr-results.csv"))
write.csv(resdata.d14.all.second_S_vs_A, paste(path_out.d14, "Day14.SecondTreament_SvsA_diffexpr-results.csv"))
# Effect of primary treatment 'resd14.all.primary_M_vs_A' - 502 DEGs
png("RAnalysis/DESeq2/output/Day14/Day14.PrimaryTreatment-VolcanoPlot.png", 1000, 1000, pointsize=20)
EnhancedVolcano(resd14.all.primary_M_vs_A,
lab = rownames(resd14.all.primary_M_vs_A),
x = 'log2FoldChange',
y = 'pvalue',
title = 'Moderate versus Ambient Treatment (Primary)',
subtitle = "DESeq2 - Differential expression",
FCcutoff = 2.0,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0,
widthConnectors = 0.75)
dev.off()
# Effect of primary treatment 'resd14.all.primary_M_vs_A' - 502 DEGs
png("RAnalysis/DESeq2/output/Day14/Day14.PrimaryTreatment-VolcanoPlot.png", 1000, 1000, pointsize=20)
EnhancedVolcano(resd14.all.primary_M_vs_A,
lab = rownames(resd14.all.primary_M_vs_A),
x = 'log2FoldChange',
y = 'pvalue',
title = 'Moderate versus Ambient Treatment (Primary)',
subtitle = "DESeq2 - Differential expression",
FCcutoff = 2.0,
pointSize = 4.0,
#labSize = 6.0,
colAlpha = 1,
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0,
widthConnectors = 0.75)
dev.off()
dev.off()
# Effect of second treatment M v. A 'resdata.d14.second_M_vs_A' - 0 DEGs
png("RAnalysis/DESeq2/output/Day14/Day14.SecondTreatment_MvA-VolcanoPlot.png", 1000, 1000, pointsize=20)
EnhancedVolcano(resdata.d14.second_M_vs_A,
lab = rownames(resdata.d14.second_M_vs_A),
x = 'log2FoldChange',
y = 'pvalue',
title = 'Moderate versus Ambient Treatment (Second)',
subtitle = "DESeq2 - Differential expression",
FCcutoff = 2.0,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0,
widthConnectors = 0.75)
dev.off()
# Effect of second treatment S v. A 'resd14.all.second_S_vs_A' - 1 DEG
png("RAnalysis/DESeq2/output/Day14/Day14.SecondTreatment_SvA-VolcanoPlot.png", 1000, 1000, pointsize=20)
EnhancedVolcano(resd14.all.second_S_vs_A,
lab = rownames(resd14.all.second_S_vs_A),
x = 'log2FoldChange',
y = 'pvalue',
title = 'Severe versus Ambient Treatment (Second)',
subtitle = "DESeq2 - Differential expression",
FCcutoff = 2.0,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0,
widthConnectors = 0.75)
dev.off()
png("RAnalysis/DESeq2/output/Day14/Day14-dispersions.png", 1000, 1000, pointsize=20)
plotDispEsts(dds.d14, main="Day 14 data dispersions")
dev.off()
# rlog - regularized log transformation of origin count data to log2 scale - fit for each sample and dist. of coefficients in the data
rld.d14<- rlogTransformation(dds.d14) # rlog transform (regularized log)
head(assays(rld.d14)) # view first few rows
hist(assay(rld.d14)) # view histogram
meanSdPlot(assay(rld.d14)) # plot using "vsn" bioconductor package - shows the sd y axis (sq root of varaince in all samples) - flat curve may seem like a goals, BUT may be unreasonable in cases with MANY true DEGs from experimental conditions
# this gives log2(n + 1)
ntd.d14 <- normTransform(dds.d14)
head(assay(ntd.d14)) # view first few rows
hist(assay(ntd.d14)) # view histogram
meanSdPlot(assay(ntd.d14)) # plot using "vsn" bioconductor package - shows the sd y axis (sq root of varaince in all samples) - flat curve may seem like a goals, BUT may be unreasonable in cases with MANY true DEGs from experimental conditions
save_pheatmap <- function(x, filename, width=1000, height=960) { # template for saving pheatmap outputs
stopifnot(!missing(x))
stopifnot(!missing(filename))
png(filename,width = width, height=height)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
# settings for the heatmaps
select <- order(rowMeans(counts(dds.d14,normalized=TRUE)), decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds.d14)[,c("Primary_Treatment","Second_Treament")])
annotation_colors = list(Treatment = c(A="Blue", M="Orange"))
# rlog heatmap
d14.rlog.heatmap<- pheatmap(assay(rld.d14)[select,], cluster_rows=T, show_rownames=F, # rlog heatmap
cluster_cols=T, annotation_col=df, annotation_colors = annotation_colors,
main = "rlog_Day14")
save_pheatmap(d14.rlog.heatmap, filename = "RAnalysis/DESeq2/output/Day14/Day14-rlog_heatmap.png")
# ntd heatmap
d14.ntd.heatmap<- pheatmap(assay(ntd.d14)[select,], cluster_rows=T, show_rownames=F, # rlog heatmap
cluster_cols=T, annotation_col=df, annotation_colors = annotation_colors,
main = "ntd_Day14")
save_pheatmap(d14.ntd.heatmap, filename = "RAnalysis/DESeq2/output/Day14/Day14-ntd_heatmap.png")
# Colors for plots below; Use RColorBrewer, better and assign mycols variable
mycols.d14 <- brewer.pal(8, "Dark2")[1:length(unique(rld.d14$Primary_Treatment))]
mycols.d14_2 <- brewer.pal(8, "Dark2")[1:length(unique(rld.d14$Second_Treament))]
# Sample distance heatmap
sampleDists.d14 <- as.matrix(dist(t(assay(rld.d14))))
png("RAnalysis/DESeq2/output/Day14/Day14-heatmap.png", 1000, 1000, pointsize=20)
heatmap.2(as.matrix(sampleDists.d14), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols.d14_2[rld.d14$Second_Treament], RowSideColors=mycols.d14[rld.d14$Primary_Treatment],
margin=c(10, 10), main="Day 14 Sample to Sample heatmap")
dev.off()
# Principal components analysis ------------------------------------------------------------------------------------------ #
pcaExplorer(dds = dds.d14)
dds.d21 <- DESeq(dds.d21) # wait for this to complete....
Experiment/design matrix == 'exp.data.d21'
#---- INPUT: TagSeq count matrix == 'cts.matrix.d21.filtered' (3 CPM in 50% samples)
# ==========================================================
exp.data.d21$Primary_Treatment <- factor(exp.data.d21$Primary_Treatment) # change Primary_Treatment to factor
exp.data.d21$Second_Treament <- factor(exp.data.d21$Second_Treament) # change Second_Treament to factor
exp.data.d21$Third_Treatment <- factor(exp.data.d21$Third_Treatment) # change Third_Treatment to factor
exp.data.d21$All_Treatment <- factor(exp.data.d21$All_Treatment) # change All_Treatment to factor
exp.data.d21$Time <- factor(exp.data.d21$Time) # change Time to factor
#==================== #
# Primary + Second +Third (ALL) Treatment
# format Experiment/design dataframe into matrix
exp.data.d21.PRIM_SEC_THIRD <- exp.data.d21 %>% dplyr::select(c('Sample.Name', 'Primary_Treatment','Second_Treament', 'Third_Treatment', 'Time')) # coondense dataset to build target matrix
exp.data.d21.PRIM_SEC_THIRD <- data.frame(exp.data.d21.PRIM_SEC_THIRD[,-1], row.names=exp.data.d21.PRIM_SEC_THIRD[,1]) # move Sample.Name column as row names
exp.data.d21.PRIM_SEC_THIRD.mtx <- as.matrix(exp.data.d21.PRIM_SEC_THIRD, row.names="Geoduck.ID") # create matrix
# CKECK THE cts.matrix AND THE exp.data.mtx
exp.data.d21.PRIM_SEC_THIRD.mtx <- exp.data.d21.PRIM_SEC.mtx[match(colnames(cts.merged.d21),rownames(exp.data.d21.PRIM_SEC_THIRD.mtx)), ]
all(rownames(exp.data.d21.PRIM_SEC_THIRD.mtx) %in% colnames(cts.matrix.d21.filtered)) # should be TRUE
all(rownames(exp.data.d21.PRIM_SEC_THIRD.mtx) == colnames(cts.matrix.d21.filtered)) # should be TRUE
all(rownames(exp.data.d21.PRIM_SEC_THIRD.mtx) == colnames(cts.matrix.d21.filtered))  # should be TRUE
# build dds
dds.d21 <- DESeqDataSetFromMatrix(countData = cts.matrix.d21.filtered,
colData = exp.data.d21.PRIM_SEC_THIRD.mtx,
design = ~ Primary_Treatment+Second_Treament+Third_Treatment) # DESeq Data Set (dds) - design as ~Primary_Treatment
# dds.d21 # view dds
# prep for DESeq2
dds.d21$Primary_Treatment <- relevel(dds.d21$Primary_Treatment, ref = "A") # specify the reference level for count analysis - A = the control treatment
dds.d21$Second_Treament <- relevel(dds.d21$Second_Treament, ref = "A")
dds.d21$Third_Treatment <- relevel(dds.d21$Third_Treatment, ref = "A")
dds.d21$Time <- droplevels(dds.d21$Time) # drop levels of time
levels(dds.d21$Time) # NULL
levels(dds.d21$Primary_Treatment) #  levels for condition 'Treatment': "A" "M"
design(dds.d21) # view the design we have specified
ncol(dds.d21) #  62 cols - Good
nrow(dds.d21) # 8325 (10 CPM) 13506 (3 CPM)
path_out.d21 = 'C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/RAnalysis/DESeq2/output/Day21/'
dds.d21 <- DESeq(dds.d21) # wait for this to complete....
resultsNames(dds.d21) # view the names of your results model
resd21.All.Primary_Treatment_M_vs_A <- results(dds.d21, name="Primary_Treatment_M_vs_A", alpha = 0.05) # FDR 5%
hist(resd21.All.Primary_Treatment_M_vs_A$pvalue, breaks=20, col="grey") # view histogram,  about 425 genes are likely false positives, alpha = 0.05 FDR is good!
abline(h=(nrow(dds.d21)*0.05),col="red") # add line at expected 5% false positive
table(resd21.All.Primary_Treatment_M_vs_A$padj<0.05) # 175 DEGs
resd21.All.Primary_Treatment_M_vs_A <- resd21.All.Primary_Treatment_M_vs_A[order(resd21.All.Primary_Treatment_M_vs_A$padj), ] ## Order by adjusted p-value
resdata.d21.All.Primary_Treatment_M_vs_A  <- merge(as.data.frame(resd21.All.Primary_Treatment_M_vs_A), as.data.frame(counts(dds.d21, normalized=TRUE)), by="row.names", sort=FALSE) ## Merge with normalized count data
names(resdata.d21.All.Primary_Treatment_M_vs_A)[1] <- "Gene" # assign col 1
resd21.All.Second_Treatment_M_vs_A <- results(dds.d21, name="Second_Treament_M_vs_A", alpha = 0.05) # FDR 5%
hist(resd21.All.Second_Treatment_M_vs_A$pvalue, breaks=20, col="grey") # view histogram,  about 425 genes are likely false positives, alpha = 0.05 FDR is good!
abline(h=(nrow(dds.d21)*0.05),col="red") # add line at expected 5% false positive
table(resd21.All.Second_Treatment_M_vs_A$padj<0.05) # 1 DEGs
resd21.All.Second_Treatment_M_vs_A <- resd21.All.Second_Treatment_M_vs_A[order(resd21.All.Second_Treatment_M_vs_A$padj), ] ## Order by adjusted p-value
resdata.d21.All.Second_Treatment_M_vs_A  <- merge(as.data.frame(resd21.All.Second_Treatment_M_vs_A), as.data.frame(counts(dds.d21, normalized=TRUE)), by="row.names", sort=FALSE) ## Merge with normalized count data
names(resdata.d21.All.Second_Treatment_M_vs_A)[1] <- "Gene" # assign col 1
resd21.All.Second_Treatment_S_vs_A <- results(dds.d21, name="Second_Treament_S_vs_A", alpha = 0.05) # FDR 5%
hist(resd21.All.Second_Treatment_S_vs_A$pvalue, breaks=20, col="grey") # view histogram,  about 425 genes are likely false positives, alpha = 0.05 FDR is good!
abline(h=(nrow(dds.d21)*0.05),col="red") # add line at expected 5% false positive
abline(h=(nrow(dds.d21)*0.05),col="red") # add line at expected 5% false positive
table(resd21.All.Second_Treatment_S_vs_A$padj<0.05) # 0 DEGs
resd21.All.Second_Treatment_S_vs_A <- resd21.All.Second_Treatment_S_vs_A[order(resd21.All.Second_Treatment_S_vs_A$padj), ] ## Order by adjusted p-value
resdata.d21.All.Second_Treatment_S_vs_A <- merge(as.data.frame(resd21.All.Second_Treatment_S_vs_A), as.data.frame(counts(dds.d21, normalized=TRUE)), by="row.names", sort=FALSE) ## Merge with normalized count data
names(resdata.d21.All.Second_Treatment_S_vs_A)[1] <- "Gene" # assign col 1
resd21.All.Third_Treatment_M_vs_A <- results(dds.d21, name="Third_Treatment_M_vs_A", alpha = 0.05) # FDR 5%
hist(resd21.All.Third_Treatment_M_vs_A$pvalue, breaks=20, col="grey") # view histogram,  about 425 genes are likely false positives, alpha = 0.05 FDR is good!
abline(h=(nrow(dds.d21)*0.05),col="red") # add line at expected 5% false positive
table(resd21.All.Third_Treatment_M_vs_A$padj<0.05) # 0 DEGs
resd21.All.Third_Treatment_M_vs_A <- resd21.All.Third_Treatment_M_vs_A[order(resd21.All.Third_Treatment_M_vs_A$padj), ] ## Order by adjusted p-value
resdata.d21.All.Third_Treatment_M_vs_A  <- merge(as.data.frame(resd21.All.Third_Treatment_M_vs_A), as.data.frame(counts(dds.d21, normalized=TRUE)), by="row.names", sort=FALSE) ## Merge with normalized count data
names(resdata.d21.All.Third_Treatment_M_vs_A)[1] <- "Gene" # assign col 1
## Write results
write.csv(resdata.d21.All.Primary_Treatment_M_vs_A, paste(path_out.d21, "Day21.PrimaryTreament_diffexpr-results.csv"))
write.csv(resdata.d21.All.Second_Treatment_M_vs_A, paste(path_out.d21, "Day21.SecondTreament_MvsA_diffexpr-results.csv"))
write.csv(resdata.d21.All.Second_Treatment_S_vs_A, paste(path_out.d21, "Day21.SecondTreament_SvsA_diffexpr-results.csv"))
write.csv(resdata.d21.All.Third_Treatment_M_vs_A, paste(path_out.d21, "Day21.ThirdTreament_diffexpr-results.csv"))
# Effect of primary treatment 'resd14.all.primary_M_vs_A' - 502 DEGs
png("RAnalysis/DESeq2/output/Day21/Day21.PrimaryTreatment-VolcanoPlot.png", 1000, 1000, pointsize=20)
EnhancedVolcano(resd21.All.Primary_Treatment_M_vs_A,
lab = rownames(resd21.All.Primary_Treatment_M_vs_A),
x = 'log2FoldChange',
y = 'pvalue',
title = 'Moderate versus Ambient Treatment (Primary)',
subtitle = "DESeq2 - Differential expression",
FCcutoff = 2.0,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0,
widthConnectors = 0.75)
dev.off()
# Effect of second treatment M v. A 'resdata.d14.second_M_vs_A' - 0 DEGs
png("RAnalysis/DESeq2/output/Day21/Day21.SecondTreatment_MvA-VolcanoPlot.png", 1000, 1000, pointsize=20)
EnhancedVolcano(resd21.All.Second_Treatment_M_vs_A,
lab = rownames(resd21.All.Second_Treatment_M_vs_A),
x = 'log2FoldChange',
y = 'pvalue',
title = 'Moderate versus Ambient Treatment (Second)',
subtitle = "DESeq2 - Differential expression",
FCcutoff = 2.0,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0,
widthConnectors = 0.75)
dev.off()
# Effect of second treatment S v. A 'resd14.all.second_S_vs_A' - 1 DEG
png("RAnalysis/DESeq2/output/Day21/Day21.SecondTreatment_SvA-VolcanoPlot.png", 1000, 1000, pointsize=20)
EnhancedVolcano(resd21.All.Second_Treatment_S_vs_A,
lab = rownames(resd21.All.Second_Treatment_S_vs_A),
x = 'log2FoldChange',
y = 'pvalue',
title = 'Severe versus Ambient Treatment (Second)',
subtitle = "DESeq2 - Differential expression",
FCcutoff = 2.0,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0,
widthConnectors = 0.75)
dev.off()
# Effect of second treatment S v. A 'resd14.all.second_S_vs_A' - 1 DEG
png("RAnalysis/DESeq2/output/Day21/Day21.ThirdTreatment-VolcanoPlot.png", 1000, 1000, pointsize=20)
EnhancedVolcano(resd21.All.Third_Treatment_M_vs_A,
lab = rownames(resd21.All.Third_Treatment_M_vs_A),
x = 'log2FoldChange',
y = 'pvalue',
title = 'Severe versus Ambient Treatment (Second)',
subtitle = "DESeq2 - Differential expression",
FCcutoff = 2.0,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0,
widthConnectors = 0.75)
dev.off()
# Effect of second treatment S v. A 'resd14.all.second_S_vs_A' - 1 DEG
png("RAnalysis/DESeq2/output/Day21/Day21.ThirdTreatment-VolcanoPlot.png", 1000, 1000, pointsize=20)
EnhancedVolcano(resd21.All.Third_Treatment_M_vs_A,
lab = rownames(resd21.All.Third_Treatment_M_vs_A),
x = 'log2FoldChange',
y = 'pvalue',
title = 'Moderate versus Ambient Treatment (Third)',
subtitle = "DESeq2 - Differential expression",
FCcutoff = 2.0,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0,
widthConnectors = 0.75)
dev.off()
png("RAnalysis/DESeq2/output/Day21/Day21-dispersions.png", 1000, 1000, pointsize=20)
plotDispEsts(dds.d21, main="Day 21 data dispersions")
dev.off()
# rlog - regularized log transformation of origin count data to log2 scale - fit for each sample and dist. of coefficients in the data
rld.d21<- rlogTransformation(dds.d21) # rlog transform (regularized log)
head(assays(rld.d21)) # view first few rows
hist(assay(rld.d21)) # view histogram
meanSdPlot(assay(rld.d21)) # plot using "vsn" bioconductor package - shows the sd y axis (sq root of varaince in all samples) - flat curve may seem like a goals, BUT may be unreasonable in cases with MANY true DEGs from experimental conditions
# this gives log2(n + 1)
ntd.d21 <- normTransform(dds.d21)
head(assay(ntd.d21)) # view first few rows
hist(assay(ntd.d21)) # view histogram
meanSdPlot(assay(ntd.d21)) # plot using "vsn" bioconductor package - shows the sd y axis (sq root of varaince in all samples) - flat curve may seem like a goals, BUT may be unreasonable in cases with MANY true DEGs from experimental conditions
save_pheatmap <- function(x, filename, width=1000, height=960) { # template for saving pheatmap outputs
stopifnot(!missing(x))
stopifnot(!missing(filename))
png(filename,width = width, height=height)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
df <- as.data.frame(colData(dds.d14)[,c("Primary_Treatment","Second_Treament", "Third Treatment")])
# settings for the heatmaps
select <- order(rowMeans(counts(dds.d21,normalized=TRUE)), decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds.d21)[,c("Primary_Treatment","Second_Treament", "Third Treatment")])
df <- as.data.frame(colData(dds.d21)[,c("Primary_Treatment","Second_Treament", "Third_Treatment")])
annotation_colors = list(Treatment = c(A="Blue", M="Orange"))
annotation_colors
# rlog heatmap
d21.rlog.heatmap<- pheatmap(assay(rld.d14)[select,], cluster_rows=T, show_rownames=F, # rlog heatmap
cluster_cols=T, annotation_col=df, annotation_colors = annotation_colors,
main = "rlog_Day21")
annotation_colors = list(Treatment = c(A="Blue", M="Orange", S= "Red"))
# rlog heatmap
d21.rlog.heatmap<- pheatmap(assay(rld.d14)[select,], cluster_rows=T, show_rownames=F, # rlog heatmap
cluster_cols=T, annotation_col=df, annotation_colors = annotation_colors,
main = "rlog_Day21")
# rlog heatmap
d21.rlog.heatmap<- pheatmap(assay(dds.d21)[select,], cluster_rows=T, show_rownames=F, # rlog heatmap
cluster_cols=T, annotation_col=df, annotation_colors = annotation_colors,
main = "rlog_Day21")
save_pheatmap(d21.rlog.heatmap, filename = "RAnalysis/DESeq2/output/Day21/Day21-rlog_heatmap.png")
# ntd heatmap
d21.ntd.heatmap<- pheatmap(assay(dds.d21)[select,], cluster_rows=T, show_rownames=F, # rlog heatmap
cluster_cols=T, annotation_col=df, annotation_colors = annotation_colors,
main = "ntd_Day21")
save_pheatmap(d21.ntd.heatmap, filename = "RAnalysis/DESeq2/output/Day21/Day21-ntd_heatmap.png")
# Colors for plots below; Use RColorBrewer, better and assign mycols variable
mycols.d21 <- brewer.pal(8, "Dark2")[1:length(unique(rld.d21$Primary_Treatment))]
mycols.d21_2 <- brewer.pal(8, "Dark2")[1:length(unique(rld.d21$Second_Treament))]
# Sample distance heatmap
sampleDists.d21 <- as.matrix(dist(t(assay(rld.d21))))
png("RAnalysis/DESeq2/output/Day21/Day21-heatmap.png", 1000, 1000, pointsize=20)
heatmap.2(as.matrix(sampleDists.d21), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols.d21_2[rld.d21$Second_Treament], RowSideColors=mycols.d21[rld.d21$Primary_Treatment],
margin=c(10, 10), main="Day 21 Sample to Sample heatmap")
dev.off()
# Principal components analysis ------------------------------------------------------------------------------------------ #
pcaExplorer(dds = dds.d21)
