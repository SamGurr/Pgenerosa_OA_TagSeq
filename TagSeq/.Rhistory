abs(ShellLength_geneTraitSignificance[moduleGenes, 1]),
xlab = paste("Module Membership in", module, "module"),
ylab = "Gene significance for Shell length",
main = paste("Day7 shell length 'VIOLET': Module membership vs. gene significance\n"),
cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = "black")
length(colnames(dds.d7_vst)[moduleColors=="violet"]) # 162 total genes in the lightcyan module
annot = read.delim2(file = "Seq_details/Panopea-generosa-genes-annotations.txt",header = F);
dim(annot) # 34947     9
names(annot) # V1 are the gene.IDs
probes = names(d7.data)
probes2annot = match(probes, annot$V1)
# The following is the number or probes without annotation:
sum(is.na(probes2annot))
# Should return 0.
#   TAOC dataframe - grey60 --------------------------------------------------------------------------- #
names(ShellLength_geneTraitSignificance)
names(ShellLength_GSPvalue)
geneInfo_ShellLength = data.frame(substanceBXH = probes,
geneSymbol = annot$V1[probes2annot],
#LocusLinkID = annot$LocusLinkID[probes2annot],
moduleColor = moduleColors,
Uniprot = annot$V5[probes2annot],
HGNC = annot$V6[probes2annot],
GO.terms = annot$V8[probes2annot],
GO.description = annot$V9[probes2annot],
ShellLength_geneTraitSignificance, # call this specific to the module and trait of interest
ShellLength_GSPvalue)              # call this specific to the module and trait of interest
View(geneInfo_ShellLength)
modOrder = order(-abs(cor(MEs, ShellLength, use = "p"))); # order by the strength of the correlation between module and trait values for each sample
for (mod in 1:ncol(geneModuleMembership)) # Add module membership information in the chosen order
{
oldNames = names(geneInfo_ShellLength)
geneInfo_ShellLength = data.frame(geneInfo_ShellLength, geneModuleMembership[, modOrder[mod]],
MMPvalue[, modOrder[mod]]);
names(geneInfo_ShellLength) = c(oldNames, paste("MM.", modNames[modOrder[mod]], sep=""),
paste("p.MM.", modNames[modOrder[mod]], sep=""))
}
# Order the genes in the geneInfo variable first by module color, then by geneTraitSignificance
geneOrder = order(geneInfo_ShellLength$moduleColor, -abs(geneInfo_ShellLength$GS.ShellLengthShellLength));
geneInfo_ShellLength = geneInfo_ShellLength[geneOrder, ]
View(geneInfo_ShellLength)
View(geneInfo_ShellLength)
write.csv(geneInfo_ShellLength, file = "Analysis/Output/WGCNA/Day7/d7.WGCNA_ModulMembership.csv")
# SET WORKING DIRECTORY AND LOAD DATA
setwd("C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/")
# Load libraries
library(dplyr)
library(goseq)
library(DESeq2)
library(reshape2)
library(ggplot2)
library(Rmisc)
library(ggpubr)
library(tibble)
library(hrbrthemes)
library(gridExtra)
# Load data
d7_ModEigen <- read.csv("Analysis/Output/WGCNA/Day7/d7.WGCNA_ModulEigengenes.csv")
d7_Annot_ModuleMembership <-  read.csv("Analysis/Output/WGCNA/Day7/d7.WGCNA_ModulMembership.csv")
d7_vst_data <- read.csv("Analysis/Output/WGCNA/Day7/Day7_vstTransformed_WGCNAdata.csv")
Master.Treatment_Phenotype.data <- read.csv(file="Analysis/Data/ Master_Phyenotype.and.Exp.Treatment_Metadata.csv", sep=',', header=TRUE)
d7_Annot_ModuleMembership
#=====================================================================================
#
#  Prep and merge datasets for plotting
#
#=====================================================================================
# Prep data to merge
# module membership
d7_Annot_ModuleMembership <- d7_Annot_ModuleMembership[-c(1:2)] # ommit the redundant gene name columns buut keep 'geneSymbol'
dim(d7_Annot_ModuleMembership) #  11800  62
# module eigengenes
names(d7_ModEigen)[1] <- "Sample.Name"
# normalized count data (same used for the dds object and WGCNA analysis)
d7_vst_data_t <- as.data.frame(t(d7_vst_data[, -(1)])) # trsnpose columns names to rows (genes)
colnames(d7_vst_data_t) <- d7_vst_data[, 1] # name the columns as the rows in previous dataset (sample IDS)
d7_vst_data_t<- d7_vst_data_t %>% tibble::rownames_to_column("geneSymbol") # "geneSymbol" - create column and remname the gene name column to 'geneSymbol'
d7_vst_data_t
# merge Master datasets
# GO terms
d7_GOTermsMaster.Modules<-  merge(d7_Annot_ModuleMembership, d7_vst_data_t, by = "geneSymbol")
dim(d7_GOTermsMaster.Modules) # 11800   107
# Eigengenes and traits
d7_EigenTraitMaster<-  merge(d7_ModEigen, Master.Treatment_Phenotype.data, by = "Sample.Name")
dim(d7_EigenTraitMaster) # 45 41
d7_EigenTraitMaster
# lets loop this through to get a bunch of plots
phys <- d7_EigenTraitMaster[,c(36:41)]
phys
d7_EigenTraitMaster
ncol(d7_EigenTraitMaster)
# lets loop this through to get a bunch of plots
phys <- d7_EigenTraitMaster[,c(46:52)]
phys
# lets loop this through to get a bunch of plots
phys <- d7_EigenTraitMaster[,c(47:52)]
d7_EigenTraitMaster
modules <- d7_EigenTraitMaster[,c(2:40)]
modules
modules <- d7_EigenTraitMaster[,c(2:39)]
for(i in 1:ncol(modules)) {
module_color <- substr(names(modules)[i], 3,12)
moduledata <- modules[,i]
par(mfrow=c(3,2))
my.formula <- y ~ x
p <- ggplot(d7_EigenTraitMaster,
aes(x=moduledata, y=phys[,1])) + # linetype= Primary_Treatment, group = Primary_Treatment
scale_fill_manual(values=c("#56B4E9", "#D55E00")) +
geom_smooth(method=lm , color="grey50", alpha = 0.1, se=TRUE, linetype = "dashed", formula = my.formula) + #, linetype = "dashed"
stat_poly_eq(formula = my.formula,
eq.with.lhs = "italic(hat(y))~`=`~",
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)  +
geom_point(aes(colour = factor(Primary_Treatment)), size = 3, shape = 19) +
scale_color_manual(values=c("#56B4E9", "#D55E00")) +
labs(x="Eigengene expression by sample", y = paste(names(phys)[1])) +
theme_bw()
p1 <- p + ggtitle(paste("WGCNAmodule:", module_color, "&",(names(phys)[1]), sep =' ')) + theme(legend.position="none")
p <- ggplot(d7_EigenTraitMaster,
aes(x=moduledata, y=phys[,2])) + # linetype= Primary_Treatment, group = Primary_Treatment
scale_fill_manual(values=c("#56B4E9", "#D55E00")) +
geom_smooth(method=lm , color="grey50", alpha = 0.1, se=TRUE, linetype = "dashed", formula = my.formula) + #, linetype = "dashed"
stat_poly_eq(formula = my.formula,
eq.with.lhs = "italic(hat(y))~`=`~",
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)  +
geom_point(aes(colour = factor(Primary_Treatment)), size = 3, shape = 19) +
scale_color_manual(values=c("#56B4E9", "#D55E00")) +
labs(x="Eigengene expression by sample", y = paste(names(phys)[2])) +
theme_bw()
p2 <- p + ggtitle(paste("WGCNAmodule:", module_color, "&",(names(phys)[2]), sep =' ')) + theme(legend.position="none")
p <- ggplot(d7_EigenTraitMaster,
aes(x=moduledata, y=phys[,3])) + # linetype= Primary_Treatment, group = Primary_Treatment
scale_fill_manual(values=c("#56B4E9", "#D55E00")) +
geom_smooth(method=lm , color="grey50", alpha = 0.1, se=TRUE, linetype = "dashed", formula = my.formula) + #, linetype = "dashed"
stat_poly_eq(formula = my.formula,
eq.with.lhs = "italic(hat(y))~`=`~",
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)  +
geom_point(aes(colour = factor(Primary_Treatment)), size = 3, shape = 19) +
scale_color_manual(values=c("#56B4E9", "#D55E00")) +
labs(x="Eigengene expression by sample", y = paste(names(phys)[3])) +
theme_bw()
p3 <- p + ggtitle(paste("WGCNAmodule:", module_color, "&",(names(phys)[3]), sep =' ')) + theme(legend.position="none")
p <- ggplot(d7_EigenTraitMaster,
aes(x=moduledata, y=phys[,4])) + # linetype= Primary_Treatment, group = Primary_Treatment
scale_fill_manual(values=c("#56B4E9", "#D55E00")) +
geom_smooth(method=lm , color="grey50", alpha = 0.1, se=TRUE, linetype = "dashed", formula = my.formula) + #, linetype = "dashed"
stat_poly_eq(formula = my.formula,
eq.with.lhs = "italic(hat(y))~`=`~",
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)  +
geom_point(aes(colour = factor(Primary_Treatment)), size = 3, shape = 19) +
scale_color_manual(values=c("#56B4E9", "#D55E00")) +
labs(x="Eigengene expression by sample", y = paste(names(phys)[4])) +
theme_bw()
p4 <- p + ggtitle(paste("WGCNAmodule:", module_color, "&",(names(phys)[4]), sep =' ')) + theme(legend.position="none")
p <- ggplot(d7_EigenTraitMaster,
aes(x=moduledata, y=phys[,5])) + # linetype= Primary_Treatment, group = Primary_Treatment
scale_fill_manual(values=c("#56B4E9", "#D55E00")) +
geom_smooth(method=lm , color="grey50", alpha = 0.1, se=TRUE, linetype = "dashed", formula = my.formula) + #, linetype = "dashed"
stat_poly_eq(formula = my.formula,
eq.with.lhs = "italic(hat(y))~`=`~",
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)  +
geom_point(aes(colour = factor(Primary_Treatment)), size = 3, shape = 19) +
scale_color_manual(values=c("#56B4E9", "#D55E00")) +
labs(x="Eigengene expression by sample", y = paste(names(phys)[5])) +
theme_bw()
p5 <- p + ggtitle(paste("WGCNAmodule:", module_color, "&",(names(phys)[5]), sep =' ')) + theme(legend.position="none")
p <- ggplot(d7_EigenTraitMaster,
aes(x=moduledata, y=phys[,6])) + # linetype= Primary_Treatment, group = Primary_Treatment
scale_fill_manual(values=c("#56B4E9", "#D55E00")) +
geom_smooth(method=lm , color="grey50", alpha = 0.1, se=TRUE, linetype = "dashed", formula = my.formula) + #, linetype = "dashed"
stat_poly_eq(formula = my.formula,
eq.with.lhs = "italic(hat(y))~`=`~",
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)  +
geom_point(aes(colour = factor(Primary_Treatment)), size = 3, shape = 19) +
scale_color_manual(values=c("#56B4E9", "#D55E00")) +
labs(x="Eigengene expression by sample", y = paste(names(phys)[6])) +
theme_bw()
p6 <- p + ggtitle(paste("WGCNAmodule:", module_color, "&",(names(phys)[6]), sep =' ')) + theme(legend.position="none")
# save plot grid
#png("Analysis/Output/WGCNA/Day21/Day21_PhysOnly_heatmap2.png", 1000, 1000, pointsize=20)
ggarrange(p1, p2, p3, p4, p5, p6, ncol = 2, nrow = 3)
ggsave(paste0("Analysis/Output/WGCNA/Day7/EigengenePlots/Day7_EigengenePlot_", module_color, ".png"))
}
library(ggpmisc)
for(i in 1:ncol(modules)) {
module_color <- substr(names(modules)[i], 3,12)
moduledata <- modules[,i]
par(mfrow=c(3,2))
my.formula <- y ~ x
p <- ggplot(d7_EigenTraitMaster,
aes(x=moduledata, y=phys[,1])) + # linetype= Primary_Treatment, group = Primary_Treatment
scale_fill_manual(values=c("#56B4E9", "#D55E00")) +
geom_smooth(method=lm , color="grey50", alpha = 0.1, se=TRUE, linetype = "dashed", formula = my.formula) + #, linetype = "dashed"
stat_poly_eq(formula = my.formula,
eq.with.lhs = "italic(hat(y))~`=`~",
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)  +
geom_point(aes(colour = factor(Primary_Treatment)), size = 3, shape = 19) +
scale_color_manual(values=c("#56B4E9", "#D55E00")) +
labs(x="Eigengene expression by sample", y = paste(names(phys)[1])) +
theme_bw()
p1 <- p + ggtitle(paste("WGCNAmodule:", module_color, "&",(names(phys)[1]), sep =' ')) + theme(legend.position="none")
p <- ggplot(d7_EigenTraitMaster,
aes(x=moduledata, y=phys[,2])) + # linetype= Primary_Treatment, group = Primary_Treatment
scale_fill_manual(values=c("#56B4E9", "#D55E00")) +
geom_smooth(method=lm , color="grey50", alpha = 0.1, se=TRUE, linetype = "dashed", formula = my.formula) + #, linetype = "dashed"
stat_poly_eq(formula = my.formula,
eq.with.lhs = "italic(hat(y))~`=`~",
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)  +
geom_point(aes(colour = factor(Primary_Treatment)), size = 3, shape = 19) +
scale_color_manual(values=c("#56B4E9", "#D55E00")) +
labs(x="Eigengene expression by sample", y = paste(names(phys)[2])) +
theme_bw()
p2 <- p + ggtitle(paste("WGCNAmodule:", module_color, "&",(names(phys)[2]), sep =' ')) + theme(legend.position="none")
p <- ggplot(d7_EigenTraitMaster,
aes(x=moduledata, y=phys[,3])) + # linetype= Primary_Treatment, group = Primary_Treatment
scale_fill_manual(values=c("#56B4E9", "#D55E00")) +
geom_smooth(method=lm , color="grey50", alpha = 0.1, se=TRUE, linetype = "dashed", formula = my.formula) + #, linetype = "dashed"
stat_poly_eq(formula = my.formula,
eq.with.lhs = "italic(hat(y))~`=`~",
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)  +
geom_point(aes(colour = factor(Primary_Treatment)), size = 3, shape = 19) +
scale_color_manual(values=c("#56B4E9", "#D55E00")) +
labs(x="Eigengene expression by sample", y = paste(names(phys)[3])) +
theme_bw()
p3 <- p + ggtitle(paste("WGCNAmodule:", module_color, "&",(names(phys)[3]), sep =' ')) + theme(legend.position="none")
p <- ggplot(d7_EigenTraitMaster,
aes(x=moduledata, y=phys[,4])) + # linetype= Primary_Treatment, group = Primary_Treatment
scale_fill_manual(values=c("#56B4E9", "#D55E00")) +
geom_smooth(method=lm , color="grey50", alpha = 0.1, se=TRUE, linetype = "dashed", formula = my.formula) + #, linetype = "dashed"
stat_poly_eq(formula = my.formula,
eq.with.lhs = "italic(hat(y))~`=`~",
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)  +
geom_point(aes(colour = factor(Primary_Treatment)), size = 3, shape = 19) +
scale_color_manual(values=c("#56B4E9", "#D55E00")) +
labs(x="Eigengene expression by sample", y = paste(names(phys)[4])) +
theme_bw()
p4 <- p + ggtitle(paste("WGCNAmodule:", module_color, "&",(names(phys)[4]), sep =' ')) + theme(legend.position="none")
p <- ggplot(d7_EigenTraitMaster,
aes(x=moduledata, y=phys[,5])) + # linetype= Primary_Treatment, group = Primary_Treatment
scale_fill_manual(values=c("#56B4E9", "#D55E00")) +
geom_smooth(method=lm , color="grey50", alpha = 0.1, se=TRUE, linetype = "dashed", formula = my.formula) + #, linetype = "dashed"
stat_poly_eq(formula = my.formula,
eq.with.lhs = "italic(hat(y))~`=`~",
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)  +
geom_point(aes(colour = factor(Primary_Treatment)), size = 3, shape = 19) +
scale_color_manual(values=c("#56B4E9", "#D55E00")) +
labs(x="Eigengene expression by sample", y = paste(names(phys)[5])) +
theme_bw()
p5 <- p + ggtitle(paste("WGCNAmodule:", module_color, "&",(names(phys)[5]), sep =' ')) + theme(legend.position="none")
p <- ggplot(d7_EigenTraitMaster,
aes(x=moduledata, y=phys[,6])) + # linetype= Primary_Treatment, group = Primary_Treatment
scale_fill_manual(values=c("#56B4E9", "#D55E00")) +
geom_smooth(method=lm , color="grey50", alpha = 0.1, se=TRUE, linetype = "dashed", formula = my.formula) + #, linetype = "dashed"
stat_poly_eq(formula = my.formula,
eq.with.lhs = "italic(hat(y))~`=`~",
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)  +
geom_point(aes(colour = factor(Primary_Treatment)), size = 3, shape = 19) +
scale_color_manual(values=c("#56B4E9", "#D55E00")) +
labs(x="Eigengene expression by sample", y = paste(names(phys)[6])) +
theme_bw()
p6 <- p + ggtitle(paste("WGCNAmodule:", module_color, "&",(names(phys)[6]), sep =' ')) + theme(legend.position="none")
# save plot grid
#png("Analysis/Output/WGCNA/Day21/Day21_PhysOnly_heatmap2.png", 1000, 1000, pointsize=20)
ggarrange(p1, p2, p3, p4, p5, p6, ncol = 2, nrow = 3)
ggsave(paste0("Analysis/Output/WGCNA/Day7/EigengenePlots/Day7_EigengenePlot_", module_color, ".png"))
}
modcolor <- as.data.frame(unique(d7_Annot_ModuleMembership$moduleColor))
names(modcolor)[1] <- "color"
Master.Treatment_Phenotype.data
# experiment treatment and total protein data - narrow the columns
exp.phys_data <- Master.Treatment_Phenotype.data %>%
dplyr::filter(Date %in% 20190731) %>%  # filter out Day 21 data only
dplyr::select(c('Sample.Name', 'All_Treatment', 'Primary_Treatment', 'Second_Treament', 'mean.µmol.CRE.g.protein')) # call select columns
for(i in 1:nrow(modcolor)) {
# vst read count date - narrow the columns - reshape and rename
Mod_geneIDs <- d7_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% modcolor[i,]) %>%  dplyr::select("geneSymbol")
d7_vst_Mod <- d7_vst_data_t %>% dplyr::filter(geneSymbol %in% Mod_geneIDs[,1])
d7_vst_Mod_MELT <- melt(d21_vst_Mod, id=("geneSymbol")) # melt using reshape2
names(d7_vst_Mod_MELT)[(2:3)] <- c('Sample.Name', 'vst_Expression') # change column names
# merge by common row values 'Sample.Name'
merged_Expdata_Mod <- merge(d7_vst_Mod_MELT, exp.phys_data, by ='Sample.Name')
# mean Exp response table
meanEXp_Mod <- merged_Expdata_Mod %>%
select(c('Sample.Name','vst_Expression','Primary_Treatment', 'Second_Treament')) %>%
group_by(Sample.Name, Primary_Treatment, Second_Treament, Third_Treatment) %>%
dplyr::summarize(mean.vstExp = mean(vst_Expression),
sd.vsdtExp = sd(vst_Expression),
na.rm=TRUE)
# summarize datasets further by treatment period
# remember:this is a mean of a mean!! First we complete mean vst exp by sample id (compiling all red module genes) - next all sample IDs by the treatment period (below
# I will use these for mean SE plots
# Primary treatment
meanEXp_Summary.Prim_Mod <- meanEXp_Mod %>%
group_by(Primary_Treatment) %>%
dplyr::summarize(mean = mean(mean.vstExp),
sd = sd(mean.vstExp),
n = n(),
se = sd/sqrt(n))
# Second treatment
meanEXp_Summary.Sec_Mod <- meanEXp_Mod %>%
group_by(Second_Treament,Primary_Treatment) %>%
dplyr::summarize(mean = mean(mean.vstExp),
sd = sd(mean.vstExp),
n = n(),
se = sd/sqrt(n))
# PLOT
# The errorbars overlapped, so use position_dodge to move them horizontally
pd <- position_dodge(0.3) # move them .05 to the left and right
# Primary treatment mean sd plot
min_p1 <- min(meanEXp_Summary.Prim_Mod$mean) - max(meanEXp_Summary.Prim_Mod$se)
max_p1 <- max(meanEXp_Summary.Prim_Mod$mean) + max(meanEXp_Summary.Prim_Mod$se)
Primary.vst.Mod <- ggplot(meanEXp_Summary.Prim_Mod, aes(x=Primary_Treatment, y=mean, fill=Primary_Treatment)) +  # , colour=supp, group=supp))
theme_bw() +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Primary pCO2 treatment") +
ylab(NULL) +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
ggtitle(paste("Day 21 WGCNA", modcolor[i,], "Module VST GeneExp", sep =' ')) +
# expand_limits(y=0) +                                                    # Expand y range
scale_y_continuous(limits=c((min_p1), (max_p1))) +
theme(text = element_text(size=15))
# Second treatment mean sd plot
min_p2 <- min(meanEXp_Summary.Sec_Mod$mean) - max(meanEXp_Summary.Sec_Mod$se)
max_p2 <- max(meanEXp_Summary.Sec_Mod$mean) + max(meanEXp_Summary.Sec_Mod$se)
Sec.vst.Mod <- ggplot(meanEXp_Summary.Sec_Mod, aes(x=Second_Treament, y=mean, fill=Primary_Treatment, group=Primary_Treatment)) +
theme_bw() +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Second pCO2 treatment") +
ylab(paste(modcolor[i,]," Module VST Gene Expression (Mean +/- SE)", sep = ' ')) +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
# ggtitle("Day 21 WGCNA red' Module VST GeneExp") +
# expand_limits(y=0) +                                                    # Expand y range
scale_y_continuous(limits=c((min_p2), (max_p2))) +
theme(text = element_text(size=15))
# output
png(paste("Analysis/Output/WGCNA/Day7/ModuleExp_Treatment/Day7_Exp_Module",modcolor[i,],".png"), 600, 1000, pointsize=20)
print(ggarrange(Primary.vst.Mod, Sec.vst.Mod,
plotlist = NULL,
ncol = 1,
nrow = 2,
labels = NULL))
dev.off()
}
for(i in 1:nrow(modcolor)) {
# vst read count date - narrow the columns - reshape and rename
Mod_geneIDs <- d7_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% modcolor[i,]) %>%  dplyr::select("geneSymbol")
d7_vst_Mod <- d7_vst_data_t %>% dplyr::filter(geneSymbol %in% Mod_geneIDs[,1])
d7_vst_Mod_MELT <- melt(d7_vst_Mod, id=("geneSymbol")) # melt using reshape2
names(d7_vst_Mod_MELT)[(2:3)] <- c('Sample.Name', 'vst_Expression') # change column names
# merge by common row values 'Sample.Name'
merged_Expdata_Mod <- merge(d7_vst_Mod_MELT, exp.phys_data, by ='Sample.Name')
# mean Exp response table
meanEXp_Mod <- merged_Expdata_Mod %>%
select(c('Sample.Name','vst_Expression','Primary_Treatment', 'Second_Treament')) %>%
group_by(Sample.Name, Primary_Treatment, Second_Treament, Third_Treatment) %>%
dplyr::summarize(mean.vstExp = mean(vst_Expression),
sd.vsdtExp = sd(vst_Expression),
na.rm=TRUE)
# summarize datasets further by treatment period
# remember:this is a mean of a mean!! First we complete mean vst exp by sample id (compiling all red module genes) - next all sample IDs by the treatment period (below
# I will use these for mean SE plots
# Primary treatment
meanEXp_Summary.Prim_Mod <- meanEXp_Mod %>%
group_by(Primary_Treatment) %>%
dplyr::summarize(mean = mean(mean.vstExp),
sd = sd(mean.vstExp),
n = n(),
se = sd/sqrt(n))
# Second treatment
meanEXp_Summary.Sec_Mod <- meanEXp_Mod %>%
group_by(Second_Treament,Primary_Treatment) %>%
dplyr::summarize(mean = mean(mean.vstExp),
sd = sd(mean.vstExp),
n = n(),
se = sd/sqrt(n))
# PLOT
# The errorbars overlapped, so use position_dodge to move them horizontally
pd <- position_dodge(0.3) # move them .05 to the left and right
# Primary treatment mean sd plot
min_p1 <- min(meanEXp_Summary.Prim_Mod$mean) - max(meanEXp_Summary.Prim_Mod$se)
max_p1 <- max(meanEXp_Summary.Prim_Mod$mean) + max(meanEXp_Summary.Prim_Mod$se)
Primary.vst.Mod <- ggplot(meanEXp_Summary.Prim_Mod, aes(x=Primary_Treatment, y=mean, fill=Primary_Treatment)) +  # , colour=supp, group=supp))
theme_bw() +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Primary pCO2 treatment") +
ylab(NULL) +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
ggtitle(paste("Day 21 WGCNA", modcolor[i,], "Module VST GeneExp", sep =' ')) +
# expand_limits(y=0) +                                                    # Expand y range
scale_y_continuous(limits=c((min_p1), (max_p1))) +
theme(text = element_text(size=15))
# Second treatment mean sd plot
min_p2 <- min(meanEXp_Summary.Sec_Mod$mean) - max(meanEXp_Summary.Sec_Mod$se)
max_p2 <- max(meanEXp_Summary.Sec_Mod$mean) + max(meanEXp_Summary.Sec_Mod$se)
Sec.vst.Mod <- ggplot(meanEXp_Summary.Sec_Mod, aes(x=Second_Treament, y=mean, fill=Primary_Treatment, group=Primary_Treatment)) +
theme_bw() +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Second pCO2 treatment") +
ylab(paste(modcolor[i,]," Module VST Gene Expression (Mean +/- SE)", sep = ' ')) +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
# ggtitle("Day 21 WGCNA red' Module VST GeneExp") +
# expand_limits(y=0) +                                                    # Expand y range
scale_y_continuous(limits=c((min_p2), (max_p2))) +
theme(text = element_text(size=15))
# output
png(paste("Analysis/Output/WGCNA/Day7/ModuleExp_Treatment/Day7_Exp_Module",modcolor[i,],".png"), 600, 1000, pointsize=20)
print(ggarrange(Primary.vst.Mod, Sec.vst.Mod,
plotlist = NULL,
ncol = 1,
nrow = 2,
labels = NULL))
dev.off()
}
for(i in 1:nrow(modcolor)) {
# vst read count date - narrow the columns - reshape and rename
Mod_geneIDs <- d7_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% modcolor[i,]) %>%  dplyr::select("geneSymbol")
d7_vst_Mod <- d7_vst_data_t %>% dplyr::filter(geneSymbol %in% Mod_geneIDs[,1])
d7_vst_Mod_MELT <- melt(d7_vst_Mod, id=("geneSymbol")) # melt using reshape2
names(d7_vst_Mod_MELT)[(2:3)] <- c('Sample.Name', 'vst_Expression') # change column names
# merge by common row values 'Sample.Name'
merged_Expdata_Mod <- merge(d7_vst_Mod_MELT, exp.phys_data, by ='Sample.Name')
# mean Exp response table
meanEXp_Mod <- merged_Expdata_Mod %>%
select(c('Sample.Name','vst_Expression','Primary_Treatment', 'Second_Treament')) %>%
group_by(Sample.Name, Primary_Treatment, Second_Treament) %>%
dplyr::summarize(mean.vstExp = mean(vst_Expression),
sd.vsdtExp = sd(vst_Expression),
na.rm=TRUE)
# summarize datasets further by treatment period
# remember:this is a mean of a mean!! First we complete mean vst exp by sample id (compiling all red module genes) - next all sample IDs by the treatment period (below
# I will use these for mean SE plots
# Primary treatment
meanEXp_Summary.Prim_Mod <- meanEXp_Mod %>%
group_by(Primary_Treatment) %>%
dplyr::summarize(mean = mean(mean.vstExp),
sd = sd(mean.vstExp),
n = n(),
se = sd/sqrt(n))
# Second treatment
meanEXp_Summary.Sec_Mod <- meanEXp_Mod %>%
group_by(Second_Treament,Primary_Treatment) %>%
dplyr::summarize(mean = mean(mean.vstExp),
sd = sd(mean.vstExp),
n = n(),
se = sd/sqrt(n))
# PLOT
# The errorbars overlapped, so use position_dodge to move them horizontally
pd <- position_dodge(0.3) # move them .05 to the left and right
# Primary treatment mean sd plot
min_p1 <- min(meanEXp_Summary.Prim_Mod$mean) - max(meanEXp_Summary.Prim_Mod$se)
max_p1 <- max(meanEXp_Summary.Prim_Mod$mean) + max(meanEXp_Summary.Prim_Mod$se)
Primary.vst.Mod <- ggplot(meanEXp_Summary.Prim_Mod, aes(x=Primary_Treatment, y=mean, fill=Primary_Treatment)) +  # , colour=supp, group=supp))
theme_bw() +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Primary pCO2 treatment") +
ylab(NULL) +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
ggtitle(paste("Day 21 WGCNA", modcolor[i,], "Module VST GeneExp", sep =' ')) +
# expand_limits(y=0) +                                                    # Expand y range
scale_y_continuous(limits=c((min_p1), (max_p1))) +
theme(text = element_text(size=15))
# Second treatment mean sd plot
min_p2 <- min(meanEXp_Summary.Sec_Mod$mean) - max(meanEXp_Summary.Sec_Mod$se)
max_p2 <- max(meanEXp_Summary.Sec_Mod$mean) + max(meanEXp_Summary.Sec_Mod$se)
Sec.vst.Mod <- ggplot(meanEXp_Summary.Sec_Mod, aes(x=Second_Treament, y=mean, fill=Primary_Treatment, group=Primary_Treatment)) +
theme_bw() +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size = 4, shape=21) +
xlab("Second pCO2 treatment") +
ylab(paste(modcolor[i,]," Module VST Gene Expression (Mean +/- SE)", sep = ' ')) +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("#56B4E9","#E69F00")) +
# scale_color_manual(values=c("#56B4E9","#E69F00")) +
# ggtitle("Day 21 WGCNA red' Module VST GeneExp") +
# expand_limits(y=0) +                                                    # Expand y range
scale_y_continuous(limits=c((min_p2), (max_p2))) +
theme(text = element_text(size=15))
# output
png(paste("Analysis/Output/WGCNA/Day7/ModuleExp_Treatment/Day7_Exp_Module",modcolor[i,],".png"), 600, 1000, pointsize=20)
print(ggarrange(Primary.vst.Mod, Sec.vst.Mod,
plotlist = NULL,
ncol = 1,
nrow = 2,
labels = NULL))
dev.off()
}
