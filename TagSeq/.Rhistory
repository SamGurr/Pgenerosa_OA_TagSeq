Day14_all.counts <- read.csv(file="C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/Analysis/Data/Filtered_Counts/10cpm_50perc/day14.counts.filtered_10cpm50perc.csv", sep=',', header=TRUE)
colnames(Day14_all.counts)[1] <- "gene.ID"# rename Pgen gene ID column
# day21 filtered 10cpm in 50% samples ----------------------------- #
Day21_all.counts <- read.csv(file="C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/Analysis/Data/Filtered_Counts/10cpm_50perc/day21.counts.filtered_10cpm50perc.csv", sep=',', header=TRUE)
colnames(Day21_all.counts)[1] <- "gene.ID"# rename Pgen gene ID column
#===================================================================================== #
# LOAD DATA - goseq; load the annotation and prepare the fouressentail steps for goseq
#
#===================================================================================== #
#Panopea generosa - load .fna ('Geoduck_annotation') and foramt GO terms ('Geoduck_GOterms') and vectors
Geoduck_annotation <- read.delim2(file="C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/Seq_details/Panopea-generosa-genes-annotations.txt", header=F)
# build annotation file to merge with the mean LFC tables
annot.condenced <- Geoduck_annotation[,c(1,3:9)]
annot.condenced$gene.length <- annot.condenced$V4 - annot.condenced$V3
annot.condenced <- annot.condenced[,-c(2,3)]
names(annot.condenced) <- c('Gene.ID', 'Uniprot', 'HGNC', 'fxn', 'Go.terms', 'Go.fxns','gene.length')
# Prepare dataframe(s) and vectors for goseq
# (1) Format 'GO.term' for goseq from the P.generosa annotation .fna file 'Geoduck_annotation'
Geoduck_GOterms <- as.data.frame(Geoduck_annotation) %>% dplyr::select(c('V1','V8'))
colnames(Geoduck_GOterms)[1:2] <- c('transcript.ID', 'GO.terms') # call gene name and the GO terms - (Uniprot ID 'V5')
splitted <- strsplit(as.character(Geoduck_GOterms$GO.terms), "; ") #slit into multiple GO ids
GO.terms <- data.frame(v1 = rep.int(Geoduck_GOterms$transcript.ID, sapply(splitted, length)), v2 = unlist(splitted)) #list all genes with each of their GO terms in a single row
GO.terms$Term <- Term(GO.terms$v2)
GO.terms$Ontology  <- Ontology(GO.terms$v2)
# (2) Unique Genes - vector based on all unique mapped reads
# Construct a named vector of all target genes for goseq
GO_unique.genes.all <- as.vector(unique(Geoduck_annotation$V1)) # call all unique genes for GO analysis (goseq)
IDvector.d7         <- as.vector(unique(Day7_all.counts$gene.ID))  # call unique genes (those filtered and used in DESEq2) on day7 - 'IDvector'
IDvector.d14        <- as.vector(unique(Day14_all.counts$gene.ID)) # call unique genes (those filtered and used in DESEq2) on day14 - 'IDvector'
IDvector.d21        <- as.vector(unique(Day21_all.counts$gene.ID)) # call unique genes (those filtered and used in DESEq2) on day21 - 'IDvector'
# (3) Gene length
# length vector
GO_gene.length <- Geoduck_annotation %>% dplyr::mutate(length = V4-V3) %>%  dplyr::select(c("V1","length"))
names(GO_gene.length)[1] <- "gene.ID"
# merge length with counts data
length_vector   <- GO_gene.length$length
GeneLength.d7   <- merge(GO_gene.length, Day7_all.counts, by = "gene.ID")  # merge day7 counts with 'GO_gene.length'
GeneLength.d14  <- merge(GO_gene.length, Day14_all.counts, by = "gene.ID")  # merge day14 counts with 'GO_gene.length'
GeneLength.d21  <- merge(GO_gene.length, Day21_all.counts, by = "gene.ID")  # merge day21 counts with 'GO_gene.length'
# call length values for goseq - confirms that the IDvector and length_vector are the same!!!
length_vector.d7 <- GeneLength.d7$length    # length vector for all unique reads address in WGCNA on day 7
sum(sapply(length_vector.d7,length)) == dim(Day7_all.counts)[1] #should be TRUE
length_vector.d14 <- GeneLength.d14$length  # length vector for all unique reads address in WGCNA on day 14
sum(sapply(length_vector.d14,length)) == dim(Day14_all.counts)[1] #should be TRUE
length_vector.d21 <- GeneLength.d21$length  # length vector for all unique reads address in WGCNA on day 21
sum(sapply(length_vector.d21,length)) == dim(Day21_all.counts)[1] #should be TRUE
for (i in 1:nrow(WGCNA_ColorList)) {
if (WGCNA_ColorList[i,2] == "Day7") {
Mod <- d7_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% WGCNA_ColorList[i,1]) # call the WGCNA Day - essential here!
Modgenes <- Mod[1]
names(Modgenes)[1] <- "Gene.ID" # 162 genws in the green module
# Mod_integer <- as.integer(IDvector.d7 %in% (Modgenes$Gene.ID)) # call the day-specific ID vector
# names(Mod_integer)=IDvector.d7 # rename
Mod_integer <- as.integer(GO_unique.genes.all %in% (Modgenes$Gene.ID)) # w/o day-specific ID vector
names(Mod_integer)=GO_unique.genes.all # rename
#pwf       <- nullp(Mod_integer,    id=IDvector.d7, bias.data=length_vector.d7) # make figure margins large enough for this to run...
pwf       <- nullp(Mod_integer,    id=GO_unique.genes.all, bias.data=length_vector) # make figure margins large enough for this to run...
goseq     <- goseq(pwf, gene2cat=GO.terms, test.cats=c("GO:CC", "GO:BP", "GO:MF"), method="Wallenius", use_genes_without_cat=TRUE)
GO.05.a         <- goseq$category[goseq$over_represented_pvalue<.05] # change twice here
GO.05           <- data.frame(GO.05.a)
colnames(GO.05) <- c("category")
GO.05           <- merge(GO.05, goseq, by="category") # change here
GO.05           <- GO.05[order(GO.05$ontology, GO.05$over_represented_pvalue,-GO.05$numDEInCat),]
GO.05$term      <- as.factor(GO.05$term)
GO.05$moduleColor <- WGCNA_ColorList[i,1]
GO.05$Day       <- "Day7"
# remove Biological Process GO terms with < 10 genes in the module  (with that term) and ommit Molecular Function terms with < 3 genes in the module (with that term)
GO.05_filtered <- GO.05 %>% filter(!(numDEInCat<10 & ontology == "BP"), !(numDEInCat<2 & ontology == "MF"))
write.csv(GO.05_filtered, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day7/GO.05",WGCNA_ColorList[i,1], "Module.csv", sep ='')) # save csv file
print(paste(WGCNA_ColorList[i,2], WGCNA_ColorList[i,1], "done", sep = ' '))
} else if (WGCNA_ColorList[i,2] == "Day14") {
Mod <- d14_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% WGCNA_ColorList[i,1]) # call the WGCNA Day - essential here!
Modgenes <- Mod[1]
names(Modgenes)[1] <- "Gene.ID" # 162 genws in the green module
# Mod_integer <- as.integer(IDvector.d14 %in% (Modgenes$Gene.ID)) # call the day-specific ID vector
# names(Mod_integer)=IDvector.d14 # rename
Mod_integer <- as.integer(GO_unique.genes.all %in% (Modgenes$Gene.ID)) # w/o day-specific ID vector
names(Mod_integer)=GO_unique.genes.all # rename
#pwf       <- nullp(Mod_integer,    id=IDvector.d14, bias.data=length_vector.d14) # make figure margins large enough for this to run...
pwf       <- nullp(Mod_integer,    id=GO_unique.genes.all, bias.data=length_vector) # make figure margins large enough for this to run...
goseq     <- goseq(pwf, gene2cat=GO.terms, test.cats=c("GO:CC", "GO:BP", "GO:MF"), method="Wallenius", use_genes_without_cat=TRUE)
GO.05.a         <- goseq$category[goseq$over_represented_pvalue<.05] # change twice here
GO.05           <- data.frame(GO.05.a)
colnames(GO.05) <- c("category")
GO.05           <- merge(GO.05, goseq, by="category") # change here
GO.05           <- GO.05[order(GO.05$ontology, GO.05$over_represented_pvalue,-GO.05$numDEInCat),]
GO.05$term      <- as.factor(GO.05$term)
GO.05$moduleColor <- WGCNA_ColorList[i,1]
GO.05$Day       <- "Day14"
# remove Biological Process GO terms with < 10 genes in the module  (with that term) and ommit Molecular Function terms with < 3 genes in the module (with that term)
GO.05_filtered <- GO.05 %>% filter(!(numDEInCat<10 & ontology == "BP"), !(numDEInCat<2 & ontology == "MF"))
write.csv(GO.05_filtered, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day14/GO.05",WGCNA_ColorList[i,1], "Module.csv", sep ='')) # save csv file
print(paste(WGCNA_ColorList[i,2], WGCNA_ColorList[i,1], "done", sep = ' '))
} else {
Mod <- d21_Annot_ModuleMembership %>% dplyr::filter(moduleColor %in% WGCNA_ColorList[i,1]) # call the WGCNA Day - essential here!
Modgenes <- Mod[1]
names(Modgenes)[1] <- "Gene.ID" # 162 genws in the green module
# Mod_integer <- as.integer(IDvector.d21 %in% (Modgenes$Gene.ID)) # call the day-specific ID vector
# names(Mod_integer)=IDvector.d21 # rename
Mod_integer <- as.integer(GO_unique.genes.all %in% (Modgenes$Gene.ID)) # w/o day-specific ID vector
names(Mod_integer)=GO_unique.genes.all # rename
#pwf       <- nullp(Mod_integer,    id=IDvector.d21, bias.data=length_vector.d21) # make figure margins large enough for this to run...
pwf       <- nullp(Mod_integer, id=GO_unique.genes.all, bias.data=length_vector) # make figure margins large enough for this to run...
goseq     <- goseq(pwf, gene2cat=GO.terms, test.cats=c("GO:CC", "GO:BP", "GO:MF"), method="Wallenius", use_genes_without_cat=TRUE)
GO.05.a         <- goseq$category[goseq$over_represented_pvalue<.05] # change twice here
GO.05           <- data.frame(GO.05.a)
colnames(GO.05) <- c("category")
GO.05           <- merge(GO.05, goseq, by="category") # change here
GO.05           <- GO.05[order(GO.05$ontology, GO.05$over_represented_pvalue,-GO.05$numDEInCat),]
GO.05$term      <- as.factor(GO.05$term)
GO.05$moduleColor <- WGCNA_ColorList[i,1]
GO.05$Day       <- "Day21"
# remove Biological Process GO terms with < 10 genes in the module  (with that term) and ommit Molecular Function terms with < 3 genes in the module (with that term)
GO.05_filtered <- GO.05 %>% filter(!(numDEInCat<10 & ontology == "BP"), !(numDEInCat<2 & ontology == "MF"))
write.csv(GO.05_filtered, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day21/GO.05",WGCNA_ColorList[i,1], "Module.csv", sep ='')) # save csv file
print(paste(WGCNA_ColorList[i,2], WGCNA_ColorList[i,1], "done", sep = ' '))
} #of if statement
} # end of for loop
#===================================================================================================
#
#
#  GOslim analysis
# - data reduction from the many GO terms to more broad functions/processes
#
#
#===================================================================================================
# load the output from the previous for loop
d7_GO.05turquoiseModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day7/GO.05turquoiseModule.csv")
d7_GO.05blueModule         <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day7/GO.05blueModule.csv")
d7_GO.05greenyellowModule  <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day7/GO.05greenyellowModule.csv")
d14_GO.05pinkModule    <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day14/GO.05pinkModule.csv")
d21_GO.05blueModule        <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day21/GO.05blueModule.csv")
d21_GO.05magentaModule     <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day21/GO.05magentaModule.csv")
d21_GO.05pinkModule        <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day21/GO.05pinkModule.csv")
d21_GO.05yellowModule      <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day21/GO.05yellowModule.csv")
# View(d21_GO.05yellowModule)
Geoduck_annotation <- read.delim2(file="C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/Seq_details/Panopea-generosa-genes-annotations.txt", header=F)
# build annotation file to merge with the mean LFC tables
Pgen_condenced <- Geoduck_annotation[,c(1,7)] # load just the PGEN ID and the putative gene terms
Pgen_condenced$Gene_term    <- sub(" \\(EC.*", "", Pgen_condenced$V7)  # str_extract(annot.condenced$V7, "[^(]+")
Pgen_reference <- na.omit(Pgen_condenced[c(1,3)])
names(Pgen_reference)  <- c('PgenIDs', 'Gene_terms')
# Master ALL WGCNA significant modules with treatment
Master_goseq_results      <- rbind(d7_GO.05turquoiseModule, d7_GO.05blueModule, d7_GO.05greenyellowModule,
d14_GO.05pinkModule,
d21_GO.05blueModule, d21_GO.05magentaModule, d21_GO.05pinkModule, d21_GO.05yellowModule)
# call all the module colors and days to loop GOslim analysis
GOslimLoop_vars <- unique(Master_goseq_results[c(9,10)])
GOslimLoop_vars
r
for (i in 1:nrow(GOslimLoop_vars)) {
# call the target dataset
goseq_res       <- Master_goseq_results %>%  dplyr::filter(Day %in% GOslimLoop_vars[i,2], moduleColor %in% GOslimLoop_vars[i,1])
WGCNA_res       <- WGCNA_MasterModData  %>%  dplyr::filter(Day %in% GOslimLoop_vars[i,2], moduleColor %in% GOslimLoop_vars[i,1])
gene_names      <- WGCNA_res$geneSymbol # all gene IDs in the particular WGCNA module
# Biological Function - run GOslim
goseq_res_BP        <- goseq_res %>%  filter(ontology=="BP") # BP - all GO terms upregulated
BP_GOcollection     <- GOCollection(goseq_res_BP$category)
GOslims_BP          <- data.frame(goSlim(BP_GOcollection, slim, "BP")) #Find common parent terms to slim down our list
GOslims_BP$category <- row.names(GOslims_BP) #save rownames as category
# Molecular Function - run GOslim
goseq_res_MF        <- goseq_res %>%  filter(ontology=="MF") # BP - all GO terms upregulated
MF_GOcollection     <- GOCollection(goseq_res_MF$category)
GOslims_MF          <- data.frame(goSlim(MF_GOcollection, slim, "MF")) #Find common parent terms to slim down our list
GOslims_MF$category <- row.names(GOslims_MF) #save rownames as category
# ====================================================================================
# Get mapped terms - add to the GOslims datatable
# from Sam White's Biostars [post](https://support.bioconductor.org/p/128407/#128409).
# ====================================================================================
# Write function mappedIds to get the query terms that mapped to the slim categories
# ...in other words, add a column to your slim dataframe with all the GO terms from goseq
mappedIds <-  function(df, collection, OFFSPRING) {  #the command to run requires a dataframe of slim terms, like slims_MF above, your list of query terms, and the offspring from the GOCollection by goSlim
map <- as.list(OFFSPRING[rownames(df)]) # Subset GOcollection offspring by the rownames of your dataframe
mapped <- lapply(map, intersect, ids(collection)) #Find the terms that intersect between the subset made above of your query terms and the GOids from the GO collection
df[["go_terms"]] <- vapply(unname(mapped), paste, collapse = ";", character(1L)) #Add column "go_terms" with matching terms
df #show resulting dataframe
}
BPslim_Mapped <- mappedIds(GOslims_BP, BP_GOcollection, GOBPOFFSPRING)
MFslim_Mapped <- mappedIds(GOslims_MF, MF_GOcollection, GOMFOFFSPRING)
# BIOLOGICAL PROCESS
BPslim             <- filter(BPslim_Mapped, Term!="biological_process") #filter out empty slims and term "biological process" and slims with < 2 GO terms (omitted the Count>=2)
BPsplitted         <- strsplit(as.character(BPslim$go_terms), ";") #split into multiple GO ids
BPslim$BPsplitted  <- BPsplitted
for (n in 1:nrow(BPslim)) {
table       <- data.frame(GOlist = unlist(BPslim[n,6])) # call the BPsplitted column of characters and create a small table to filter
table       <- unique(table)
Pgen_module  <- Pgen_GOterms2 %>% dplyr::filter(gene.ID %in% gene_names) # d7_Mod.Brown$X calls the gene names in the origin Module membership dataframe at the start of this script
Pgen_loop    <- Pgen_module %>% dplyr::filter(Go.terms %in% table$GOlist) # filter Gene IDs with the GO term
Pgen_geneIDs <- Pgen_loop[-2] # ommit the GO.terms to call unique gene calls
Pgen_geneIDs <- unique(Pgen_geneIDs) # call unique Gene calls (unique genes that had the GO term within each of the GOslim bins)
BPslim$Gene.Count[n] <- nrow(Pgen_geneIDs)  # count of unique GeneIDs in each GOslim bin
BPslim$Gene.IDs[[n]] <- vapply((Pgen_geneIDs$gene.ID), paste, collapse = ";", character(1L))
} # end n in 1:nrow
BPslim_A <- data.frame(Term = rep.int(BPslim$Term, sapply(BPsplitted, length)), go_term = unlist(BPsplitted)) #list all
BPslim_B <- merge(BPslim_A, BPslim, by="Term") #Add back counts, term, and category info
BPslim_C <- unique(setDT(BPslim_B)[order(go_term, -Gene.Count)], by = "category") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
BPslim_final <- BPslim_C[,c(1,5,3,2,6,8:9)]
colnames(BPslim_final) <- c("slim_term", "slim_cat", "GO_count", "GO_terms", "GO_list", "Gene_count", "Gene_IDs")
BPslim_final[["Gene_IDs"]] <- vapply(unname(BPslim_final$Gene_IDs), paste, collapse = ";", character(1L)) # convert from a list to simply a charaacter string with ; delimiter
#BPslim_final <- data.frame(slim_term=BPslim_C$Term, slim_cat=BPslim_C$category, category=BPslim_C$go_term, Gene.Count=BPslim_C$Gene.Count, GO.Count=BPslim_C$Count, Gene.IDs=BPslim_C$Gene.IDs) #rename columns) #rename columns
BPslim_final$module_day <- paste(GOslimLoop_vars[i,2], GOslimLoop_vars[i,1], sep = '_')
if (nrow(goseq_res_BP) >0) {
BPslim_GOterm_summary       <- BPslim_final[,c(1,2,5,7)]
s <- strsplit(BPslim_GOterm_summary$GO_list, split = ";")
BPslim_GOterm_summary_2     <- data.frame(slim_term = rep(BPslim_GOterm_summary$slim_term, sapply(s, length)),
Gene_IDs  = rep(BPslim_GOterm_summary$Gene_IDs, sapply(s, length)),
GO_terms = unlist(s))
colnames(goseq_res_BP)[2]   <- 'GO_terms'
BPslim_GOterm_summary_final <- merge(goseq_res_BP, BPslim_GOterm_summary_2, by = 'GO_terms')
s_2 <- strsplit(BPslim_GOterm_summary_final$Gene_IDs, split = ";")
BPslim_GOterm_gene_annotation <- data.frame(slim_term      = rep(BPslim_GOterm_summary_final$slim_term, sapply(s_2, length)),
over_represented_pvalue = rep(BPslim_GOterm_summary_final$over_represented_pvalue, sapply(s_2, length)),
GO_terms       = rep(BPslim_GOterm_summary_final$GO_terms, sapply(s_2, length)),
term           = rep(BPslim_GOterm_summary_final$term, sapply(s_2, length)),
ontology       = rep(BPslim_GOterm_summary_final$ontology, sapply(s_2, length)),
moduleColor    = rep(BPslim_GOterm_summary_final$moduleColor, sapply(s_2, length)),
PgenIDs        = unlist(s_2))
BP_master_gene_reference <- merge(BPslim_GOterm_gene_annotation, Pgen_reference, by = "PgenIDs")
} else (c(BPslim_GOterm_summary_final = NULL, BP_master_gene_reference = NULL))
# MOLECULAR FUNCTION
MFslim             <- filter(MFslim_Mapped, Term!="molecular_function") #filter out empty slims and term "biological process" (omitted the Count>=2)
MFsplitted         <- strsplit(as.character(MFslim$go_terms), ";") #split into multiple GO ids
MFslim$MFsplitted  <- MFsplitted
for (m in 1:nrow(MFslim)) {
table       <- data.frame(GOlist = unlist(MFslim[m,6])) # call the MFsplitted column of characters and create a small table to filter
table       <- unique(table)
Pgen_module  <- Pgen_GOterms2 %>% dplyr::filter(gene.ID %in% gene_names) # d7_Mod.Brown$X calls the gene names in the origin Module membership dataframe at the start of this script
Pgen_loop    <- Pgen_module %>% dplyr::filter(Go.terms %in% table$GOlist) # filter Gene IDs with the GO term
Pgen_geneIDs <- Pgen_loop[-2] # ommit the GO.terms to call unique gene calls
Pgen_geneIDs <- unique(Pgen_geneIDs) # call unique Gene calls (unique genes that had the GO term within each of the GOslim bins)
MFslim$Gene.Count[m] <- nrow(Pgen_geneIDs)  # count of unique GeneIDs in each GOslim bin
MFslim$Gene.IDs[[m]] <- vapply((Pgen_geneIDs$gene.ID), paste, collapse = ";", character(1L))
} # end m in 1:nrow
MFslim_A <- data.frame(Term = rep.int(MFslim$Term, sapply(MFsplitted, length)), go_term = unlist(MFsplitted)) #list all
MFslim_B <- merge(MFslim_A, MFslim, by="Term") #Add back counts, term, and category info
MFslim_C <- unique(setDT(MFslim_B)[order(go_term, -Gene.Count)], by = "category") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
MFslim_final <- MFslim_C[,c(1,5,3,2,6,8:9)]
colnames(MFslim_final) <- c("slim_term", "slim_cat", "GO_count", "GO_terms", "GO_list", "Gene_count", "Gene_IDs")
MFslim_final[["Gene_IDs"]] <- vapply(unname(MFslim_final$Gene_IDs), paste, collapse = ";", character(1L)) # convert from a list to simply a charaacter string with ; delimiter
# MFslim_final <- data.frame(slim_term=MFslim_C$Term, slim_cat=MFslim_C$category, category=MFslim_C$go_term, Gene.Count=MFslim_C$Gene.Count, GO.Count=MFslim_C$Count) #rename columns) #rename columns
MFslim_final$module_day <- paste(GOslimLoop_vars[i,2], GOslimLoop_vars[i,1], sep = '_')
if (nrow(goseq_res_MF) >0) {
MFslim_GOterm_summary       <- MFslim_final[,c(1,2,5,7)]
s <- strsplit(MFslim_GOterm_summary$GO_list, split = ";")
MFslim_GOterm_summary_2     <- data.frame(slim_term = rep(MFslim_GOterm_summary$slim_term, sapply(s, length)),
Gene_IDs  = rep(MFslim_GOterm_summary$Gene_IDs, sapply(s, length)),
GO_terms = unlist(s))
colnames(goseq_res_MF)[2]   <- 'GO_terms'
MFslim_GOterm_summary_final <- merge(goseq_res_MF, MFslim_GOterm_summary_2, by = 'GO_terms')
s_2 <- strsplit(MFslim_GOterm_summary_final$Gene_IDs, split = ";")
MFslim_GOterm_gene_annotation <- data.frame(slim_term      = rep(MFslim_GOterm_summary_final$slim_term, sapply(s_2, length)),
over_represented_pvalue = rep(MFslim_GOterm_summary_final$over_represented_pvalue, sapply(s_2, length)),
GO_terms       = rep(MFslim_GOterm_summary_final$GO_terms, sapply(s_2, length)),
term           = rep(MFslim_GOterm_summary_final$term, sapply(s_2, length)),
ontology       = rep(MFslim_GOterm_summary_final$ontology, sapply(s_2, length)),
moduleColor    = rep(MFslim_GOterm_summary_final$moduleColor, sapply(s_2, length)),
PgenIDs        = unlist(s_2))
MF_master_gene_reference <- merge(MFslim_GOterm_gene_annotation, Pgen_reference, by = "PgenIDs")
} else (c(MFslim_GOterm_summary_final = NULL, MF_master_gene_reference = NULL))
# save GOslim final datasets for BP and MF of each  module in their respective folder(s) by Day
write.csv(MFslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/", GOslimLoop_vars[i,2], "/GOslim_MolFunction_",GOslimLoop_vars[i,1], "Module.csv", sep ='')) # save csv file
write.csv(BPslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/", GOslimLoop_vars[i,2], "/GOslim_BiolProc_",GOslimLoop_vars[i,1], "Module.csv", sep ='')) # save csv file
write.csv(MFslim_GOterm_summary_final, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/", GOslimLoop_vars[i,2], "/GOterms_and_GOslim_MolFunction_",GOslimLoop_vars[i,1], "Module.csv", sep ='')) # save csv file
write.csv(BPslim_GOterm_summary_final, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/", GOslimLoop_vars[i,2], "/GOterms_and_GOslim_BiolProc_",GOslimLoop_vars[i,1], "Module.csv", sep ='')) # save csv file
write.csv(MF_master_gene_reference, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/", GOslimLoop_vars[i,2], "/GOterms_and_GOslim_MolFunction_",GOslimLoop_vars[i,1], "Module_GENE_REFERENCE.csv", sep ='')) # save csv file
write.csv(BP_master_gene_reference, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/", GOslimLoop_vars[i,2], "/GOterms_and_GOslim_BiolProc_",GOslimLoop_vars[i,1], "Module_GENE_REFERENCE.csv", sep ='')) # save csv file
print(paste(GOslimLoop_vars[i,2], GOslimLoop_vars[i,1], "done", sep = ' '))
} # end of GOslim for loop! (i in 1:nrow)
#
#
#  Youre done! Now time to load in those final GOslim csvs and plot!!!!
#
#   PLOTTING
#
#===================================================================================================
# load the output from the previous for loop
# BIOLOGICAL PROCESS  GO  SLIMS
# View(d7_slimBP_brownModule)
d7_slimBP_turquoiseModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day7/GOterms_and_GOslim_BiolProc_turquoiseModule.csv")
d7_slimBP_blueModule        <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day7/GOterms_and_GOslim_BiolProc_blueModule.csv")
d7_slimBP_greenyellowModule <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day7/GOterms_and_GOslim_BiolProc_greenyellowModule.csv")
d14_slimBP_pinkModule    <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day14/GOterms_and_GOslim_BiolProc_pinkModule.csv")
d14_slimBP_pinkModule       <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day14/GOterms_and_GOslim_BiolProc_pinkModule.csv")
d21_slimBP_blueModule       <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOterms_and_GOslim_BiolProc_blueModule.csv")
d21_slimBP_magentaModule    <- read.csv("Analysis/Output/GO/WGCNA_goseq/Day21/GOterms_and_GOslim_BiolProc_magentaModule.csv")
d21_slimBP_blueModule       <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day21/GOterms_and_GOslim_BiolProc_blueModule.csv")
d21_slimBP_magentaModule    <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day21/GOterms_and_GOslim_BiolProc_magentaModule.csv")
d21_slimBP_pinkModule       <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day21/GOterms_and_GOslim_BiolProc_pinkModule.csv")
d21_slimBP_yellowModule     <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day21/GOterms_and_GOslim_BiolProc_yellowModule.csv")
# MOLECULAR FUNCTION GO  SLIMS
d7_slimMF_turquoiseModule   <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day7/GOterms_and_GOslim_MolFunction_turquoiseModule.csv")
d7_slimMF_blueModule        <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day7/GOterms_and_GOslim_MolFunction_blueModule.csv")
d7_slimMF_greenyellowModule <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day7/GOterms_and_GOslim_MolFunction_greenyellowModule.csv")
d14_slimMF_pinkModule       <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day14/GOterms_and_GOslim_MolFunction_pinkModule.csv")
d21_slimMF_blueModule       <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day21/GOterms_and_GOslim_MolFunction_blueModule.csv")
d21_slimMF_magentaModule    <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day21/GOterms_and_GOslim_MolFunction_magentaModule.csv")
d21_slimMF_pinkModule       <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day21/GOterms_and_GOslim_MolFunction_pinkModule.csv")
d21_slimMF_yellowModule     <- read.csv("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/Day21/GOterms_and_GOslim_MolFunction_yellowModule.csv")
# BIND DATA TO FACET THE PLOTS    ---------------------------------------------------------- #
# (1) By sampling date 0 Day 7 14 and 21 separately
BP_D7  <- rbind(d7_slimBP_turquoiseModule, d7_slimBP_blueModule, d7_slimBP_greenyellowModule)
BP_D14 <- d14_slimBP_pinkModule
BP_D21 <- rbind(d21_slimBP_blueModule, d21_slimBP_magentaModule, d21_slimBP_pinkModule, d21_slimBP_yellowModule)
MF_D7  <- rbind(d7_slimMF_turquoiseModule, d7_slimMF_blueModule, d7_slimMF_greenyellowModule)
MF_D7  <- rbind(d7_slimMF_turquoiseModule, d7_slimMF_blueModule, d7_slimMF_greenyellowModule)
MF_D14 <- d14_slimMF_pinkModule
MF_D21 <- rbind(d21_slimMF_blueModule, d21_slimMF_magentaModule, d21_slimMF_pinkModule, d21_slimMF_yellowModule)
############################################################################################################## 3
#  WCNA Day 7
BP_D7$Day_moduleColor <- paste(BP_D7$Day, BP_D7$moduleColor, sep = '_')
BP_D7$Day_moduleColor <- factor(BP_D7$Day_moduleColor, levels = c("Day7_brown", "Day7_yellow", "Day7_green"))
BP_D7_Plot <-ggplot(data = BP_D7, aes(x = Day_moduleColor, y = forcats::fct_rev(term))) +
geom_tile(aes(fill= -log10(over_represented_pvalue), width = 1)) +
scale_fill_gradient(low = "skyblue", high = "navyblue",limits=c(0, (ceiling(max(-log10(BP_D7$over_represented_pvalue))))), breaks=seq(0, (ceiling(max(-log10(BP_D7$over_represented_pvalue)))),by=2))  +
facet_grid(~module_day, labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 8, face = "bold"),
strip.text.x = element_text(size = 8, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=8),
axis.text = element_text(size = 8), legend.position = "right",
plot.margin = unit(c(0,1,0,0.25), "cm"))+
ggtitle('Biological Process: Day 7 WGCNA') +
# facet_wrap(~ (substr(slim_term, 1,30)))
facet_wrap((substr(slim_term, 1,30)) ~., scales="free_y", ncol= 1, strip.position="right")
BP_D7_Plot
BP_D7$Day_moduleColor
BP_D7
# BIND DATA TO FACET THE PLOTS    ---------------------------------------------------------- #
# (1) By sampling date 0 Day 7 14 and 21 separately
BP_D7  <- rbind(d7_slimBP_turquoiseModule, d7_slimBP_blueModule, d7_slimBP_greenyellowModule)
BP_D7
BP_D7$Day
BP_D7$moduleColor
############################################################################################################## 3
#  WCNA Day 7
BP_D7$Day_moduleColor <- paste(BP_D7$Day, BP_D7$moduleColor, sep = '_')
BP_D7$Day_moduleColor
BP_D7$Day_moduleColor <- factor(BP_D7$Day_moduleColor, levels = c("Day7_turquoise", "Day7_blue", "Day7_greenyellow"))
BP_D7_Plot <-ggplot(data = BP_D7, aes(x = Day_moduleColor, y = forcats::fct_rev(term))) +
geom_tile(aes(fill= -log10(over_represented_pvalue), width = 1)) +
scale_fill_gradient(low = "skyblue", high = "navyblue",limits=c(0, (ceiling(max(-log10(BP_D7$over_represented_pvalue))))), breaks=seq(0, (ceiling(max(-log10(BP_D7$over_represented_pvalue)))),by=2))  +
facet_grid(~module_day, labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 8, face = "bold"),
strip.text.x = element_text(size = 8, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=8),
axis.text = element_text(size = 8), legend.position = "right",
plot.margin = unit(c(0,1,0,0.25), "cm"))+
ggtitle('Biological Process: Day 7 WGCNA') +
# facet_wrap(~ (substr(slim_term, 1,30)))
facet_wrap((substr(slim_term, 1,30)) ~., scales="free_y", ncol= 1, strip.position="right")
BP_D7_Plot
MF_D7$Day_moduleColor <- paste(MF_D7$Day, MF_D7$moduleColor, sep = '_')
MF_D7$Day_moduleColor <- factor(MF_D7$Day_moduleColor, levels = c("Day7_turquoise", "Day7_blue", "Day7_greenyellow"))
MF_D7_Plot <-ggplot(data = MF_D7, aes(x = Day_moduleColor, y = forcats::fct_rev(term))) +
geom_tile(aes(fill= -log10(over_represented_pvalue), width = 1)) +
scale_fill_gradient(low = "skyblue", high = "navyblue",limits=c(0, (ceiling(max(-log10(MF_D7$over_represented_pvalue))))), breaks=seq(0, (ceiling(max(-log10(MF_D7$over_represented_pvalue)))),by=2))  +
facet_grid(~module_day, labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 8, face = "bold"),
strip.text.x = element_text(size = 8, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=8),
axis.text = element_text(size = 8), legend.position = "right",
plot.margin = unit(c(0,1,0,0.25), "cm"))+
ggtitle('Molecular Function: Primary Moderate Effect Day 7') +
# facet_wrap(~ (substr(slim_term, 1,30)))
facet_wrap((substr(slim_term, 1,30)) ~., scales="free_y", ncol= 1, strip.position="right")
MF_D7_Plot
pdf(paste("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/GOterm_enrichment_plots/Mol_Function_Day7_heatmap.pdf", sep =''), width=28, height=45)
print(MF_D7_Plot)
dev.off()
pdf(paste("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/GOterm_enrichment_plots/Biol_Process_Day7_heatmap.pdf", sep =''), width=15, height=25)
print(BP_D7_Plot)
dev.off()
############################################################################################################## 3
#  WCNA Day 14
BP_D14$Day_moduleColor <- paste(BP_D14$Day, BP_D14$moduleColor, sep = '_')
BP_D14$Day_moduleColor <- factor(BP_D14$Day_moduleColor, levels = c("Day14_pink"))
BP_D14_Plot <-ggplot(data = BP_D14, aes(x = Day_moduleColor, y = forcats::fct_rev(term))) +
geom_tile(aes(fill= -log10(over_represented_pvalue), width = 1)) +
scale_fill_gradient(low = "skyblue", high = "navyblue",limits=c(0, (ceiling(max(-log10(BP_D14$over_represented_pvalue))))), breaks=seq(0, (ceiling(max(-log10(BP_D14$over_represented_pvalue)))),by=2))  +
facet_grid(~module_day, labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 8, face = "bold"),
strip.text.x = element_text(size = 8, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=8),
axis.text = element_text(size = 8), legend.position = "right",
plot.margin = unit(c(0,1,0,0.25), "cm"))+
ggtitle('Biological Process: Day 14 WGCNA') +
# facet_wrap(~ (substr(slim_term, 1,30)))
facet_wrap((substr(slim_term, 1,30)) ~., scales="free_y", ncol= 1, strip.position="right")
BP_D14_Plot
pdf(paste("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/GOterm_enrichment_plots/Biol_Process_Day14_heatmap.pdf", sep =''), width=15, height=25)
print(BP_D14_Plot)
dev.off()
MF_D14$Day_moduleColor <- paste(MF_D14$Day, MF_D14$moduleColor, sep = '_')
MF_D14$Day_moduleColor <- factor(MF_D14$Day_moduleColor, levels = c("Day14_pink"))
MF_D14_Plot <-ggplot(data = MF_D14, aes(x = Day_moduleColor, y = forcats::fct_rev(term))) +
geom_tile(aes(fill= -log10(over_represented_pvalue), width = 1)) +
scale_fill_gradient(low = "skyblue", high = "navyblue",limits=c(0, (ceiling(max(-log10(MF_D14$over_represented_pvalue))))), breaks=seq(0, (ceiling(max(-log10(MF_D14$over_represented_pvalue)))),by=2))  +
facet_grid(~module_day, labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 8, face = "bold"),
strip.text.x = element_text(size = 8, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=8),
axis.text = element_text(size = 8), legend.position = "right",
plot.margin = unit(c(0,1,0,0.25), "cm"))+
ggtitle('Molecular Function: Primary Moderate Effect Day 14') +
# facet_wrap(~ (substr(slim_term, 1,30)))
facet_wrap((substr(slim_term, 1,30)) ~., scales="free_y", ncol= 1, strip.position="right")
pdf(paste("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/GOterm_enrichment_plots/Mol_Function_Day14_heatmap.pdf", sep =''), width=28, height=45)
print(MF_D14_Plot)
dev.off()
############################################################################################################## 3
#  WCNA Day 21
BP_D21$Day_moduleColor <- paste(BP_D21$Day, BP_D21$moduleColor, sep = '_')
BP_D21$Day_moduleColor
############################################################################################################## 3
#  WCNA Day 21
BP_D21$Day_moduleColor <- paste(BP_D21$Day, BP_D21$moduleColor, sep = '_')
BP_D21$Day_moduleColor <- factor(BP_D21$Day_moduleColor, levels = c("Day21_blue", "Day21_magenta", "Day21_yellow", "Day21_pink"))
BP_D21_Plot <-ggplot(data = BP_D21, aes(x = Day_moduleColor, y = forcats::fct_rev(term))) +
geom_tile(aes(fill= -log10(over_represented_pvalue), width = 1)) +
scale_fill_gradient(low = "skyblue", high = "navyblue",limits=c(0, (ceiling(max(-log10(BP_D21$over_represented_pvalue))))), breaks=seq(0, (ceiling(max(-log10(BP_D21$over_represented_pvalue)))),by=2))  +
facet_grid(~module_day, labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 8, face = "bold"),
strip.text.x = element_text(size = 8, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=8),
axis.text = element_text(size = 8), legend.position = "right",
plot.margin = unit(c(0,1,0,0.25), "cm"))+
ggtitle('Biological Process: Day 21 WGCNA') +
# facet_wrap(~ (substr(slim_term, 1,30)))
facet_wrap((substr(slim_term, 1,30)) ~., scales="free_y", ncol= 1, strip.position="right")
pdf(paste("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/GOterm_enrichment_plots/Biol_Process_Day21_heatmap.pdf", sep =''), width=15, height=25)
print(BP_D21_Plot)
dev.off()
BP_D21_Plot
############################################################################################################## 3
#  WCNA Day 21
BP_D21$Day_moduleColor <- paste(BP_D21$Day, BP_D21$moduleColor, sep = '_')
BP_D21$Day_moduleColor
BP_D21$Day_moduleColor <- factor(BP_D21$Day_moduleColor, levels = c("Day21_blue", "Day21_magenta", "Day21_yellow", "Day21_pink"))
BP_D21
BP_D21_Plot <-ggplot(data = BP_D21, aes(x = Day_moduleColor, y = forcats::fct_rev(term))) +
geom_tile(aes(fill= -log10(over_represented_pvalue), width = 1)) +
scale_fill_gradient(low = "skyblue", high = "navyblue",limits=c(0, (ceiling(max(-log10(BP_D21$over_represented_pvalue))))), breaks=seq(0, (ceiling(max(-log10(BP_D21$over_represented_pvalue)))),by=2))  +
facet_grid(~module_day, labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 8, face = "bold"),
strip.text.x = element_text(size = 8, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=8),
axis.text = element_text(size = 8), legend.position = "right",
plot.margin = unit(c(0,1,0,0.25), "cm"))+
ggtitle('Biological Process: Day 21 WGCNA') +
# facet_wrap(~ (substr(slim_term, 1,30)))
facet_wrap((substr(slim_term, 1,30)) ~., scales="free_y", ncol= 1, strip.position="right")
BP_D21_Plot
MF_D21$Day_moduleColor <- paste(MF_D21$Day, MF_D21$moduleColor, sep = '_')
MF_D21$Day_moduleColor <- factor(MF_D21$Day_moduleColor, levels = c("Day21_blue", "Day21_magenta", "Day21_yellow", "Day21_pink"))
MF_D21_Plot <-ggplot(data = MF_D21, aes(x = Day_moduleColor, y = forcats::fct_rev(term))) +
geom_tile(aes(fill= -log10(over_represented_pvalue), width = 1)) +
scale_fill_gradient(low = "skyblue", high = "navyblue",limits=c(0, (ceiling(max(-log10(MF_D21$over_represented_pvalue))))), breaks=seq(0, (ceiling(max(-log10(MF_D21$over_represented_pvalue)))),by=2))  +
facet_grid(~module_day, labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 8, face = "bold"),
strip.text.x = element_text(size = 8, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=8),
axis.text = element_text(size = 8), legend.position = "right",
plot.margin = unit(c(0,1,0,0.25), "cm"))+
ggtitle('Molecular Function: Primary Moderate Effect Day 21') +
# facet_wrap(~ (substr(slim_term, 1,30)))
facet_wrap((substr(slim_term, 1,30)) ~., scales="free_y", ncol= 1, strip.position="right")
MF_D21_Plot
############################################################################################################## 3
#  WCNA Day 21
BP_D21$Day_moduleColor <- paste(BP_D21$Day, BP_D21$moduleColor, sep = '_')
BP_D21$Day_moduleColor <- factor(BP_D21$Day_moduleColor, levels = c("Day21_blue", "Day21_magenta", "Day21_yellow", "Day21_pink"))
BP_D21_Plot <-ggplot(data = BP_D21, aes(x = Day_moduleColor, y = forcats::fct_rev(term))) +
geom_tile(aes(fill= -log10(over_represented_pvalue), width = 1)) +
scale_fill_gradient(low = "skyblue", high = "navyblue",limits=c(0, (ceiling(max(-log10(BP_D21$over_represented_pvalue))))), breaks=seq(0, (ceiling(max(-log10(BP_D21$over_represented_pvalue)))),by=2))  +
facet_grid(~module_day, labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 8, face = "bold"),
strip.text.x = element_text(size = 8, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=8),
axis.text = element_text(size = 8), legend.position = "right",
plot.margin = unit(c(0,1,0,0.25), "cm"))+
ggtitle('Biological Process: Day 21 WGCNA') +
# facet_wrap(~ (substr(slim_term, 1,30)))
facet_wrap((substr(slim_term, 1,30)) ~., scales="free_y", ncol= 1, strip.position="right")
pdf(paste("Analysis/Output/GO/WGCNA_goseq/subseq_hypercapnia/GOterm_enrichment_plots/Mol_Function_Day21_heatmap.pdf", sep =''), width=15, height=40)
print(MF_D21_Plot)
dev.off()
