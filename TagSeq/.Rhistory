MFslim             <- filter(MFslim_Mapped, Term!="molecular_function") #filter out empty slims and term "biological process" (omitted the Count>=2)
MFsplitted         <- strsplit(as.character(MFslim$go_terms), ";") #split into multiple GO ids
MFslim$MFsplitted  <- MFsplitted
for (m in 1:nrow(MFslim)) {
table       <- data.frame(GOlist = unlist(MFslim[m,6])) # call the MFsplitted column of characters and create a small table to filter
table       <- unique(table)
Pgen_module  <- Pgen_GOterms2 %>% dplyr::filter(gene.ID %in% gene_names) # d7_Mod.Brown$X calls the gene names in the origin Module membership dataframe at the start of this script
Pgen_loop    <- Pgen_module %>% dplyr::filter(Go.terms %in% table$GOlist) # filter Gene IDs with the GO term
Pgen_geneIDs <- Pgen_loop[-2] # ommit the GO.terms to call unique gene calls
Pgen_geneIDs <- unique(Pgen_geneIDs) # call unique Gene calls (unique genes that had the GO term within each of the GOslim bins)
MFslim$Gene.Count[m] <- nrow(Pgen_geneIDs)  # count of unique GeneIDs in each GOslim bin
MFslim$Gene.IDs[[m]] <- vapply((Pgen_geneIDs$gene.ID), paste, collapse = ";", character(1L))
} # end m in 1:nrow
MFslim_A <- data.frame(Term = rep.int(MFslim$Term, sapply(MFsplitted, length)), go_term = unlist(MFsplitted)) #list all
MFslim_B <- merge(MFslim_A, MFslim, by="Term") #Add back counts, term, and category info
MFslim_C <- unique(setDT(MFslim_B)[order(go_term, -Gene.Count)], by = "category") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
MFslim_final <- MFslim_C[,c(1,5,3,2,6,8:9)]
colnames(MFslim_final) <- c("slim_term", "slim_cat", "GO_count", "GO_terms", "GO_list", "Gene_count", "Gene_IDs")
MFslim_final[["Gene_IDs"]] <- vapply(unname(MFslim_final$Gene_IDs), paste, collapse = ";", character(1L)) # convert from a list to simply a charaacter string with ; delimiter
MFslim_GOterm_summary       <- MFslim_final[,c(1,2,5,7)]
s <- strsplit(MFslim_GOterm_summary$GO_list, split = ";")
MFslim_GOterm_summary_2     <- data.frame(slim_term = rep(MFslim_GOterm_summary$slim_term, sapply(s, length)),
Gene_IDs  = rep(MFslim_GOterm_summary$Gene_IDs, sapply(s, length)),
GO_terms = unlist(s))
colnames(goseq_res_MF)[1]   <- 'GO_terms'
MFslim_GOterm_summary_final <- merge(goseq_res_MF, MFslim_GOterm_summary_2, by = 'GO_terms')
s_2 <- strsplit(MFslim_GOterm_summary_final$Gene_IDs, split = ";")
MFslim_GOterm_gene_annotation <- data.frame(slim_term      = rep(MFslim_GOterm_summary_final$slim_term, sapply(s_2, length)),
over_represented_pvalue = rep(MFslim_GOterm_summary_final$over_represented_pvalue, sapply(s_2, length)),
GO_terms       = rep(MFslim_GOterm_summary_final$GO_terms, sapply(s_2, length)),
term           = rep(MFslim_GOterm_summary_final$term, sapply(s_2, length)),
ontology       = rep(MFslim_GOterm_summary_final$ontology, sapply(s_2, length)),
PgenIDs        = unlist(s_2))
MF_master_gene_reference <- merge(MFslim_GOterm_gene_annotation, Pgen_reference, by = "PgenIDs")
write.csv(BPslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Frontloaded_genes/Day7_Frontload_MODERATE_TableGOslim_BiolProc.csv", sep ='')) # save csv file       write.csv(BPslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Frontloaded_genes/Day7_GOterms_and_BOslim_BiolProc.csv", sep ='')) # save csv file
write.csv(MFslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Frontloaded_genes/Day7_Frontload_MODERATE_TableGOslim_MolFunction.csv", sep ='')) # save csv file       write.csv(BPslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Frontloaded_genes/Day7_GOterms_and_BOslim_BiolProc.csv", sep ='')) # save csv file
write.csv(BP_master_gene_reference, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Frontloaded_genes/Day7_Frontload_MODERATE_GOterms_and_GOslim_BiolProc.csv", sep ='')) # save csv file       write.csv(BPslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Frontloaded_genes/Day7_GOterms_and_BOslim_BiolProc.csv", sep ='')) # save csv file
write.csv(MF_master_gene_reference, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Frontloaded_genes/Day7_Frontload_MODERATE_GOterms_and_GOslim_MolFunction.csv", sep ='')) # save csv file       write.csv(BPslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Frontloaded_genes/Day7_GOterms_and_BOslim_BiolProc.csv", sep ='')) # save csv file
d7_frontloaded_severe
d7_frontloaded_moderate[c(2,3),]
d7_frontloaded_moderate[c(2,3),]
d7_frontloaded_moderate[c(2,3),]
d7_frontloaded_moderate[c(2,3),]
d7_frontloaded_moderate[,c(2,3)]
as.data.frame(rbind(d7_frontloaded_moderate[,c(2,3)], d7_frontloaded_severe[,c(2,3)]) %>% dplyr::group_by(geneSymbol) %>%  dplyr::summarise(count = n()) %>% dplyr::filter(count == 2))
d7_frontloaded_shared <-  as.data.frame(rbind(d7_frontloaded_moderate[,c(2,3)], d7_frontloaded_severe[,c(2,3)]) %>% dplyr::group_by(geneSymbol) %>%  dplyr::summarise(count = n()) %>% dplyr::filter(count == 2))
FrontloadedDay7_shared                       <- d7_frontloaded_shared[2]
d7_frontloaded_shared[2]
FrontloadedDay7_shared                       <- d7_frontloaded_shared[1]
names(FrontloadedDay7_shared)[1]             <- "Gene.ID" # 162 genws in the green module
FrontloadsharedD7_integer                         <- as.integer(GO_unique.genes.all %in% (FrontloadedDay7_shared$Gene.ID)) # w/o day-specific ID vector
names(FrontloadsharedD7_integer)                  =  GO_unique.genes.all # rename
pwf_FrontloadsharedD7                             <- nullp(FrontloadsharedD7_integer,    id=GO_unique.genes.all, bias.data=length_vector) # make figure margins large enough for this to run...
goseq_FrontloadsharedD7                           <- goseq(pwf_FrontloadsharedD7, gene2cat=GO.terms, test.cats=c("GO:CC", "GO:BP", "GO:MF"), method="Wallenius", use_genes_without_cat=TRUE)
GO.05.a_FrontloadsharedD7                         <- goseq_FrontloadsharedD7$category[goseq_FrontloadsharedD7$over_represented_pvalue<.05] # change twice here
GO.05_FrontloadsharedD7                           <- data.frame(GO.05.a_FrontloadsharedD7 )
colnames(GO.05_FrontloadsharedD7 )                <- c("category")
GO.05_FrontloadsharedD7                           <- merge(GO.05_FrontloadsharedD7 , goseq_FrontloadsharedD7, by="category") # change here
GO.05_FrontloadsharedD7                           <- GO.05_FrontloadsharedD7[order(GO.05_FrontloadsharedD7$ontology, GO.05_FrontloadsharedD7$over_represented_pvalue,-GO.05_FrontloadsharedD7$numDEInCat),]
GO.05_FrontloadsharedD7$term                     <- as.factor(GO.05_FrontloadsharedD7$term)
GO.05_FrontloadsharedD7$Day                      <- "Day7"
# remove Biological Process GO terms with < 10 genes in the module  (with that term) and ommit Molecular Function terms with < 3 genes in the module (with that term)
GO.05_filtered_FrontloadedDay7_shared <- GO.05_FrontloadsharedD7  %>% filter(!(ontology %in% "CC"), !(numDEInCat<=2 & ontology == "BP"), !(numDEInCat<=2 & ontology == "MF"))
View(GO.05_filtered_FrontloadedDay7_shared)
# Biological Function - run GOslim
goseq_res_BP        <- GO.05_filtered_FrontloadedDay7_shared %>%  filter(ontology=="BP") # BP - all GO terms upregulated   ONLY LINE TO CHANGE!!!
BP_GOcollection     <- GOCollection(goseq_res_BP$category)
GOslims_BP          <- data.frame(goSlim(BP_GOcollection, slim, "BP")) #Find common parent terms to slim down our list
GOslims_BP$category <- row.names(GOslims_BP) #save rownames as category
# Molecular Function - run GOslim
goseq_res_MF        <- GO.05_filtered_FrontloadedDay7_shared %>%  filter(ontology=="MF") # BP - all GO terms upregulated   ONLY LINE TO CHANGE!!!
MF_GOcollection     <- GOCollection(goseq_res_MF$category)
GOslims_MF          <- data.frame(goSlim(MF_GOcollection, slim, "MF")) #Find common parent terms to slim down our list
GOslims_MF$category <- row.names(GOslims_MF) #save rownames as category
# ====================================================================================
# Get mapped terms - add to the GOslims datatable
# from Sam White's Biostars [post](https://support.bioconductor.org/p/128407/#128409).
# ====================================================================================
# Write function mappedIds to get the query terms that mapped to the slim categories
# ...in other words, add a column to your slim dataframe with all the GO terms from goseq
mappedIds <-  function(df, collection, OFFSPRING) {  #the command to run requires a dataframe of slim terms, like slims_MF above, your list of query terms, and the offspring from the GOCollection by goSlim
map <- as.list(OFFSPRING[rownames(df)]) # Subset GOcollection offspring by the rownames of your dataframe
mapped <- lapply(map, intersect, ids(collection)) #Find the terms that intersect between the subset made above of your query terms and the GOids from the GO collection
df[["go_terms"]] <- vapply(unname(mapped), paste, collapse = ";", character(1L)) #Add column "go_terms" with matching terms
df #show resulting dataframe
}
BPslim_Mapped <- mappedIds(GOslims_BP, BP_GOcollection, GOBPOFFSPRING)
MFslim_Mapped <- mappedIds(GOslims_MF, MF_GOcollection, GOMFOFFSPRING)
gene_names    <- FrontloadedDay7_moderate$Gene.ID # all gene IDs in the particular WGCNA module
# BIOLOGICAL PROCESS  :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BPslim             <- filter(BPslim_Mapped, Term!="biological_process") #filter out empty slims and term "biological process" and slims with < 2 GO terms (omitted the Count>=2)
BPsplitted         <- strsplit(as.character(BPslim$go_terms), ";") #split into multiple GO ids
BPslim$BPsplitted  <- BPsplitted
for (n in 1:nrow(BPslim)) {
table       <- data.frame(GOlist = unlist(BPslim[n,6])) # call the BPsplitted column of characters and create a small table to filter
table       <- unique(table)
Pgen_module  <- Pgen_GOterms2 %>% dplyr::filter(gene.ID %in% gene_names) # d7_Mod.Brown$X calls the gene names in the origin Module membership dataframe at the start of this script
Pgen_loop    <- Pgen_module %>% dplyr::filter(Go.terms %in% table$GOlist) # filter Gene IDs with the GO term
Pgen_geneIDs <- Pgen_loop[-2] # ommit the GO.terms to call unique gene calls
Pgen_geneIDs <- unique(Pgen_geneIDs) # call unique Gene calls (unique genes that had the GO term within each of the GOslim bins)
BPslim$Gene.Count[n] <- nrow(Pgen_geneIDs)  # count of unique GeneIDs in each GOslim bin
BPslim$Gene.IDs[[n]] <- vapply((Pgen_geneIDs$gene.ID), paste, collapse = ";", character(1L))
} # end n in 1:nrow
BPslim_A <- data.frame(Term = rep.int(BPslim$Term, sapply(BPsplitted, length)), go_term = unlist(BPsplitted)) #list all
BPslim_B <- merge(BPslim_A, BPslim, by="Term") #Add back counts, term, and category info
BPslim_C <- unique(setDT(BPslim_B)[order(go_term, -Gene.Count)], by = "category") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
BPslim_final <- BPslim_C[,c(1,5,3,2,6,8:9)]
colnames(BPslim_final) <- c("slim_term", "slim_cat", "GO_count", "GO_terms", "GO_list", "Gene_count", "Gene_IDs")
BPslim_final[["Gene_IDs"]] <- vapply(unname(BPslim_final$Gene_IDs), paste, collapse = ";", character(1L)) # convert from a list to simply a charaacter string with ; delimiter
BPslim_final
BPslim_GOterm_summary       <- BPslim_final[,c(1,2,5,7)]
s <- strsplit(BPslim_GOterm_summary$GO_list, split = ";")
BPslim_GOterm_summary_2     <- data.frame(slim_term = rep(BPslim_GOterm_summary$slim_term, sapply(s, length)),
Gene_IDs  = rep(BPslim_GOterm_summary$Gene_IDs, sapply(s, length)),
GO_terms = unlist(s))
colnames(goseq_res_BP)[1]   <- 'GO_terms'
BPslim_GOterm_summary_final <- merge(goseq_res_BP, BPslim_GOterm_summary_2, by = 'GO_terms')
s_2 <- strsplit(BPslim_GOterm_summary_final$Gene_IDs, split = ";")
BPslim_GOterm_gene_annotation <- data.frame(slim_term      = rep(BPslim_GOterm_summary_final$slim_term, sapply(s_2, length)),
over_represented_pvalue = rep(BPslim_GOterm_summary_final$over_represented_pvalue, sapply(s_2, length)),
GO_terms       = rep(BPslim_GOterm_summary_final$GO_terms, sapply(s_2, length)),
term           = rep(BPslim_GOterm_summary_final$term, sapply(s_2, length)),
ontology       = rep(BPslim_GOterm_summary_final$ontology, sapply(s_2, length)),
PgenIDs        = unlist(s_2))
BP_master_gene_reference <- merge(BPslim_GOterm_gene_annotation, Pgen_reference, by = "PgenIDs")
# MOLECULAR FUNCTION :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
MFslim             <- filter(MFslim_Mapped, Term!="molecular_function") #filter out empty slims and term "biological process" (omitted the Count>=2)
MFsplitted         <- strsplit(as.character(MFslim$go_terms), ";") #split into multiple GO ids
MFslim$MFsplitted  <- MFsplitted
for (m in 1:nrow(MFslim)) {
table       <- data.frame(GOlist = unlist(MFslim[m,6])) # call the MFsplitted column of characters and create a small table to filter
table       <- unique(table)
Pgen_module  <- Pgen_GOterms2 %>% dplyr::filter(gene.ID %in% gene_names) # d7_Mod.Brown$X calls the gene names in the origin Module membership dataframe at the start of this script
Pgen_loop    <- Pgen_module %>% dplyr::filter(Go.terms %in% table$GOlist) # filter Gene IDs with the GO term
Pgen_geneIDs <- Pgen_loop[-2] # ommit the GO.terms to call unique gene calls
Pgen_geneIDs <- unique(Pgen_geneIDs) # call unique Gene calls (unique genes that had the GO term within each of the GOslim bins)
MFslim$Gene.Count[m] <- nrow(Pgen_geneIDs)  # count of unique GeneIDs in each GOslim bin
MFslim$Gene.IDs[[m]] <- vapply((Pgen_geneIDs$gene.ID), paste, collapse = ";", character(1L))
} # end m in 1:nrow
MFslim_A <- data.frame(Term = rep.int(MFslim$Term, sapply(MFsplitted, length)), go_term = unlist(MFsplitted)) #list all
MFslim_B <- merge(MFslim_A, MFslim, by="Term") #Add back counts, term, and category info
MFslim_C <- unique(setDT(MFslim_B)[order(go_term, -Gene.Count)], by = "category") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
MFslim_final <- MFslim_C[,c(1,5,3,2,6,8:9)]
colnames(MFslim_final) <- c("slim_term", "slim_cat", "GO_count", "GO_terms", "GO_list", "Gene_count", "Gene_IDs")
MFslim_final[["Gene_IDs"]] <- vapply(unname(MFslim_final$Gene_IDs), paste, collapse = ";", character(1L)) # convert from a list to simply a charaacter string with ; delimiter
MFslim_GOterm_summary       <- MFslim_final[,c(1,2,5,7)]
s <- strsplit(MFslim_GOterm_summary$GO_list, split = ";")
MFslim_GOterm_summary_2     <- data.frame(slim_term = rep(MFslim_GOterm_summary$slim_term, sapply(s, length)),
Gene_IDs  = rep(MFslim_GOterm_summary$Gene_IDs, sapply(s, length)),
GO_terms = unlist(s))
MFslim_final
MFslim_GOterm_summary       <- MFslim_final[,c(1,2,5,7)]
s <- strsplit(MFslim_GOterm_summary$GO_list, split = ";")
MFslim_GOterm_summary_2     <- data.frame(slim_term = rep(MFslim_GOterm_summary$slim_term, sapply(s, length)),
Gene_IDs  = rep(MFslim_GOterm_summary$Gene_IDs, sapply(s, length)),
GO_terms = unlist(s))
colnames(goseq_res_MF)[1]   <- 'GO_terms'
MFslim_GOterm_summary_final <- merge(goseq_res_MF, MFslim_GOterm_summary_2, by = 'GO_terms')
s_2 <- strsplit(MFslim_GOterm_summary_final$Gene_IDs, split = ";")
MFslim_GOterm_gene_annotation <- data.frame(slim_term      = rep(MFslim_GOterm_summary_final$slim_term, sapply(s_2, length)),
over_represented_pvalue = rep(MFslim_GOterm_summary_final$over_represented_pvalue, sapply(s_2, length)),
GO_terms       = rep(MFslim_GOterm_summary_final$GO_terms, sapply(s_2, length)),
term           = rep(MFslim_GOterm_summary_final$term, sapply(s_2, length)),
ontology       = rep(MFslim_GOterm_summary_final$ontology, sapply(s_2, length)),
PgenIDs        = unlist(s_2))
MF_master_gene_reference <- merge(MFslim_GOterm_gene_annotation, Pgen_reference, by = "PgenIDs")
write.csv(BPslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Frontloaded_genes/Day7_Frontload_SHARED_TableGOslim_BiolProc.csv", sep ='')) # save csv file       write.csv(BPslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Frontloaded_genes/Day7_GOterms_and_BOslim_BiolProc.csv", sep ='')) # save csv file
write.csv(MFslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Frontloaded_genes/Day7_Frontload_SHARED_TableGOslim_MolFunction.csv", sep ='')) # save csv file       write.csv(BPslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Frontloaded_genes/Day7_GOterms_and_BOslim_BiolProc.csv", sep ='')) # save csv file
write.csv(BP_master_gene_reference, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Frontloaded_genes/Day7_Frontload_SHARED_GOterms_and_GOslim_BiolProc.csv", sep ='')) # save csv file       write.csv(BPslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Frontloaded_genes/Day7_GOterms_and_BOslim_BiolProc.csv", sep ='')) # save csv file
write.csv(MF_master_gene_reference, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Frontloaded_genes/Day7_Frontload_SHARED_GOterms_and_GOslim_MolFunction.csv", sep ='')) # save csv file       write.csv(BPslim_final, file = paste("Analysis/Output/GO/WGCNA_goseq/subseq_treatments_all/Frontloaded_genes/Day7_GOterms_and_BOslim_BiolProc.csv", sep ='')) # save csv file
length(unique(BP_master_gene_reference$PgenIDs))
length(unique(MF_master_gene_reference$PgenIDs))
# LOAD PACKAGES
library(dplyr)
library(reshape2)
library(ggplot2)
library(kableExtra)
library(knitr)
library(tidyverse)
library(DESeq2)
library(plotrix)
library(ggpubr)
# SET WORKING DIRECTORY AND LOAD DATA
setwd("C:/Users/samjg/Documents/Github_repositories/Pgenerosa_TagSeq_Metabolomics/TagSeq/")
# LOAD DATA
annot = read.delim2(file = "Seq_details/Panopea-generosa-genes-annotations.txt",header = F) # annotation file P generosa
# Treatment and Phenotype data
Master.Treatment_Phenotype.data  <- read.csv(file="Analysis/Data/Experiment_Metadata/Master_Phyenotype.and.Exp.Treatment_Metadata.csv", sep=',', header=TRUE)
Master.Treatment_Phenotype.Day7  <- Master.Treatment_Phenotype.data %>%  dplyr::filter(Date %in% 20190731) # split for day 21 data
Master.Treatment_Phenotype.Day21 <- Master.Treatment_Phenotype.data %>%  dplyr::filter(Date %in% 20190814) # split for day 21 data
# WGCNA modules
day7.ModMem   <- read.csv(file="Analysis/Output/WGCNA/subseq_treatments_all/Day7/d7.WGCNA_ModulMembership.csv", sep=',', header=TRUE)    %>%   dplyr::rename(Pgen_ID = X) %>%  mutate(Pgen_ID = as.character(Pgen_ID)) %>%  dplyr::select(c('Pgen_ID','moduleColor'))
day14.ModMem  <- read.csv(file="Analysis/Output/WGCNA/subseq_treatments_all/Day14/d14.WGCNA_ModulMembership.csv", sep=',', header=TRUE)  %>%  dplyr::rename(Pgen_ID = X) %>%  mutate(Pgen_ID = as.character(Pgen_ID)) %>%  dplyr::select(c('Pgen_ID','moduleColor'))
day21.ModMem  <- read.csv(file="Analysis/Output/WGCNA/subseq_treatments_all/Day21/d21.WGCNA_ModulMembership.csv", sep=',', header=TRUE)  %>%  dplyr::rename(Pgen_ID = X) %>%  mutate(Pgen_ID = as.character(Pgen_ID)) %>%  dplyr::select(c('Pgen_ID','moduleColor'))
day7.WGCNA.Samples    <- (read.csv(file="Analysis/Output/WGCNA/subseq_treatments_all/Day7/d7.WGCNA_ModulEigengenes.csv", sep=',', header=TRUE))[,1]
day14.WGCNA.Samples    <- (read.csv(file="Analysis/Output/WGCNA/subseq_treatments_all/Day14/d14.WGCNA_ModulEigengenes.csv", sep=',', header=TRUE))[,1]
day21.WGCNA.Samples   <- (read.csv(file="Analysis/Output/WGCNA/subseq_treatments_all/Day21/d21.WGCNA_ModulEigengenes.csv", sep=',', header=TRUE))[,1]
# expression read counts
day7.counts.matrix <- read.csv(file="Analysis/Data/filtered_counts/10cpm_50perc/day7.counts.filtered_10cpm50perc.csv", sep=',', header=TRUE)    %>% dplyr::select(c('X', day7.WGCNA.Samples))
day21.counts.matrix <- read.csv(file="Analysis/Data/filtered_counts/10cpm_50perc/day21.counts.filtered_10cpm50perc.csv", sep=',', header=TRUE)  %>% dplyr::select(c('X', day21.WGCNA.Samples))
# Day 7
Day7_exp_data <- read.csv(file="Analysis/Output/DESeq2/10cpm/Day7/ Day7.PrimaryDEGs_AvM__DESeq2results.csv", sep=',', header=TRUE) %>% dplyr::select(!c('X','baseMean','log2FoldChange','lfcSE','stat','pvalue','padj')) %>% dplyr::select(c('Gene', day7.WGCNA.Samples))
# Day 14
Day14_exp_data <- read.csv(file="Analysis/Output/DESeq2/10cpm/Day14/ Day14.Primary_DESeq2results.csv", sep=',', header=TRUE) %>% dplyr::select(!c('X','baseMean','log2FoldChange','lfcSE','stat','pvalue','padj'))  %>% dplyr::select(c('Gene', day14.WGCNA.Samples))
# Day 21
Day21_exp_data <- read.csv(file="Analysis/Output/DESeq2/10cpm/Day21/ Day21.Primary_DESeq2results.csv", sep=',', header=TRUE) %>% dplyr::select(!c('X','baseMean','log2FoldChange','lfcSE','stat','pvalue','padj'))  %>% dplyr::select(c('Gene', day21.WGCNA.Samples))
# experiment metadata (treatments)
Day7_Master.Exp.Metadata   <- read.csv(file="Analysis/Data/Experiment_Metadata/Master_Phyenotype.and.Exp.Treatment_Metadata.csv", sep=',', header=TRUE) %>%
dplyr::filter(Date %in% 20190731) %>% # call only day 7
dplyr::select(c('Sample.Name', 'All_Treatment')) %>% # select only the sample names and the treatment groups
dplyr::mutate(All_Treatment = factor(All_Treatment)) # make the treatment groups a factor
Day14_Master.Exp.Metadata   <- read.csv(file="Analysis/Data/Experiment_Metadata/Master_Phyenotype.and.Exp.Treatment_Metadata.csv", sep=',', header=TRUE) %>%
dplyr::filter(Date %in% 20190807) %>% # call only day 7
dplyr::select(c('Sample.Name', 'All_Treatment')) %>% # select only the sample names and the treatment groups
dplyr::mutate(All_Treatment = factor(All_Treatment)) # make the treatment groups a factor
Day21_Master.Exp.Metadata   <- read.csv(file="Analysis/Data/Experiment_Metadata/Master_Phyenotype.and.Exp.Treatment_Metadata.csv", sep=',', header=TRUE) %>%
dplyr::filter(Date %in% 20190814) %>% # call only day 7
dplyr::select(c('Sample.Name', 'All_Treatment')) %>% # select only the sample names and the treatment groups
dplyr::mutate(All_Treatment = factor(All_Treatment)) # make the treatment groups a factor
P.wgcna.mod
P.wgcna.mod <- Day21_READY %>%
dplyr::select(c('wgcna.xall_mod', 'wgcna.yall_mod')) %>%
na.omit() %>%
dplyr::filter(wgcna.yall_mod < 4) %>%
ggplot(aes(x=wgcna.xall_mod, y=wgcna.yall_mod)) +
geom_point() +
theme_classic() +
stat_smooth(method = "lm",
formula = y ~ x + poly(x, 2) - 1) +
geom_vline(xintercept=1, linetype="dotted") +
geom_hline(yintercept=1, linetype="dotted") +
labs(y= "Conditioned to naive control ratio",
x = "Conditioned to naive foldchange ratio",
title = "Day 21
Frontloaded genes; response to moderate pCO2") +
expand_limits(x = 0, y = 0) +
annotate("rect", xmin = 0, xmax = 1, ymin = 1, ymax = 4.5,
alpha = .2)
ggarrange(P.wgcna.mod, RxnNorm_Day7_mod,
P.mod.carryover,RxnNorm_Day21_ModerateSecondary + rremove("x.text"),
labels = c("A", "B", "C", "D"),
ncol = 2, nrow = 2)
# LOAD PACKAGES
library(dplyr)
library(reshape2)
library(ggplot2)
library(kableExtra)
library(knitr)
library(tidyverse)
library(DESeq2)
library(plotrix)
library(ggpubr)
# SET WORKING DIRECTORY AND LOAD DATA
setwd("C:/Users/samjg/Documents/Github_repositories/Pgenerosa_TagSeq_Metabolomics/TagSeq/")
# LOAD DATA
annot = read.delim2(file = "Seq_details/Panopea-generosa-genes-annotations.txt",header = F) # annotation file P generosa
# Treatment and Phenotype data
Master.Treatment_Phenotype.data  <- read.csv(file="Analysis/Data/Experiment_Metadata/Master_Phyenotype.and.Exp.Treatment_Metadata.csv", sep=',', header=TRUE)
Master.Treatment_Phenotype.Day7  <- Master.Treatment_Phenotype.data %>%  dplyr::filter(Date %in% 20190731) # split for day 21 data
Master.Treatment_Phenotype.Day21 <- Master.Treatment_Phenotype.data %>%  dplyr::filter(Date %in% 20190814) # split for day 21 data
# WGCNA modules
day7.ModMem   <- read.csv(file="Analysis/Output/WGCNA/subseq_treatments_all/Day7/d7.WGCNA_ModulMembership.csv", sep=',', header=TRUE)    %>%   dplyr::rename(Pgen_ID = X) %>%  mutate(Pgen_ID = as.character(Pgen_ID)) %>%  dplyr::select(c('Pgen_ID','moduleColor'))
day14.ModMem  <- read.csv(file="Analysis/Output/WGCNA/subseq_treatments_all/Day14/d14.WGCNA_ModulMembership.csv", sep=',', header=TRUE)  %>%  dplyr::rename(Pgen_ID = X) %>%  mutate(Pgen_ID = as.character(Pgen_ID)) %>%  dplyr::select(c('Pgen_ID','moduleColor'))
day21.ModMem  <- read.csv(file="Analysis/Output/WGCNA/subseq_treatments_all/Day21/d21.WGCNA_ModulMembership.csv", sep=',', header=TRUE)  %>%  dplyr::rename(Pgen_ID = X) %>%  mutate(Pgen_ID = as.character(Pgen_ID)) %>%  dplyr::select(c('Pgen_ID','moduleColor'))
day7.WGCNA.Samples    <- (read.csv(file="Analysis/Output/WGCNA/subseq_treatments_all/Day7/d7.WGCNA_ModulEigengenes.csv", sep=',', header=TRUE))[,1]
day14.WGCNA.Samples    <- (read.csv(file="Analysis/Output/WGCNA/subseq_treatments_all/Day14/d14.WGCNA_ModulEigengenes.csv", sep=',', header=TRUE))[,1]
day21.WGCNA.Samples   <- (read.csv(file="Analysis/Output/WGCNA/subseq_treatments_all/Day21/d21.WGCNA_ModulEigengenes.csv", sep=',', header=TRUE))[,1]
# expression read counts
day7.counts.matrix <- read.csv(file="Analysis/Data/filtered_counts/10cpm_50perc/day7.counts.filtered_10cpm50perc.csv", sep=',', header=TRUE)    %>% dplyr::select(c('X', day7.WGCNA.Samples))
day21.counts.matrix <- read.csv(file="Analysis/Data/filtered_counts/10cpm_50perc/day21.counts.filtered_10cpm50perc.csv", sep=',', header=TRUE)  %>% dplyr::select(c('X', day21.WGCNA.Samples))
# Day 7
Day7_exp_data <- read.csv(file="Analysis/Output/DESeq2/10cpm/Day7/ Day7.PrimaryDEGs_AvM__DESeq2results.csv", sep=',', header=TRUE) %>% dplyr::select(!c('X','baseMean','log2FoldChange','lfcSE','stat','pvalue','padj')) %>% dplyr::select(c('Gene', day7.WGCNA.Samples))
# Day 14
Day14_exp_data <- read.csv(file="Analysis/Output/DESeq2/10cpm/Day14/ Day14.Primary_DESeq2results.csv", sep=',', header=TRUE) %>% dplyr::select(!c('X','baseMean','log2FoldChange','lfcSE','stat','pvalue','padj'))  %>% dplyr::select(c('Gene', day14.WGCNA.Samples))
# Day 21
Day21_exp_data <- read.csv(file="Analysis/Output/DESeq2/10cpm/Day21/ Day21.Primary_DESeq2results.csv", sep=',', header=TRUE) %>% dplyr::select(!c('X','baseMean','log2FoldChange','lfcSE','stat','pvalue','padj'))  %>% dplyr::select(c('Gene', day21.WGCNA.Samples))
# experiment metadata (treatments)
Day7_Master.Exp.Metadata   <- read.csv(file="Analysis/Data/Experiment_Metadata/Master_Phyenotype.and.Exp.Treatment_Metadata.csv", sep=',', header=TRUE) %>%
dplyr::filter(Date %in% 20190731) %>% # call only day 7
dplyr::select(c('Sample.Name', 'All_Treatment')) %>% # select only the sample names and the treatment groups
dplyr::mutate(All_Treatment = factor(All_Treatment)) # make the treatment groups a factor
Day14_Master.Exp.Metadata   <- read.csv(file="Analysis/Data/Experiment_Metadata/Master_Phyenotype.and.Exp.Treatment_Metadata.csv", sep=',', header=TRUE) %>%
dplyr::filter(Date %in% 20190807) %>% # call only day 7
dplyr::select(c('Sample.Name', 'All_Treatment')) %>% # select only the sample names and the treatment groups
dplyr::mutate(All_Treatment = factor(All_Treatment)) # make the treatment groups a factor
Day21_Master.Exp.Metadata   <- read.csv(file="Analysis/Data/Experiment_Metadata/Master_Phyenotype.and.Exp.Treatment_Metadata.csv", sep=',', header=TRUE) %>%
dplyr::filter(Date %in% 20190814) %>% # call only day 7
dplyr::select(c('Sample.Name', 'All_Treatment')) %>% # select only the sample names and the treatment groups
dplyr::mutate(All_Treatment = factor(All_Treatment)) # make the treatment groups a factor
day7.brown    <- day7.ModMem %>% dplyr::filter(moduleColor %in% 'brown')     %>% dplyr::mutate(day ='Day7')
day14.brown   <- day14.ModMem %>% dplyr::filter(moduleColor %in% 'brown')    %>% dplyr::mutate(day ='Day14')
day21.blue    <- day21.ModMem %>% dplyr::filter(moduleColor %in% 'blue')     %>% dplyr::mutate(day ='Day21')
day21.magenta <- day21.ModMem %>% dplyr::filter(moduleColor %in% 'magenta')  %>% dplyr::mutate(day ='Day21')
Naive_modules <- rbind(day7.brown, day14.brown, day21.blue, day21.magenta)
day7.yellow    <- day7.ModMem %>% dplyr::filter(moduleColor %in% 'yellow')     %>% dplyr::mutate(day ='Day7')
day14.black    <- day14.ModMem %>% dplyr::filter(moduleColor %in% 'black')    %>% dplyr::mutate(day ='Day14')
day21.yellow   <- day21.ModMem %>% dplyr::filter(moduleColor %in% 'yellow')     %>% dplyr::mutate(day ='Day21')
Preexposed_modules       <- rbind(day7.yellow, day14.black, day21.yellow)
Preexposed_modules_pHexp <- rbind(day7.yellow, day21.yellow)
NaiveResponse_genes <- Naive_modules %>%
dplyr::group_by(Pgen_ID) %>%
dplyr::summarise(count = n()) %>%
dplyr::filter(count == 3)
# View(NaiveResponse_genes)
NaiveResponse_genes        = NaiveResponse_genes$Pgen_ID
NaiveResponse_genes_ANNOT  = match(NaiveResponse_genes, annot$V1)
NaiveResponse_genes_data   <- data.frame(geneSymbol = annot$V1[NaiveResponse_genes_ANNOT],
Annotation = annot$V7[NaiveResponse_genes_ANNOT])
# nrow(NaiveResponse_genes_data) # 315 genes present on all sampling days
Preexposed_genes <- Preexposed_modules %>%
dplyr::group_by(Pgen_ID) %>%
dplyr::summarise(count = n()) %>%
dplyr::filter(count == 3)
nrow(Preexposed_genes) # no persistant genes higher expressed by the preexposed animals...
# what about ONLY during the subsequent exposures to elevated pCO2???
Preexposed_genes_pHexp <- Preexposed_modules_pHexp %>%
dplyr::group_by(Pgen_ID) %>%
dplyr::summarise(count = n()) %>%
dplyr::filter(count == 2)
nrow(Preexposed_genes_pHexp) # 211 genes!!!!
# View(NaiveResponse_genes)
Preexposed_genes_pHexp        = Preexposed_genes_pHexp$Pgen_ID
Preexposed_genes_pHexp_ANNOT  = match(Preexposed_genes_pHexp, annot$V1)
Preexposed_genes_pHexp_data   <- data.frame(geneSymbol = annot$V1[Preexposed_genes_pHexp_ANNOT],
Annotation = annot$V7[Preexposed_genes_pHexp_ANNOT])
View(Preexposed_genes_pHexp_data)
Day21_WGCNA_genes <- Day21_exp_data %>%
#dplyr::filter(Gene %in% day21.blue_magenta$Pgen_ID) # call all genes in the module
dplyr::filter(Gene %in% day21.yellowa$Pgen_ID) # call all genes in the module
Day21_WGCNA_genes <- Day21_exp_data %>%
#dplyr::filter(Gene %in% day21.blue_magenta$Pgen_ID) # call all genes in the module
dplyr::filter(Gene %in% day21.yellowa$Pgen_ID) %>% # call all genes in the module
#dplyr::filter(Gene %in% NaiveResponse_genes)
Day21_WGCNA_genes_melted     <- Day21_WGCNA_genes %>%
reshape2::melt(id.var = 'Gene') %>%
dplyr::rename(Sample.Name = variable)
Day21_WGCNA_genes <- Day21_exp_data %>%
#dplyr::filter(Gene %in% day21.blue_magenta$Pgen_ID) # call all genes in the module
dplyr::filter(Gene %in% day21.yellow$Pgen_ID) %>% # call all genes in the module
#dplyr::filter(Gene %in% NaiveResponse_genes)
Day21_WGCNA_genes_melted     <- Day21_WGCNA_genes %>%
reshape2::melt(id.var = 'Gene') %>%
dplyr::rename(Sample.Name = variable)
Day21_WGCNA_genes <- Day21_exp_data %>%
#dplyr::filter(Gene %in% day21.blue_magenta$Pgen_ID) # call all genes in the module
dplyr::filter(Gene %in% day21.yellow$Pgen_ID) # call all genes in the module
#dplyr::filter(Gene %in% NaiveResponse_genes)
Day21_WGCNA_genes_melted     <- Day21_WGCNA_genes %>%
reshape2::melt(id.var = 'Gene') %>%
dplyr::rename(Sample.Name = variable)
Day21_WGCNA_genes_Merge <- merge(Day21_WGCNA_genes_melted, Day21_Master.Exp.Metadata, by = 'Sample.Name') %>%
dplyr::group_by(Gene, All_Treatment) %>%
dplyr::select(!'Sample.Name') %>%
dplyr::summarise(meanExp = mean(value))
Day21_READY <- dcast(Day21_WGCNA_genes_Merge, Gene ~ All_Treatment)
Day21_READY
Day21_READY <- dcast(Day21_WGCNA_genes_Merge, Gene ~ All_Treatment)
for (i in 1:nrow(Day21_READY)) {
# Moderate - higher expression AM > AA
if (Day21_READY$AAM[i] > Day21_READY$AAA[i]) {
Day21_READY$wgcna.xall_mod[i] <- ( (Day21_READY$MMM[i] / Day21_READY$MMA[i]) / (Day21_READY$AAM[i] / Day21_READY$AAA[i]) ) # call MA as the control for MM ratio
Day21_READY$wgcna.yall_mod[i] <- (Day21_READY$MAA[i] / Day21_READY$AAA[i]) # Y Axis - this is simply the conditioned control over the naive control ( MA / AA )
} else {
Day21_READY$wgcna.xall_mod[i] <- NA  # X axis  - call NA
Day21_READY$wgcna.yall_mod[i] <- NA # Y Axis  - call NA
}
}
perc_filt_mod21 <- (100 - ((((nrow(Day21_READY)) - (nrow(Day21_READY %>% na.omit())) ) / (nrow(Day21_READY))) * 100))
print(paste("Total filtered genes = ", (nrow(Day21_READY %>% na.omit()) ), "; Percent of module = ",perc_filt_mod21 ,  sep = ''))
x = data.frame(Gene = annot$V1[(match(Day21_READY$Gene, annot$V1))],
Gene_Description = annot$V7[(match(Day21_READY$Gene, annot$V1))])
Day21_Frontload   <- merge(x, Day21_READY, by = 'Gene')
Day21_Frontload_2 <- Day21_Frontload %>%
dplyr::mutate(baseMeanNAIVE_control = AAA) %>%
dplyr::mutate(baseMeanPRIMED_control = MAA) %>%
dplyr::mutate(baseMeanNAIVE_foldChangeModerate = ((AAM) / (AAA))  ) %>%
dplyr::mutate(baseMeanPRIMED_foldChangeModerate = ((MAM) / (MAA)) ) %>%
dplyr::rename(ControlRatio = wgcna.yall_mod) %>%
dplyr::rename(foldChangeRatio = wgcna.xall_mod) %>%
dplyr::mutate(Frontloaded = ifelse(ControlRatio > 1.00 & foldChangeRatio < 1.00, "frontloaded", "Not frontloaded"))
D21Frontloaded <- Day21_Frontload_2 %>% filter(ControlRatio > 1) %>% filter(foldChangeRatio < 1)
is is pre filteres for < 5 CPM in 50% of samples - less strict than the DESeq2 analysis
dim(day21.counts.matrix) # 8626  rows (genes) -   36  samples  not counting 'x' and 'Gene.ID'
(day21.counts.matrix)[1] # ommit the first line and transpose in the next line
d21.data = as.data.frame(t(day21.counts.matrix[, -(1)])) # ommit all columns but samples and transpose
Master.Treatment_Phenotype.Day21 = Master.Treatment_Phenotype.Day21[, -c(1:3,5,8:21)] %>% dplyr::filter(Sample.Name %in% day21.WGCNA.Samples) # remove columns that hold information we do not need. (i.e. tankks, Third treatment, All treatment group, etc.)
names(d21.data) = day21.counts.matrix$X # assigns column names (previous jsut numbered) as the gene ID
rownames(d21.data) = names(day21.counts.matrix)[-(1)]; # assigns the row names as the sample ID
d21.data_matrix <- data.frame(day21.counts.matrix[,-1], row.names=day21.counts.matrix[,1])
d21.data_matrix_t <- t(d21.data_matrix)
# create dds objects to transform data
dds.d21 <- DESeqDataSetFromMatrix(countData = d21.data_matrix,
colData = Master.Treatment_Phenotype.Day21, design = ~ 1) # DESeq Data Set (dds)
# transform the data
dds.d21_vst      <- vst(dds.d21) # transform it vst
dds.d21_vst      <- assay(dds.d21_vst) # call only the transformed coutns in the dds object
dds.d21_vst <- as.data.frame(dds.d21_vst)
dds.d21_vst <- tibble::rownames_to_column(dds.d21_vst, var = "Gene")
D21Frontloaded
D21Frontloaded
D21Frontloaded
# plot the frontloaded genes formula using x axis for the moderate treatment (second exposure, day 7)
P.wgcna.mod <- D21Frontloaded[!is.na(D21Frontloaded$foldChangeRatio),] %>%
dplyr::mutate(FrontMod_color = ifelse(foldChangeRatio < 1.0 & ControlRatio > 1.0, "True", "False")) %>%
dplyr::filter(ControlRatio <5) %>%
ggplot(aes(x=foldChangeRatio, y=ControlRatio)) +
geom_point(aes(color=FrontMod_color,shape=FrontMod_color), na.rm=TRUE) +
scale_shape_manual(values=c(19,19)) +
scale_color_manual(values=c("grey", "black")) +
theme_classic() +
scale_x_continuous(expand = c(0, 0), breaks=seq(0,2, 0.5)) +
scale_y_continuous(expand = c(0, 0), limits = c(0,4)) +
stat_smooth(method = "lm",
formula = y ~ x + poly(x, 2) - 1) +
geom_vline(xintercept=1, linetype="dotted") +
geom_hline(yintercept=1, linetype="dotted") +
labs(y= "Conditioned to naive control ratio",
x = "Conditioned to naive foldchange ratio",
title = "Day 7
Frontloaded genes; response to moderate pCO2") +
expand_limits(x = 0, y = 0) +
annotate("rect", xmin = 0, xmax = 1, ymin = 1, ymax = 4,
alpha = .2) +
theme(legend.position="none", text = element_text(size=15))
P.wgcna.mod
# plot the frontloaded genes formula using x axis for the moderate treatment (second exposure, day 7)
P.wgcna.mod <- D21Frontloaded[!is.na(D21Frontloaded$foldChangeRatio),] %>%
dplyr::mutate(FrontMod_color = ifelse(foldChangeRatio < 1.0 & ControlRatio > 1.0, "True", "False")) %>%
dplyr::filter(ControlRatio <5) %>%
ggplot(aes(x=foldChangeRatio, y=ControlRatio)) +
geom_point(aes(color=FrontMod_color,shape=FrontMod_color), na.rm=TRUE) +
scale_shape_manual(values=c(19,19)) +
scale_color_manual(values=c("grey", "black")) +
theme_classic() +
scale_x_continuous(expand = c(0, 0), breaks=seq(0,2, 0.5)) +
scale_y_continuous(expand = c(0, 0), limits = c(0,4)) +
stat_smooth(method = "lm",
formula = y ~ x + poly(x, 2) - 1) +
geom_vline(xintercept=1, linetype="dotted") +
geom_hline(yintercept=1, linetype="dotted") +
labs(y= "Conditioned to naive control ratio",
x = "Conditioned to naive foldchange ratio",
title = "Day 21
Frontloaded genes; response to moderate pCO2") +
expand_limits(x = 0, y = 0) +
annotate("rect", xmin = 0, xmax = 1, ymin = 1, ymax = 4,
alpha = .2) +
theme(legend.position="none", text = element_text(size=15))
P.wgcna.mod
D21Frontloaded <- Day21_Frontload_2 %>% filter(ControlRatio > 1) %>% filter(foldChangeRatio < 1)
for (i in 1:nrow(D21Frontloaded)) {
x <-  D21Frontloaded[i,]
x2 <- x  %>%
dplyr::select(!c('foldChangeRatio','ControlRatio','baseMeanNAIVE_control','baseMeanPRIMED_control','baseMeanNAIVE_foldChangeModerate','baseMeanPRIMED_foldChangeModerate')) %>%
gather(variable, value, -c(Gene,Gene_Description)) %>%
dplyr::filter(variable %in% c('AAA','AAM','MAA','MAM')) %>%
dplyr::mutate(Primary_Treatment = substr(variable, 1,1)) %>%
dplyr::mutate(Second_Treatment = substr(variable, 2,2)) %>%
dplyr::mutate(Third_Treatment = substr(variable, 3,3)) %>%
# dplyr::group_by(Primary_Treatment, Third_Treatment) %>%
# dplyr::summarise(meanEXP = mean(value), sdExp = sd(value)) %>%
ggplot(aes(x=Third_Treatment , y=value, fill=Primary_Treatment)) +  # , colour=supp, group=supp))
theme_classic() +
#geom_errorbar(aes(ymin=meanEXP-sdExp, ymax=meanEXP+sdExp), colour="black", width=.1, position=pd) +
# geom_point(position=pd, size = 4, shape=21) +
geom_bar(position=position_dodge(), aes(y=value), stat="identity", width=0.5) +
xlab("Third pCO2 treatment") +
ylab('Gene Expression (averaged raw data)') +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("grey85","grey50")) +
#scale_color_manual(values=c("#56B4E9","#E69F00")) +
# ggtitle(paste("Day 7:",apriori_DESeq2_condenced[i,1],":", apriori_DESeq2_condenced[i,3],sep='')) +
ggtitle(paste(  D21Frontloaded[i,1], gsub(" .*", "\\1", D21Frontloaded[i,2]), sep = '_') ) +
# expand_limits(y=0) +                                                    # Expand y range
# scale_y_continuous(limits=c((min_p1), (max_p1))) +
# scale_y_continuous(limits = c((max(sdExp)+0.5),(min(sdExp)-0.5)))  +
# ylim(ExpMin, ExpMin) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.ticks.length=unit(.25, "cm"))+
theme(legend.position = "none")
gene <- D21Frontloaded[i,1]
title <- gsub(" .*", "\\1", (sub(" ", "_",  D21Frontloaded[i,2])) )
# pdf(paste0("C:/Users/samjg/Documents/Github_repositories/Pgenerosa_TagSeq_Metabolomics/TagSeq/Analysis/Output/WGCNA/subseq_treatments_all/Frontloading_plots/Day21/",gene, "_", (sub("/", "_",  title)),".pdf", sep = ''))
# print(x2)
# dev.off()
}
D21Frontloaded
Day21_Frontload_2
# plot the frontloaded genes formula using x axis for the moderate treatment (second exposure, day 7)
P.wgcna.mod <- Day21_Frontload_2[!is.na(Day21_Frontload_2$foldChangeRatio),] %>%
dplyr::mutate(FrontMod_color = ifelse(foldChangeRatio < 1.0 & ControlRatio > 1.0, "True", "False")) %>%
dplyr::filter(ControlRatio <5) %>%
ggplot(aes(x=foldChangeRatio, y=ControlRatio)) +
geom_point(aes(color=FrontMod_color,shape=FrontMod_color), na.rm=TRUE) +
scale_shape_manual(values=c(19,19)) +
scale_color_manual(values=c("grey", "black")) +
theme_classic() +
scale_x_continuous(expand = c(0, 0), breaks=seq(0,2, 0.5)) +
scale_y_continuous(expand = c(0, 0), limits = c(0,4)) +
stat_smooth(method = "lm",
formula = y ~ x + poly(x, 2) - 1) +
geom_vline(xintercept=1, linetype="dotted") +
geom_hline(yintercept=1, linetype="dotted") +
labs(y= "Conditioned to naive control ratio",
x = "Conditioned to naive foldchange ratio",
title = "Day 21
Frontloaded genes; response to moderate pCO2") +
expand_limits(x = 0, y = 0) +
annotate("rect", xmin = 0, xmax = 1, ymin = 1, ymax = 4,
alpha = .2) +
theme(legend.position="none", text = element_text(size=15))
P.wgcna.mod
