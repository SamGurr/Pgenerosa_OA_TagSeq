cts.merged.d0 <- cts.merged[colnames(cts.merged) %in% exp.data.d0$Sample.Name]
ncol(cts.merged.d0) # 141 samples
colnames(cts.merged)
cts.merged
cts
colnames(cts)[1]
#======================================== #
# DAY 0
# About: run dyplr 'antijoin' to call cts columns that match 'Sample.Name' in the data frame 'exp.data.d0'
ncol(ct)
#======================================== #
# DAY 0
# About: run dyplr 'antijoin' to call cts columns that match 'Sample.Name' in the data frame 'exp.data.d0'
ncol(cts)
ncol(cts.merged)
colnames(cts.merged)
exp.data.d0$Sample.Name
cts.merged.d0 <- cts.merged[colnames(cts.merged) %in% exp.data.d0$Sample.Name]
cts.merged.d0
cts.merged.d0 <- cts[colnames(cts) %in% exp.data.d0$Sample.Name]
cts.merged.d0
cts
cts.merged <- data.frame(cts[,-1], row.names=cts[,1]) # call new dataframe with first column now as row names, now all row values are numeric
cts.merged
names(cts.merged) <- sapply(strsplit(names(cts.merged), "_"), '[', 1) # split the column names by "_" delimiter  and call the first field SG##
cts.merged <- t(rowsum(t(cts.merged), group = colnames(cts.merged), na.rm = T)) # merge all unique columns and sum counts
ncol(cts.merged)
#======================================== #
# ALL TIMEPOINTS
cts.matrix <-as.matrix(cts.merged, row.names="transcript_id") # call dataframe as matrix
ncol(cts.matrix) # 141 samples
nrow(cts.matrix) # 34947 total genes
#======================================== #
# DAY 0
# About: run dyplr 'antijoin' to call cts columns that match 'Sample.Name' in the data frame 'exp.data.d0'
cts.merged.as.table <- tibble::rownames_to_column(cts.merged, "transcript_ID")
#======================================== #
# DAY 0
# About: run dyplr 'antijoin' to call cts columns that match 'Sample.Name' in the data frame 'exp.data.d0'
cts.merged.as.table <- cts.merged %>% tibble::rownames_to_column(cts.merged, "transcript_ID")
#======================================== #
# DAY 0
# About: run dyplr 'antijoin' to call cts columns that match 'Sample.Name' in the data frame 'exp.data.d0'
cts.merged.as.table <- cts.merged %>% tibble::rownames_to_column(cts.merged, "VALUE")
cts.merged
cts
#======================================== #
# DAY 0
# About: run dyplr 'antijoin' to call cts columns that match 'Sample.Name' in the data frame 'exp.data.d0'
cts.merged.as.table <- cts.merged %>% tibble::rownames_to_column(cts.merged, "transcript_id")
#======================================== #
# DAY 0
# About: run dyplr 'antijoin' to call cts columns that match 'Sample.Name' in the data frame 'exp.data.d0'
cts.merged.as.table <- cts.merged %>% tibble::rownames_to_column(cts.merged, "transcript_id")
#======================================== #
# DAY 0
# About: run dyplr 'antijoin' to call cts columns that match 'Sample.Name' in the data frame 'exp.data.d0'
cts.merged.as.table <- cts.merged %>% tibble::rownames_to_column(cts.merged, )
#======================================== #
# DAY 0
# About: run dyplr 'antijoin' to call cts columns that match 'Sample.Name' in the data frame 'exp.data.d0'
cts.merged.as.table <- cts.merged %>% tibble::rownames_to_column(cts.merged, "VALUE")
#======================================== #
# DAY 0
# About: run dyplr 'antijoin' to call cts columns that match 'Sample.Name' in the data frame 'exp.data.d0'
cts.merged.as.table <- cts.merged %>% tibble::rownames_to_column(cts.merged, "1")
#======================================== #
# DAY 0
# About: run dyplr 'antijoin' to call cts columns that match 'Sample.Name' in the data frame 'exp.data.d0'
cts.merged.as.table <- cts.merged %>% tibble::rownames_to_column(cts.merged, 1)
#======================================== #
# DAY 0
# About: run dyplr 'antijoin' to call cts columns that match 'Sample.Name' in the data frame 'exp.data.d0'
cts.merged.as.table <- data.frame(names = row.names(cts.merged), cts.merged)
cts.merged.as.table
rownames(cts.merged.as.table) <- NULL
cts.merged.as.table
#======================================== #
# DAY 0
# About: run dyplr 'antijoin' to call cts columns that match 'Sample.Name' in the data frame 'exp.data.d0'
cts.merged.as.table <- data.frame(transcript_id = row.names(cts.merged), cts.merged)
rownames(cts.merged.as.table) <- NULL
cts.merged.as.table
cts.merged.d0 <- cts.merged.as.table[colnames(cts.merged.as.table) %in% exp.data.d0$Sample.Name]
ncol(cts.merged.d0) # 141 samples
cts.merged.d0
ncol(cts.merged.as.table)
colnames(cts.merged.as.table)[c(2:142)]
cts.merged.d0 <- cts.merged.as.table[colnames(cts.merged.as.table)[c(2:142)] %in% exp.data.d0$Sample.Name]
cts.merged.d0
colnames(cts.merged.as.table)[c(2:142)]
cts.merged.as.table
cts.merged.d0 <- cts.merged.as.table[(colnames(cts.merged.as.table)[c(2:142)]) %in% exp.data.d0$Sample.Name]
cts.merged.d0
exp.data.d0$Sample.Name
exp.data
cts.merged.d0 <- cts.merged.as.table[1,((colnames(cts.merged.as.table)[c(2:142)]) %in% exp.data.d0$Sample.Name)]
cts.merged.d0
cts.merged.d0 <- cts.merged.as.table[c(1,(colnames(cts.merged.as.table)[c(2:142)] %in% exp.data.d0$Sample.Name))]
cts.merged.d0
cts.merged.as.table[c(1,2:5)]
cts.merged.d0 <- cts.merged.as.table[c(1,colnames(cts.merged.as.table)[c(2:142)] %in% exp.data.d0$Sample.Name)]
cts.merged.d0
colnames(cts.merged.as.table)[c(2:142)]
cts.merged.d0 <- cts.merged.as.table[c(1,colnames[c(2:142)] %in% exp.data.d0$Sample.Name)]
cts.merged.d0 <- paste(cts.merged.as.table[1], cts.merged.as.table[colnames(cts.merged.as.table)[c(2:142)] %in% exp.data.d0$Sample.Name])
cts.merged.d0
cts.merged.as.table[1]
cts.merged.as.table[colnames(cts.merged.as.table)[c(2:142)] %in% exp.data.d0$Sample.Name]
cts.merged.d0 <- cbind(cts.merged.as.table[1], cts.merged.as.table[colnames(cts.merged.as.table)[c(2:142)] %in% exp.data.d0$Sample.Name])
cts.merged.d0
cts.merged.d0 <- data.frame(cts.merged.d0[,-1], row.names=cts.merged.d0[,1])
cts.merged.d0
cts.matrix.d0  <-as.matrix(cts.merged.d0, row.names="transcript_id")
ncol(cts.matrix.d0) # 8  samples from just Day 0
exp.data.d21$Sample.Name
colnames(cts.matrix.d0)
exp.data.d0
colnames(cts.matrix.d0) == row.names(exp.data.d0$Sample.Name)
row.names(exp.data.d0$Sample.Name)
colnames(cts.matrix.d0) == exp.data.d0$Sample.Name
colnames(cts.matrix.d0)
exp.data.d0$Sample.Name
cts.merged.as.table[1]
cts.merged.as.table)[c(2:142)]
colnames(cts.merged.as.table)[c(2:142)]
exp.data.d0$Sample.Name
cts.merged.as.table[colnames(cts.merged.as.table)[c(2:142)] %in% exp.data.d0$Sample.Name]
exp.data.d0$Sample.Name
exp.data.d0
cts.merged.d0 <- cts.merged.as.table[c(1, colnames(cts.merged.as.table) %in% exp.data.d0$Sample.Name)]
cts.merged.d0
cts.merged.d0 <- cts.merged.as.table[c(1:2, colnames(cts.merged.as.table) %in% exp.data.d0$Sample.Name)]
cts.merged.d0
cts.merged.as.table
cts.merged.d0 <- cts.merged.as.table[c(1, colnames(cts.merged.as.table)[2:142] %in% exp.data.d0$Sample.Name)]
cts.merged.d0
exp.data.d0$Sample.Name
colnames(cts.merged.as.table)[2:142]
cts.merged.d0 <- cts.merged.as.table[c("transcript_id", colnames(cts.merged.as.table)[2:142] %in% exp.data.d0$Sample.Name)]
cts.merged.d0 <- cts.merged.as.table[c(1, colnames(cts.merged.as.table)[2:142] %in% exp.data.d0$Sample.Name)]
cts.merged.d0
cts.merged.as.table[c(1,2:5)]
cts.merged.d0 <- cts.merged.as.table[c(colnames(cts.merged.as.table) %in% exp.data.d0$Sample.Name)]
cts.merged.d0
exp.data.d0$Sample.Name
cts.merged.d0 <- cts.merged.as.table[1,[c(colnames(cts.merged.as.table) %in% exp.data.d0$Sample.Name)]]
cts.merged.d0 <- cts.merged.as.table[1,(c(colnames(cts.merged.as.table) %in% exp.data.d0$Sample.Name))]
cts.merged.d0
cts.merged.d0 <- cts.merged.as.table[1,c(colnames(cts.merged.as.table) %in% exp.data.d0$Sample.Name)]
cts.merged.d0
cts.merged.d0 <- cts.merged.as.table[1, colnames(cts.merged.as.table) %in% exp.data.d0$Sample.Name]
cts.merged.d0
cts.merged.d0 <- cts.merged.as.table[c(1, colnames(cts.merged.as.table) %in% exp.data.d0$Sample.Name)]
cts.merged.d0
cts.merged.as.table[2:142]
cts.merged.d0 <- cts.merged.as.table[c(1, colnames(cts.merged.as.table[2:142]) %in% exp.data.d0$Sample.Name)]
cts.merged.d0
cts.merged.d0 <- cts.merged.as.table[c(1, colnames(cts.merged.as.table)[2:142] %in% exp.data.d0$Sample.Name)]
cts.merged.d0
cts.merged.as.table
cts.merged.d0 <- cts.merged.as.table[,c(1, colnames(cts.merged.as.table)[2:142] %in% exp.data.d0$Sample.Name)]
cts.merged.d0
cts.merged.d0 <- cts.merged.as.table[c(1, colnames(cts.merged.as.table)[2:142] %in% exp.data.d0$Sample.Name)]
cts.merged.d0
cts.merged.d0 <- cts.merged.as.table[c(1,colnames(cts.merged.as.table)[2:142] %in% exp.data.d0$Sample.Name)]
cts.merged.d0
cts.merged.d0 <- cts.merged.as.table[c(1,colnames(cts.merged.as.table) %in% exp.data.d0$Sample.Name)]
cts.merged.d0
cts.merged.d0 <- cts.merged.as.table[c(colnames(cts.merged.as.table) %in% exp.data.d0$Sample.Name)]
cts.merged.d0
colnames(cts.merged.d0)
exp.data.d0$Sample.Name
cts.merged.as.table[1]
cts.merged.d0 <- cbind(cts.merged.as.table[1], cts.merged.as.table[colnames(cts.merged.as.table) %in% exp.data.d0$Sample.Name])
colnames(cts.merged.d0)
exp.data.d0$Sample.Name
cts.merged.d0
cts.merged.d0 <- data.frame(cts.merged.d0[,-1], row.names=cts.merged.d0[,1])
cts.matrix.d0  <-as.matrix(cts.merged.d0, row.names="transcript_id")
ncol(cts.matrix.d0) # 8  samples from just Day 0
cts.matrix.d0
exp.data.d0$Sample.Name
colnames(cts.matrix.d0)
colnames(cts.matrix.d0) == exp.data.d0$Sample.Name
x <- cts.merged.d0[,c(1:3,na.omit(match(exp.data.d0$Sample.Name, colnames(cts.merged.d0))))]
x <- cts.merged.d0[,c(1,na.omit(match(exp.data.d0$Sample.Name, colnames(cts.merged.d0))))]
x
x <- cts.merged.d0[,c(1,na.omit(match(exp.data.d0$Sample.Name, colnames(cts.merged.d0))))]
x
x <- cts.merged.as.table[,c(1,na.omit(match(exp.data.d0$Sample.Name, colnames(cts.merged.as.table))))]
x
exp.data.d0$Sample.Name
cts.merged.d0 <- cts.merged.as.table[,c(1,na.omit(match(exp.data.d0$Sample.Name, colnames(cts.merged.as.table))))]
cts.merged.d0 <- data.frame(cts.merged.d0[,-1], row.names=cts.merged.d0[,1])
cts.matrix.d0  <-as.matrix(cts.merged.d0, row.names="transcript_id")
ncol(cts.matrix.d0) # 8  samples from just Day 0
colnames(cts.matrix.d0) == exp.data.d0$Sample.Name
exp.data.d21$Sample.Name
ncol(cts.merged.as.table) # 142 counting the ID that we want to keep!
cts.merged.d21 <- cts.merged.as.table[,c(1,na.omit(match(exp.data.d21$Sample.Name, colnames(cts.merged.as.table))))]
cts.merged.d21 <- data.frame(cts.merged.d21[,-1], row.names=cts.merged.d21[,1])
cts.matrix.d21  <-as.matrix(cts.merged.d21, row.names="transcript_id")
ncol(cts.matrix.d21) # 8  samples from just Day 0
colnames(cts.matrix.d21) == exp.data.d21$Sample.Name # check if TRUE, means the same as the exp/design dataframe exp.data.d21
cts.matrix.d21
# format Experiment/design dataframe into matrix
exp.data.d0$Primary_Treatment <- factor(exp.data.d0$Primary_Treatment) # change Primary_Treatment to factor
exp.data.d0$Day <- factor(exp.data.d0$Day) # change Day to a factor
# format Experiment/design dataframe into matrix
exp.data.d0$Primary_Treatment <- factor(exp.data.d0$Primary_Treatment) # change Primary_Treatment to factor
exp.data.d0.PRIMARY <- exp.data.d0 %>% dplyr::select(c('Sample.Name', 'Day', 'Primary_Treatment')) # coondense dataset to build target matrix
exp.data.d0.PRIMARY <- exp.data.d0 %>% dplyr::select(c('Sample.Name', 'Primary_Treatment')) # coondense dataset to build target matrix
exp.data.d0.PRIMARY <- data.frame(exp.data.d0.PRIMARY[,-1], row.names=exp.data.d0.PRIMARY[,1]) # move Sample.Name column as row names
exp.data.d0.PRIMARY
# format Experiment/design dataframe into matrix
exp.data.d0$Primary_Treatment <- factor(exp.data.d0$Primary_Treatment) # change Primary_Treatment to factor
exp.data.d0
exp.data.d0.PRIMARY <- exp.data.d0 %>% dplyr::select(c('Sample.Name', 'Primary_Treatment')) # coondense dataset to build target matrix
exp.data.d0.PRIMARY
exp.data.d0.PRIMARY <- data.frame(exp.data.d0.PRIMARY[,-1], row.names=exp.data.d0.PRIMARY[,1]) # move Sample.Name column as row names
exp.data.d0.PRIMARY
exp.data.d0.PRIMARY <- exp.data.d0 %>% dplyr::select(c('Sample.Name', 'Primary_Treatment')) # coondense dataset to build target matrix
exp.data.d0.PRIMARY
exp.data.d0.PRIMARY.mtx <- as.matrix(exp.data.d0.PRIMARY, row.names="Geoduck.ID") # create matrix
exp.data.d0.PRIMARY.mtx
exp.data.d0.PRIMARY <- exp.data.d0 %>% dplyr::select(c('Sample.Name', 'Primary_Treatment')) # coondense dataset to build target matrix
exp.data.d0.PRIMARY <- data.frame(exp.data.d0.PRIMARY[,-1], row.names=exp.data.d0.PRIMARY[,1]) # move Sample.Name column as row names
exp.data.d0.PRIMARY
exp.data.d0.PRIMARY.mtx <- as.matrix(exp.data.d0.PRIMARY, row.names="Geoduck.ID") # create matrix
exp.data.d0.PRIMARY.mtx
# format Experiment/design dataframe into matrix
exp.data.d0$Primary_Treatment <- factor(exp.data.d0$Primary_Treatment) # change Primary_Treatment to factor
exp.data.d0.PRIMARY <- exp.data.d0 %>% dplyr::select(c('Sample.Name', 'Primary_Treatment')) # coondense dataset to build target matrix
exp.data.d0.PRIMARY
exp.data.d0.PRIMARY[,-1]
exp.data.d0.PRIMARY[,1]
exp.data.d0.PRIMARY[,-1]
exp.data.PRIMARY[,-1]
exp.data.PRIMARY.mtx
exp.data.d0$Primary_Treatment
exp.data.d0
exp.data.d0.PRIMARY
exp.data.d0.PRIMARY <- data.frame(exp.data.d0.PRIMARY[,1], row.names=exp.data.d0.PRIMARY[,1]) # move Sample.Name column as row names
exp.data.d0.PRIMARY
exp.data.d0.PRIMARY <- data.frame(row.names=exp.data.d0.PRIMARY[,1]) # move Sample.Name column as row names
exp.data.d0.PRIMARY
exp.data.d0.PRIMARY[,-1]
# format Experiment/design dataframe into matrix
exp.data.d0$Primary_Treatment <- factor(exp.data.d0$Primary_Treatment) # change Primary_Treatment to factor
exp.data.d0.PRIMARY <- exp.data.d0 %>% dplyr::select(c('Sample.Name', 'Primary_Treatment')) # coondense dataset to build target matrix
exp.data.d0.PRIMARY[,-1]
exp.data.d0.PRIMARY[,1]
exp.data.d0.PRIMARY <- data.frame(exp.data.d0.PRIMARY[,1], row.names=exp.data.d0.PRIMARY[,1]) # move Sample.Name column as row names
exp.data.d0.PRIMARY
# format Experiment/design dataframe into matrix
exp.data.d0$Primary_Treatment <- factor(exp.data.d0$Primary_Treatment) # change Primary_Treatment to factor
exp.data.d0.PRIMARY <- exp.data.d0 %>% dplyr::select(c('Sample.Name', 'Primary_Treatment')) # coondense dataset to build target matrix
exp.data.d0.PRIMARY <- data.frame(exp.data.d0.PRIMARY[,-1], row.names=exp.data.d0.PRIMARY[,1]) # move Sample.Name column as row names
exp.data.d0.PRIMARY.mtx <- as.matrix(exp.data.d0.PRIMARY, row.names="Geoduck.ID") # create matrix
# fix(exp.data.mtx) # view data - remove # to open
# CKECK THE cts.matrix AND THE exp.data.mtx
exp.data.d0.PRIMARY.mtx <- exp.data.d0.PRIMARY.mtx[match(colnames(cts.matrix.d0),rownames(exp.data.d0.PRIMARY.mtx)), ]
all(rownames(exp.data.d0.PRIMARY.mtx) %in% colnames(cts.matrix.d0)) # should be TRUE
all(rownames(exp.data.d0.PRIMARY.mtx) == colnames(cts.matrix.d0)) # should be TRUE
cts.matrix.d0 <- cts.matrix.d0[, rownames(exp.data.d0.PRIMARY.mtx)]
all(rownames(exp.data.d0.PRIMARY.mtx) == colnames(cts.matrix.d0))  # should be TRUE
exp.data.d0.PRIMARY.mtx
cts.matrix.d0
exp.data.PRIMARY.mtx
cts.matrix
# About: run dyplr 'antijoin' to call cts columns that match 'Sample.Name' in the data frame 'exp.data.d0'
cts.merged.as.table <- data.frame(transcript_id = row.names(cts.merged), cts.merged) # add back the rownames 'transcript_ID'
rownames(cts.merged.as.table) <- NULL # ommit the rownames
ncol(cts.merged.as.table) # 142 counting the ID that we want to keep!
cts.merged.d0 <- cts.merged.as.table[,c(1,na.omit(match(exp.data.d0$Sample.Name, colnames(cts.merged.as.table))))]
cts.merged.d0 <- data.frame(cts.merged.d0[,-1], row.names=cts.merged.d0[,1])
cts.matrix.d0  <-as.matrix(cts.merged.d0, row.names="transcript_id")
ncol(cts.matrix.d0) # 8  samples from just Day 0
colnames(cts.matrix.d0) == exp.data.d0$Sample.Name # che
cts.matrix.d0
rownames(exp.data.d0.PRIMARY.mtx)
# format Experiment/design dataframe into matrix
exp.data.d0$Primary_Treatment <- factor(exp.data.d0$Primary_Treatment) # change Primary_Treatment to factor
exp.data.d0.PRIMARY <- exp.data.d0 %>% dplyr::select(c('Sample.Name', 'Primary_Treatment')) # coondense dataset to build target matrix
exp.data.d0.PRIMARY <- data.frame(exp.data.d0.PRIMARY[,-1], row.names=exp.data.d0.PRIMARY[,1]) # move Sample.Name column as row names
exp.data.d0.PRIMARY
exp.data.d0.PRIMARY.mtx <- as.matrix(exp.data.d0.PRIMARY, row.names="Geoduck.ID") # create matrix
exp.data.d0.PRIMARY.mtx
# fix(exp.data.mtx) # view data - remove # to open
# CKECK THE cts.matrix AND THE exp.data.mtx
exp.data.d0.PRIMARY.mtx <- exp.data.d0.PRIMARY.mtx[match(colnames(cts.matrix.d0),rownames(exp.data.d0.PRIMARY.mtx)), ]
exp.data.d0.PRIMARY.mtx
# format Experiment/design dataframe into matrix
exp.data.d0$Primary_Treatment <- factor(exp.data.d0$Primary_Treatment) # change Primary_Treatment to factor
exp.data.d0.PRIMARY <- exp.data.d0 %>% dplyr::select(c('Sample.Name', 'Primary_Treatment')) # coondense dataset to build target matrix
exp.data.d0.PRIMARY <- data.frame(exp.data.d0.PRIMARY[,-1], row.names=exp.data.d0.PRIMARY[,1]) # move Sample.Name column as row names
exp.data.d0.PRIMARY.mtx <- as.matrix(exp.data.d0.PRIMARY, row.names="Geoduck.ID") # create matrix
# fix(exp.data.mtx) # view data - remove # to open
# CKECK THE cts.matrix AND THE exp.data.mtx
exp.data.d0.PRIMARY.mtx <- exp.data.d0.PRIMARY.mtx[match(colnames(cts.merged.d0),rownames(exp.data.d0.PRIMARY.mtx)), ]
exp.data.d0.PRIMARY.mtx
exp.data.PRIMARY.mtx
exp.data.d0.PRIMARY.mtx
cts.matrix
exp.data.PRIMARY.mtx
# DEG ANALYSIS READY!!
ncol(cts.matrix)
nrow(exp.data.PRIMARY.mtx)
# format Experiment/design dataframe into matrix
exp.data.d0$Primary_Treatment <- factor(exp.data.d0$Primary_Treatment) # change Primary_Treatment to factor
exp.data.d0.PRIMARY <- exp.data.d0 %>% dplyr::select(c('Sample.Name', 'Primary_Treatment')) # coondense dataset to build target matrix
exp.data.d0.PRIMARY <- data.frame(exp.data.d0.PRIMARY[,-1], row.names=exp.data.d0.PRIMARY[,1]) # move Sample.Name column as row names
exp.data.d0.PRIMARY.mtx <- as.matrix(exp.data.d0.PRIMARY, row.names="Geoduck.ID") # create matrix
exp.data.d0.PRIMARY.mtx
# format Experiment/design dataframe into matrix
exp.data.d0$Primary_Treatment <- factor(exp.data.d0$Primary_Treatment) # change Primary_Treatment to factor
exp.data.d0.PRIMARY <- exp.data.d0 %>% dplyr::select(c('Sample.Name', 'Primary_Treatment')) # coondense dataset to build target matrix
exp.data.d0.PRIMARY
# format Experiment/design dataframe into matrix
exp.data.d0$Primary_Treatment <- factor(exp.data.d0$Primary_Treatment) # change Primary_Treatment to factor
# format Experiment/design dataframe into matrix
exp.data.d0.PRIMARY <- exp.data.d0 %>% dplyr::select(c('Sample.Name', 'Primary_Treatment')) # coondense dataset to build target matrix
exp.data.d0.PRIMARY$Primary_Treatment <- factor(exp.data.d0.PRIMARY$Primary_Treatment) # change Primary_Treatment to factor
exp.data.d0.PRIMARY
exp.data.d0.PRIMARY <- data.frame(exp.data.d0.PRIMARY[,-1], row.names=exp.data.d0.PRIMARY[,1]) # move Sample.Name column as row names
exp.data.d0.PRIMARY
exp.data.d0.PRIMARY.mtx <- as.matrix(exp.data.d0.PRIMARY, row.names="Geoduck.ID") # create matrix
exp.data.d0.PRIMARY.mtx
exp.data.d0
exp.data.PRIMARY <- exp.data %>% dplyr::select(c('Sample.Name', 'Time', 'Primary_Treatment')) # coondense dataset to build target matrix
exp.data.PRIMARY
exp.data.PRIMARY <- data.frame(exp.data.PRIMARY[,-1], row.names=exp.data.PRIMARY[,1]) # move Sample.Name column as row names
exp.data.PRIMARY.mtx <- as.matrix(exp.data.PRIMARY, row.names="Geoduck.ID") # create matrix
exp.data.PRIMARY.mtx
# fix(exp.data.mtx) # view data - remove # to open
# CKECK THE cts.matrix AND THE exp.data.mtx
exp.data.PRIMARY.mtx <- exp.data.PRIMARY.mtx[match(colnames(cts.merged),rownames(exp.data.PRIMARY.mtx)), ]
all(rownames(exp.data.PRIMARY.mtx) %in% colnames(cts.matrix)) # should be TRUE
all(rownames(exp.data.PRIMARY.mtx) == colnames(cts.matrix)) # should be TRUE
cts.matrix <- cts.matrix[, rownames(exp.data.PRIMARY.mtx)]
all(rownames(exp.data.PRIMARY.mtx) == colnames(cts.matrix))  # should be TRUE
# format Experiment/design dataframe into matrix
exp.data.d0.PRIMARY <- exp.data.d0 %>% dplyr::select(c('Sample.Name', 'Primary_Treatment', 'Time')) # coondense dataset to build target matrix
exp.data.d0.PRIMARY$Primary_Treatment <- factor(exp.data.d0.PRIMARY$Primary_Treatment) # change Primary_Treatment to factor
exp.data.d0.PRIMARY <- data.frame(exp.data.d0.PRIMARY[,-1], row.names=exp.data.d0.PRIMARY[,1]) # move Sample.Name column as row names
exp.data.d0.PRIMARY
exp.data.d0.PRIMARY.mtx <- as.matrix(exp.data.d0.PRIMARY, row.names="Geoduck.ID") # create matrix
exp.data.d0.PRIMARY.mtx
# fix(exp.data.mtx) # view data - remove # to open
# CKECK THE cts.matrix AND THE exp.data.mtx
exp.data.d0.PRIMARY.mtx <- exp.data.d0.PRIMARY.mtx[match(colnames(cts.merged.d0),rownames(exp.data.d0.PRIMARY.mtx)), ]
exp.data.d0.PRIMARY.mtx
all(rownames(exp.data.d0.PRIMARY.mtx) %in% colnames(cts.matrix.d0)) # should be TRUE
all(rownames(exp.data.d0.PRIMARY.mtx) == colnames(cts.matrix.d0)) # should be TRUE
cts.matrix.d0 <- cts.matrix.d0[, rownames(exp.data.d0.PRIMARY.mtx)]
all(rownames(exp.data.d0.PRIMARY.mtx) == colnames(cts.matrix.d0))  # should be TRUE
cts.matrix.d0
exp.data.d0.PRIMARY.mtx
# format Experiment/design dataframe into matrix
exp.data.d21.PRIMARY <- exp.data.d21 %>% dplyr::select(c('Sample.Name', 'Primary_Treatment', 'Time')) # coondense dataset to build target matrix
exp.data.d21.PRIMARY$Primary_Treatment <- factor(exp.data.d21.PRIMARY$Primary_Treatment) # change Primary_Treatment to factor
exp.data.d21.PRIMARY <- data.frame(exp.data.d21.PRIMARY[,-1], row.names=exp.data.d21.PRIMARY[,1]) # move Sample.Name column as row names
exp.data.d21.PRIMARY.mtx <- as.matrix(exp.data.d21.PRIMARY, row.names="Geoduck.ID") # create matrix
cts.merged.d21
# fix(exp.data.mtx) # view data - remove # to open
# CKECK THE cts.matrix AND THE exp.data.mtx
exp.data.d21.PRIMARY.mtx <- exp.data.d21.PRIMARY.mtx[match(colnames(cts.merged.d21),rownames(exp.data.d21.PRIMARY.mtx)), ]
exp.data.d21.PRIMARY.mtx
all(rownames(exp.data.d21.PRIMARY.mtx) %in% colnames(cts.matrix.d21)) # should be TRUE
all(rownames(exp.data.d21.PRIMARY.mtx) == colnames(cts.matrix.d21)) # should be TRUE
cts.matrix.d21 <- cts.matrix.d21[, rownames(exp.data.d21.PRIMARY.mtx)]
all(rownames(exp.data.d21.PRIMARY.mtx) == colnames(cts.matrix.d21))  # should be TRUE
exp.data.d21.PRIMARY.mtx
cts.matrix.d21
dds.primary <- DESeqDataSetFromMatrix(countData = cts.matrix,
colData = exp.data.PRIMARY.mtx,
design = ~ Primary_Treatment + Day) # DESeq Data Set (dds) - design as~ Primary_Treatment + Day
dds.primary # view dds
levels(dds.primary$Day) # "Day21"
# build dds
dds.primary <- DESeqDataSetFromMatrix(countData = cts.matrix,
colData = exp.data.PRIMARY.mtx,
design = ~ Primary_Treatment + Day) # DESeq Data Set (dds) - design as~ Primary_Treatment + Day
dds.primary # view dds
# prep for DESeq2
dds.primary$Primary_Treatment <- relevel(dds.primary$Primary_Treatment, ref = "A") # specify the reference level for count analysis - A = the control treatment
levels(dds.primary$Day) # "Day21"
dds.primary
exp.data.PRIMARY.mtx
# build dds
dds.primary <- DESeqDataSetFromMatrix(countData = cts.matrix,
colData = exp.data.PRIMARY.mtx,
design = ~ Primary_Treatment + Time) # DESeq Data Set (dds) - design as~ Primary_Treatment + Day
dds.primary # view dds
# prep for DESeq2
dds.primary$Primary_Treatment <- relevel(dds.primary$Primary_Treatment, ref = "A") # specify the reference level for count analysis - A = the control treatment
levels(dds.primary$Day) # "Day21"
levels(dds.primary$time) # "Day21"
levels(dds.primary$Time) # "Day21"
levels(dds.primary$Primary_Treatment) # "A" "M"
keep <- rowSums(counts(dds.primary)) >= 5 # PRE-FILTERING... ommits genes where counts between ALL samples (as rows) less than 5
dds.primary <- dds.primary[keep,] # integrate this criteria in the data
design(dds.primary) # view the design we have specified
ncol(dds.primary) # note that although you called the level Day0, all columns are still present (141)
colData(dds.primary)
colData(dds.primary)
# build dds
dds.primary.d0 <- DESeqDataSetFromMatrix(countData = cts.matrix.d0,
colData = exp.data.d0.PRIMARY.mtx,
design = ~ Primary_Treatment) # DESeq Data Set (dds) - design as ~Primary_Treatment
dds.primary.d0 # view dds
# build dds
dds.primary.d0 <- DESeqDataSetFromMatrix(countData = cts.matrix.d0,
colData = exp.data.d0.PRIMARY.mtx,
design = ~ Primary_Treatment) # DESeq Data Set (dds) - design as ~Primary_Treatment
dds.primary.d0 # view dds
dds.primary.d0$Time <- droplevels(dds.primary.d0$Time)
# format Experiment/design dataframe into matrix
exp.data.d0.PRIMARY <- exp.data.d0 %>% dplyr::select(c('Sample.Name', 'Primary_Treatment', 'Time')) # coondense dataset to build target matrix
exp.data.d0.PRIMARY$Primary_Treatment <- factor(exp.data.d0.PRIMARY$Primary_Treatment) # change Primary_Treatment to factor
exp.data.d0.PRIMARY$Time <- factor(exp.data.d0.PRIMARY$Time) # change Primary_Treatment to factor
exp.data.d0.PRIMARY <- data.frame(exp.data.d0.PRIMARY[,-1], row.names=exp.data.d0.PRIMARY[,1]) # move Sample.Name column as row names
exp.data.d0.PRIMARY.mtx <- as.matrix(exp.data.d0.PRIMARY, row.names="Geoduck.ID") # create matrix
# fix(exp.data.mtx) # view data - remove # to open
# CKECK THE cts.matrix AND THE exp.data.mtx
exp.data.d0.PRIMARY.mtx <- exp.data.d0.PRIMARY.mtx[match(colnames(cts.merged.d0),rownames(exp.data.d0.PRIMARY.mtx)), ]
all(rownames(exp.data.d0.PRIMARY.mtx) %in% colnames(cts.matrix.d0)) # should be TRUE
all(rownames(exp.data.d0.PRIMARY.mtx) == colnames(cts.matrix.d0)) # should be TRUE
cts.matrix.d0 <- cts.matrix.d0[, rownames(exp.data.d0.PRIMARY.mtx)]
all(rownames(exp.data.d0.PRIMARY.mtx) == colnames(cts.matrix.d0))  # should be TRUE
# build dds
dds.primary.d0 <- DESeqDataSetFromMatrix(countData = cts.matrix.d0,
colData = exp.data.d0.PRIMARY.mtx,
design = ~ Primary_Treatment) # DESeq Data Set (dds) - design as ~Primary_Treatment
dds.primary.d0 # view dds
# prep for DESeq2
dds.primary$Primary_Treatment <- relevel(dds.primary$Primary_Treatment, ref = "A") # specify the reference level for count analysis - A = the control treatment
# prep for DESeq2
dds.primary.d0$Primary_Treatment <- relevel(dds.primary.d0$Primary_Treatment, ref = "A") # specify the reference level for count analysis - A = the control treatment
dds.primary.d0$Time <- droplevels(dds.primary.d0$Time)
levels(dds.primary$Time) # levels for condition 'Time': "Day0"  "DAY14" "DAY21" "Day7"
levels(dds.primary.d0$Time) # levels for condition 'Time': "Day0"  "DAY14" "DAY21" "Day7"
levels(dds.primary.d0$Primary_Treatment) #  levels for condition 'Treatment': "A" "M"
keep <- rowSums(counts(dds.primary.d0)) >= 5 # PRE-FILTERING... ommits genes where counts between ALL samples (as rows) less than 5
dds.primary.d0 <- dds.primary.d0[keep,] # integrate this criteria in the data
design(dds.primary.d0) # view the design we have specified
ncol(dds.primary.d0) # 141 cols - Good
colData(dds.primary.d0)
# build dds
dds.primary.d21 <- DESeqDataSetFromMatrix(countData = cts.matrix.d21,
colData = exp.data.d21.PRIMARY.mtx,
design = ~ Primary_Treatment) # DESeq Data Set (dds) - design as ~Primary_Treatment
dds.primary.d21 # view dds
# prep for DESeq2
dds.primary.d21$Primary_Treatment <- relevel(dds.primary.d21$Primary_Treatment, ref = "A") # specify the reference level for count analysis - A = the control treatment
dds.primary.d21$Time <- droplevels(dds.primary.d21$Time)
levels(dds.primary.d21$Time) # NULL
levels(dds.primary.d21$Primary_Treatment) #  levels for condition 'Treatment': "A" "M"
keep <- rowSums(counts(dds.primary.d21)) >= 5 # PRE-FILTERING... ommits genes where counts between ALL samples (as rows) less than 5
dds.primary.d21 <- dds.primary.d21[keep,] # integrate this criteria in the data
design(dds.primary.d21) # view the design we have specified
ncol(dds.primary.d21) # 8 cols - Good
# Log fold change shrinkage for visualization and ranking
dds.primary.d21 <- DESeq(dds.primary.d21) #Run DESeq : Modeling counts with the specified design(dds) treatment effects
resultsNames(dds.primary.d21) # view the names of your results model
res.d21 <- results(dds.primary.d21) # view DESeq2 results
res.d21
res.D21.D0 <- results(dds, contrast=c("Primary_Treatment","M","A")) # alternative way of calling the results (i.e. Day_DAY21_vs_Day0)
res.D21.D0 <- results(dds.primary.d21, contrast=c("Primary_Treatment","M","A")) # alternative way of calling the results (i.e. Day_DAY21_vs_Day0)
res.D21.D0
res.d21
res.d21_Ordered <- res.d21[order(res.d21$pvalue),] # how to order based on p-value; chosses EHSM vs A - the last pairwise call
res.d21_Ordered # ordered based on pvalue
sum(res.d21_Ordered$padj < 0.1, na.rm=TRUE) # how many p values (genes) were less than 0.1? (49)
sum(res.d21_Ordered$padj < 0.05, na.rm=TRUE) # 331 marginal DEGs
res.d21_p05 <- results(res.d21, alpha=0.05)
res.d21_p05 <- results(res.d21, alpha=0.05)
summary(res.d21)
sum(res.d21_Ordered$padj < 0.1, na.rm=TRUE) # 331 marginal DEGs
sum(res.d21_Ordered$padj < 0.05, na.rm=TRUE) # 196 significant DEGs
res.D21.contrasts <- results(dds.primary.d21, contrast=c("Primary_Treatment","M","A")) # alternative way of calling the results (i.e. Day_DAY21_vs_Day0)
dds.primary <- DESeq(dds.primary) # wait for this to complete....
resultsNames(dds.primary) # view the names of your results model 'Primary_Treatment_M_vs_A'
# Note: these are all different ways of looking at the same results...
res <- results(dds.primary) # view DESeq2 results
res <- results(dds.primary, name="Primary_Treatment_M_vs_A")
res.contrasts <- results(dds.primary, contrast=c("Primary_Treatment","M","A")) # alternative way of calling the results (i.e. Day_DAY21_vs_Day0)
res.contrasts
res
res_Ordered <- res[order(res$pvalue),] # how to order based on p-value; chosses EHSM vs A - the last pairwise call
res_Ordered # ordered based on pvalue
sum(res_Ordered$padj < 0.1, na.rm=TRUE) # 331 marginal DEGs
sum(res_Ordered$padj < 0.1, na.rm=TRUE) # 1417 marginal DEGs
sum(res_Ordered$padj < 0.05, na.rm=TRUE) # 196 significant DEGs
summary(res)
sum(res$padj < 0.05, na.rm=TRUE)
dds.primary.d0 <- DESeq(dds.primary.d0) # wait for this to complete....
resultsNames(dds.primary.d0) # view the names of your results model 'Primary_Treatment_M_vs_A'
# Note: these are all different ways of looking at the same results...
res.d0 <- results(dds.primary.d0) # view DESeq2 results
res.d0 <- results(dds.primary.d0, name="Primary_Treatment_M_vs_A")
res.d0.contrasts <- results(dds.primary.d0, contrast=c("Primary_Treatment","M","A")) # alternative way of calling the results (i.e. Day_DAY21_vs_Day0)
res.d0.contrasts
res.d0_Ordered <- res.d0[order(res.d0$pvalue),] # how to order based on p-value; chosses EHSM vs A - the last pairwise call
res.d0_Ordered # ordered based on pvalue
sum(res.d0_Ordered$padj < 0.1, na.rm=TRUE) # 331 marginal DEGs
sum(res.d0_Ordered$padj < 0.1, na.rm=TRUE) # 27 marginal DEGs
sum(res.d0_Ordered$padj < 0.05, na.rm=TRUE) # 196 significant DEGs
sum(res.d0_Ordered$padj < 0.05, na.rm=TRUE) # 14 significant DEGs
summary(res.d0)
summary(res.d21)
