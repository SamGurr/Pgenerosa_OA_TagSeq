legend.position="bottom"
) +
xlab("") +
ylab("") +
ggtitle("Molecular Function: Downregulated DEGs") +
#geom_label(aes(x = 0.5, y = 0.5, label = paste(num_up, "DEGs"))) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) + #Set the plot background #set title attributes
#geom_hline(yintercept=0.25, linetype="dashed",  color = "black", size=2) +
facet_wrap(Day ~., scales="free_y", ncol= 1, strip.position="right")
BP_DOWN$term <- gsub(",.*$", "", BP_DOWN$term)
BP_DOWN$Day = factor(BP_DOWN$Day, levels = c("Day0", "Day7", "Day14", "Day21"))
BP_DOWN_plot <- BP_DOWN    %>%  mutate(term = fct_reorder(term, -log10(over_represented_pvalue))) %>%
#mutate(term = fct_reorder(term, Day)) %>%
ggplot(aes(x=term, y=-log10(over_represented_pvalue))) +
geom_segment( aes(x=term ,xend=term, y=1, yend=-log10(over_represented_pvalue)), color="grey95", size = 3) +
geom_point(size=3, shape = 15, colour = "grey70") +
coord_flip() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="bottom"
) +
xlab("") +
ylab("") +
ggtitle("Biological Process: Downregulated DEGs") +
#geom_label(aes(x = 0.5, y = 0.5, label = paste(num_up, "DEGs"))) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) + #Set the plot background #set title attributes
#geom_hline(yintercept=0.25, linetype="dashed",  color = "black", size=2) +
facet_wrap(Day ~., scales="free_y", ncol= 1, strip.position="right")
# MOLECULAR FUNCTION GRAPHS OUTPUT
pdf(paste("../Output/GO/DESeq2_goseq/GOplot_DESeq2_PrimEffect_Upregulated_MF.pdf", sep =''), width=10, height=12)
print(ggarrange(MF_UP_plot,
plotlist = NULL,
ncol = 1,
nrow = 1,
labels = NULL))
dev.off()
pdf(paste("../Output/GO/DESeq2_goseq/GOplot_DESeq2_PrimEffect_Downregulated_MF.pdf", sep =''), width=10, height=12)
print(ggarrange(MF_DOWN_plot,
plotlist = NULL,
ncol = 1,
nrow = 1,
labels = NULL))
dev.off()
# BIOLOFICAL PROCESS GRAPHS OUTPUT
pdf(paste("../Output/GO/DESeq2_goseq/GOplot_DESeq2_PrimEffect_Upregulated_BP.pdf", sep =''), width=10, height=12)
print(ggarrange(BP_UP_plot,
plotlist = NULL,
ncol = 1,
nrow = 1,
labels = NULL))
dev.off()
pdf(paste("../Output/GO/DESeq2_goseq/GOplot_DESeq2_PrimEffect_Downregulated_BP.pdf", sep =''), width=10, height=12)
print(ggarrange(BP_DOWN_plot,
plotlist = NULL,
ncol = 1,
nrow = 1,
labels = NULL))
dev.off()
# Build a master list of all genes and GO terms 'Pgen_GOterms2'
Geoduck_annotation <- read.delim2(file="C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/Seq_details/Panopea-generosa-genes-annotations.txt", header=F) # Load themaster Pgenerosa gene list
Pgen_GOterms <- Geoduck_annotation %>% dplyr::select(c('V1','V8')) # select only two columns - those with the gene IDs and those with the GO terms
Pgen_GOterms2 <- strsplit(Pgen_GOterms$V8, split = "; ") # create a string splitting by delimiter '; ' - view the data to see that this separates each GO term entry in the string
Pgen_GOterms2 <- data.frame(gene.ID = rep(Pgen_GOterms$V1, sapply(Pgen_GOterms2, length)), Go.terms = unlist(Pgen_GOterms2)) # create new dataframe 'Pgen_GOterms2' listing genes for each GO term (MUCH longer!)
Pgen_GOterms2 <- na.omit(Pgen_GOterms2) # ommit the NAs  - genes without GO annotation
d0.UP.05    <- read.csv("../Output/GO/DESeq2_goseq/Day0/GO.05.Day0_PrimEffect_Upregulated.csv")
d0.UP.05$Day = "Day0"
d0.UP.05$Dir = "Upregulated"
d0.DOWN.05  <- read.csv("../Output/GO/DESeq2_goseq/Day0/GO.05.Day0_PrimEffect_Downregulated.csv")
d0.DOWN.05$Day = "Day0"
d0.DOWN.05$Dir = "Downregulated"
d7.UP.05    <- read.csv("../Output/GO/DESeq2_goseq/Day7/GO.05.Day7_PrimEffect_Upregulated.csv")
d7.UP.05$Day = "Day7"
d7.UP.05$Dir = "Upregulated"
d7.DOWN.05  <- read.csv("../Output/GO/DESeq2_goseq/Day7/GO.05.Day7_PrimEffect_Downregulated.csv")
d7.DOWN.05$Day = "Day7"
d7.DOWN.05$Dir = "Downregulated"
d14.UP.05   <- read.csv("../Output/GO/DESeq2_goseq/Day14/GO.05.Day14_PrimEffect_Upregulated.csv")
d14.UP.05$Day = "Day14"
d14.UP.05$Dir = "Upregulated"
d14.DOWN.05 <- read.csv("../Output/GO/DESeq2_goseq/Day14/GO.05.Day14_PrimEffect_Downregulated.csv")
d14.DOWN.05$Day = "Day14"
d14.DOWN.05$Dir = "Downregulated"
d21.UP.05   <- read.csv("../Output/GO/DESeq2_goseq/Day21/GO.05.Day21_PrimEffect_Upregulated.csv")
d21.UP.05$Day = "Day21"
d21.UP.05$Dir = "Upregulated"
d21.DOWN.05 <- read.csv("../Output/GO/DESeq2_goseq/Day21/GO.05.Day21_PrimEffect_Downregulated.csv")
d21.DOWN.05$Day = "Day21"
d21.DOWN.05$Dir = "Downregulated"
# Master ALL WGCNA significant modules with treatment
Master_goseq_results      <- rbind(d0.UP.05, d0.DOWN.05,
d7.UP.05, d7.DOWN.05,
d14.UP.05, d14.DOWN.05,
d21.UP.05, d21.DOWN.05)
# View(Master_goseq_results)
# call enriched GO terms and plot
#  UPREGULATED GENES!
# day 0 UPREGULATED
GO_d0.UP.05.a<-d0.UP.05$category[d0.UP.05$over_represented_pvalue<.05] # change twice here
GO_d0.UP.05<-data.frame(GO_d0.UP.05.a)
colnames(GO_d0.UP.05) <- c("category")
GO_d0.UP.05 <- merge(GO_d0.UP.05, d0.UP.05, by="category") # change here
GO_d0.UP.05 <- GO_d0.UP.05[order(-GO_d0.UP.05$numDEInCat),]
GO_d0.UP.05$term <- as.factor(GO_d0.UP.05$term)
d0_UP_MF <- GO_d0.UP.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd0_UP', sep = "_")) %>%
dplyr::filter(ontology %in% ('MF_d0_UP'))
d0_UP_BP <- GO_d0.UP.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd0_UP', sep = "_")) %>%
dplyr::filter(ontology %in% ('BP_d0_UP'))
# day 7 UPREGULATED
GO_d7.UP.05.a<-d7.UP.05$category[d7.UP.05$over_represented_pvalue<.05] # change twice here
GO_d7.UP.05<-data.frame(GO_d7.UP.05.a)
colnames(GO_d7.UP.05) <- c("category")
GO_d7.UP.05 <- merge(GO_d7.UP.05, d7.UP.05, by="category") # change here
GO_d7.UP.05 <- GO_d7.UP.05[order(-GO_d7.UP.05$numDEInCat),]
GO_d7.UP.05$term <- as.factor(GO_d7.UP.05$term)
d7_UP_MF <- GO_d7.UP.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd7_UP', sep = "_")) %>%
dplyr::filter(ontology %in% ('MF_d7_UP'))
d7_UP_BP <- GO_d7.UP.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd7_UP', sep = "_")) %>%
dplyr::filter(ontology %in% ('BP_d7_UP'))
# day 14 UPREGULATED
GO_d14.UP.05.a<-d14.UP.05$category[d14.UP.05$over_represented_pvalue<.05] # change twice here
GO_d14.UP.05<-data.frame(GO_d14.UP.05.a)
colnames(GO_d14.UP.05) <- c("category")
GO_d14.UP.05 <- merge(GO_d14.UP.05, d14.UP.05, by="category") # change here
GO_d14.UP.05 <- GO_d14.UP.05[order(-GO_d14.UP.05$numDEInCat),]
GO_d14.UP.05$term <- as.factor(GO_d14.UP.05$term)
d14_UP_MF <- GO_d14.UP.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd14_UP', sep = "_")) %>%
dplyr::filter(ontology %in% ('MF_d14_UP'))
d14_UP_BP <- GO_d14.UP.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd14_UP', sep = "_")) %>%
dplyr::filter(ontology %in% ('BP_d14_UP'))
# day 21 UPREGULATED
GO_d21.UP.05.a<-d21.UP.05$category[d21.UP.05$over_represented_pvalue<.05] # change twice here
GO_d21.UP.05<-data.frame(GO_d21.UP.05.a)
colnames(GO_d21.UP.05) <- c("category")
GO_d21.UP.05 <- merge(GO_d21.UP.05, d21.UP.05, by="category") # change here
GO_d21.UP.05 <- GO_d21.UP.05[order(-GO_d21.UP.05$numDEInCat),]
GO_d21.UP.05$term <- as.factor(GO_d21.UP.05$term)
d21_UP_MF <- GO_d21.UP.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd21_UP', sep = "_")) %>%
dplyr::filter(ontology %in% ('MF_d21_UP'))
d21_UP_BP <- GO_d21.UP.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd21_UP', sep = "_")) %>%
dplyr::filter(ontology %in% ('BP_d21_UP'))
#======================================================================= #
# bind the rows of MF and BP in the clustered modules (those twith primary treatment effect in same pattern/directionality)
MF_UP <- rbind(d0_UP_MF, d7_UP_MF, d14_UP_MF, d21_UP_MF)
BP_UP <- rbind(d0_UP_BP, d7_UP_BP, d14_UP_BP, d21_UP_BP)
MF_UP$term <- gsub(",.*$", "", MF_UP$term)
MF_UP$Day = factor(MF_UP$Day, levels = c("Day0", "Day7", "Day14", "Day21"))
MF_UP_plot <- MF_UP  %>%  mutate(term = fct_reorder(term, -log10(over_represented_pvalue))) %>%
#mutate(term = fct_reorder(term, Day)) %>%
ggplot(aes(x=term, y=-log10(over_represented_pvalue))) +
geom_segment( aes(x=term ,xend=term, y=1, yend=-log10(over_represented_pvalue)), color="grey95", size = 3) +
geom_point(size=3, shape = 15, colour = "grey70") +
coord_flip() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="bottom"
) +
xlab("") +
ylab("") +
ggtitle("Molecular Function: Upregulated DEGs Primary Effect (higher by ambient history)") +
#geom_label(aes(x = 0.5, y = 0.5, label = paste(num_up, "DEGs"))) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) + #Set the plot background #set title attributes
#geom_hline(yintercept=0.25, linetype="dashed",  color = "black", size=2) +
facet_wrap(Day ~., scales="free_y", ncol= 1, strip.position="right")
#facet_wrap(~ Day,nrow = 1)
BP_UP$term <- gsub(",.*$", "", BP_UP$term)
BP_UP$Day = factor(BP_UP$Day, levels = c("Day0", "Day7", "Day14", "Day21"))
BP_UP_plot <- BP_UP  %>% mutate(term = fct_reorder(term, -log10(over_represented_pvalue))) %>%
#mutate(term = fct_reorder(term, Day)) %>%
ggplot(aes(x=term, y=-log10(over_represented_pvalue))) +
geom_segment( aes(x=term ,xend=term, y=1, yend=-log10(over_represented_pvalue)), color="grey95", size = 3) +
geom_point(size=3, shape = 15, colour = "grey70") +
coord_flip() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="bottom"
) +
xlab("") +
ylab("") +
ggtitle("Biological Process: Upregulated DEGs Primary Effect (higher by ambient history)") +
#geom_label(aes(x = 0.5, y = 0.5, label = paste(num_up, "DEGs"))) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) + #Set the plot background #set title attributes
#geom_hline(yintercept=0.25, linetype="dashed",  color = "black", size=2) +
facet_wrap(Day ~., scales="free_y", ncol= 1, strip.position="right")
# Downregulated plots
# day 0 DOWNREGULATED
GO_d0.DOWN.05.a<-d0.DOWN.05$category[d0.DOWN.05$over_represented_pvalue<.05] # change twice here
GO_d0.DOWN.05<-data.frame(GO_d0.DOWN.05.a)
colnames(GO_d0.DOWN.05) <- c("category")
GO_d0.DOWN.05 <- merge(GO_d0.DOWN.05, d0.DOWN.05, by="category") # change here
GO_d0.DOWN.05 <- GO_d0.DOWN.05[order(-GO_d0.DOWN.05$numDEInCat),]
GO_d0.DOWN.05$term <- as.factor(GO_d0.DOWN.05$term)
d0_DOWN_MF <- GO_d0.DOWN.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd0_DOWN', sep = "_")) %>%
dplyr::filter(ontology %in% ('MF_d0_DOWN'))
d0_DOWN_BP <- GO_d0.DOWN.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd0_DOWN', sep = "_")) %>%
dplyr::filter(ontology %in% ('BP_d0_DOWN'))
# day 7 DOWNREGULATED
GO_d7.DOWN.05.a<-d7.DOWN.05$category[d7.DOWN.05$over_represented_pvalue<.05] # change twice here
GO_d7.DOWN.05<-data.frame(GO_d7.DOWN.05.a)
colnames(GO_d7.DOWN.05) <- c("category")
GO_d7.DOWN.05 <- merge(GO_d7.DOWN.05, d7.DOWN.05, by="category") # change here
GO_d7.DOWN.05 <- GO_d7.DOWN.05[order(-GO_d7.DOWN.05$numDEInCat),]
GO_d7.DOWN.05$term <- as.factor(GO_d7.DOWN.05$term)
d7_DOWN_MF <- GO_d7.DOWN.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd7_DOWN', sep = "_")) %>%
dplyr::filter(ontology %in% ('MF_d7_DOWN'))
d7_DOWN_BP <- GO_d7.DOWN.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd7_DOWN', sep = "_")) %>%
dplyr::filter(ontology %in% ('BP_d7_DOWN'))
# day 14 DOWNREGULATED
GO_d14.DOWN.05.a<-d14.DOWN.05$category[d14.DOWN.05$over_represented_pvalue<.05] # change twice here
GO_d14.DOWN.05<-data.frame(GO_d14.DOWN.05.a)
colnames(GO_d14.DOWN.05) <- c("category")
GO_d14.DOWN.05 <- merge(GO_d14.DOWN.05, d14.DOWN.05, by="category") # change here
GO_d14.DOWN.05 <- GO_d14.DOWN.05[order(-GO_d14.DOWN.05$numDEInCat),]
GO_d14.DOWN.05$term <- as.factor(GO_d14.DOWN.05$term)
d14_DOWN_MF <- GO_d14.DOWN.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd14_DOWN', sep = "_")) %>%
dplyr::filter(ontology %in% ('MF_d14_DOWN'))
d14_DOWN_BP <- GO_d14.DOWN.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd14_DOWN', sep = "_")) %>%
dplyr::filter(ontology %in% ('BP_d14_DOWN'))
# day 21 DOWNREGULATED
GO_d21.DOWN.05.a<-d21.DOWN.05$category[d21.DOWN.05$over_represented_pvalue<.05] # change twice here
GO_d21.DOWN.05<-data.frame(GO_d21.DOWN.05.a)
colnames(GO_d21.DOWN.05) <- c("category")
GO_d21.DOWN.05 <- merge(GO_d21.DOWN.05, d21.DOWN.05, by="category") # change here
GO_d21.DOWN.05 <- GO_d21.DOWN.05[order(-GO_d21.DOWN.05$numDEInCat),]
GO_d21.DOWN.05$term <- as.factor(GO_d21.DOWN.05$term)
d21_DOWN_MF <- GO_d21.DOWN.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd21_DOWN', sep = "_")) %>%
dplyr::filter(ontology %in% ('MF_d21_DOWN'))
d21_DOWN_BP <- GO_d21.DOWN.05 %>%
drop_na(ontology) %>%
mutate(term = fct_reorder(term, (-log10(over_represented_pvalue)) ),
ontology = paste(ontology, 'd21_DOWN', sep = "_")) %>%
dplyr::filter(ontology %in% ('BP_d21_DOWN'))
#======================================================================= #
# bind the rows of MF and BP in the clustered modules (those twith primary treatment effect in same pattern/directionality)
MF_DOWN <- rbind(d0_DOWN_MF, d7_DOWN_MF, d14_DOWN_MF, d21_DOWN_MF)
BP_DOWN <- rbind(d0_DOWN_BP, d7_DOWN_BP, d14_DOWN_BP, d21_DOWN_BP)
MF_DOWN$term <- gsub(",.*$", "", MF_DOWN$term)
MF_DOWN$Day = factor(MF_DOWN$Day, levels = c("Day0", "Day7", "Day14", "Day21"))
MF_DOWN_plot <- MF_DOWN  %>% mutate(term = fct_reorder(term, -log10(over_represented_pvalue))) %>%
#mutate(term = fct_reorder(term, Day)) %>%
ggplot(aes(x=term, y=-log10(over_represented_pvalue))) +
geom_segment( aes(x=term ,xend=term, y=1, yend=-log10(over_represented_pvalue)), color="grey95", size = 3) +
geom_point(size=3, shape = 15, colour = "grey70") +
coord_flip() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="bottom"
) +
xlab("") +
ylab("") +
ggtitle("Molecular Function: Downregulated DEGs Primary Effect (higher by Moderate history)") +
#geom_label(aes(x = 0.5, y = 0.5, label = paste(num_up, "DEGs"))) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) + #Set the plot background #set title attributes
#geom_hline(yintercept=0.25, linetype="dashed",  color = "black", size=2) +
facet_wrap(Day ~., scales="free_y", ncol= 1, strip.position="right")
BP_DOWN$term <- gsub(",.*$", "", BP_DOWN$term)
BP_DOWN$Day = factor(BP_DOWN$Day, levels = c("Day0", "Day7", "Day14", "Day21"))
BP_DOWN_plot <- BP_DOWN    %>%  mutate(term = fct_reorder(term, -log10(over_represented_pvalue))) %>%
#mutate(term = fct_reorder(term, Day)) %>%
ggplot(aes(x=term, y=-log10(over_represented_pvalue))) +
geom_segment( aes(x=term ,xend=term, y=1, yend=-log10(over_represented_pvalue)), color="grey95", size = 3) +
geom_point(size=3, shape = 15, colour = "grey70") +
coord_flip() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="bottom"
) +
xlab("") +
ylab("") +
ggtitle("Biological Process: Downregulated DEGs Primary Effect (higher by Moderate history)") +
#geom_label(aes(x = 0.5, y = 0.5, label = paste(num_up, "DEGs"))) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) + #Set the plot background #set title attributes
#geom_hline(yintercept=0.25, linetype="dashed",  color = "black", size=2) +
facet_wrap(Day ~., scales="free_y", ncol= 1, strip.position="right")
# MOLECULAR FUNCTION GRAPHS OUTPUT
pdf(paste("../Output/GO/DESeq2_goseq/GOplot_DESeq2_PrimEffect_Upregulated_MF.pdf", sep =''), width=10, height=12)
print(ggarrange(MF_UP_plot,
plotlist = NULL,
ncol = 1,
nrow = 1,
labels = NULL))
dev.off()
pdf(paste("../Output/GO/DESeq2_goseq/GOplot_DESeq2_PrimEffect_Downregulated_MF.pdf", sep =''), width=10, height=12)
print(ggarrange(MF_DOWN_plot,
plotlist = NULL,
ncol = 1,
nrow = 1,
labels = NULL))
dev.off()
# BIOLOFICAL PROCESS GRAPHS OUTPUT
pdf(paste("../Output/GO/DESeq2_goseq/GOplot_DESeq2_PrimEffect_Upregulated_BP.pdf", sep =''), width=10, height=18)
print(ggarrange(BP_UP_plot,
plotlist = NULL,
ncol = 1,
nrow = 1,
labels = NULL))
dev.off()
pdf(paste("../Output/GO/DESeq2_goseq/GOplot_DESeq2_PrimEffect_Downregulated_BP.pdf", sep =''), width=10, height=18)
print(ggarrange(BP_DOWN_plot,
plotlist = NULL,
ncol = 1,
nrow = 1,
labels = NULL))
dev.off()
IN R FOUND HERE: (http://yulab-smu.top/clusterProfiler-book/chapter6.html#kegg-over-representation-test)
# LOAD PACKAGES
library(KEGGprofile) # BiocManager::install("KEGGprofile")
library(clusterProfiler)
library(KEGGREST)
library(tidyr)
library(stringr)
library(tidyr)
# SET WORKING DIRECTORY AND LOAD DATA   ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;: #
setwd("C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/")
# Calland prep the reference annotation file...    :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;: #
Geoduck_annotation <- read.delim2(file="C:/Users/samjg/Documents/My_Projects/Pgenerosa_TagSeq_Metabolomics/TagSeq/Seq_details/Panopea-generosa-genes-annotations.txt", header=F)
annot.condenced <- Geoduck_annotation[,c(1,7)] # load just the PGEN ID and the putative gene terms
annot.condenced$Gene_term    <- sub(" \\(EC.*", "", annot.condenced$V7)  # call the gene term BEFORe the EC is listed
Pgen_reference <- na.omit(annot.condenced[c(1,3)]) # ommit unannotated genes
names(Pgen_reference)  <- c('Pgenerosa_Gene_IDs', 'Gene_terms') # rename the columns to merge with the modules below...
# PREPARE THE KEGG  Crassostra gigas (Pacific oyster) genome 'Crass_gigas_genome_dataframe' will be called in the KEGG analysis for loops::::::::::::::::::;: #
# Crassostrea gigas - prep for merge with genes of interest (i.e. genes in modules with significant GO enrichment)
#NOTE: view the Pgenerasa genome - there are no instance of '-like', '-like isoform', '-like protein precursor', 'isoform X', 'precursor' at the end of terms,
Crass_gigas_genome <- keggList("crg") # call the C. gigas genome! - notice the csa terms are rownames!
Crass_gigas_genome_dataframe <- as.data.frame(Crass_gigas_genome) # with will allow us to merge
colnames(Crass_gigas_genome_dataframe)[1] <- 'Gene_terms' # rename the terms to bind with the module of interest
Crass_gigas_genome_dataframe <- tibble::rownames_to_column(Crass_gigas_genome_dataframe, "Cgigas_KEGG_IDs") # tubbel to make th rows a column
Crass_gigas_genome_dataframe$Gene_terms  <- sub(" \\-like isoform|-like precursor|-like protein precursor| precursor| isoform X.*", "", Crass_gigas_genome_dataframe$Gene_terms) # none of the Pgenerosa genome has "isoform X1" as the putative term - remove this and merge to see if this increases mapping efficieny
Crass_gigas_genome_dataframe$Gene_terms  <- sub("-like$","",Crass_gigas_genome_dataframe$Gene_terms) # remove all occurance of "-like" only when they occur at the end of the string using '$' to call 'only at the end of the string
head(Crass_gigas_genome_dataframe) # look at the dataframe, ready to try a merge!
# BIOLOGICAL PROCESS  GO  SLIMS
d7_WGCNA_all   <- read.csv("Analysis/Output/WGCNA/Day7/d7.WGCNA_ModulMembership.csv")
d14_WGCNA_all   <- read.csv("Analysis/Output/WGCNA/Day14/d14.WGCNA_ModulMembership.csv")
d21_WGCNA_all  <- read.csv("Analysis/Output/WGCNA/Day21/d21.WGCNA_ModulMembership.csv")
# Day 21 for loop ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;;; #
Day21_WGCNA_sigmodules <- as.data.frame(c('blue','magenta', 'yellow', 'black', 'pink', 'red', 'turquoise'))
modColor <- Day21_WGCNA_sigmodules[7,1]
# call the module color in the Day 7 data
ModuleLoop <- d21_WGCNA_all %>% dplyr::filter(moduleColor %in% modColor)
genes_per_module <- nrow(ModuleLoop) # use this for the looped print out
# Prep the enriched genes of interest wihtin each module...
#NOTE: the master file contains PGEN gene IDs separated by ';' - each row of PGEN IDs contains all genes associated with signifcant GO terms following  GO enrichment (in 'goseq')
# thus, these genes are called as important due to their GO annotation and significant calls  from functional enrichment analysis
EnrichedGenes <- as.data.frame(ModuleLoop$geneSymbol) # split the genes for the significant goseq enrichment
colnames(EnrichedGenes)[1] <- 'Pgenerosa_Gene_IDs' # rename the single column in this call
EnrichedGenes_2 <- merge(Pgen_reference, EnrichedGenes, by ='Pgenerosa_Gene_IDs') # merge with the Pgen reference (Gene terms before the EC is stated!)
EnrichedGenes_2$Gene_terms    <- sub(" \\(.*", "", EnrichedGenes_2$Gene_terms) # removes all of gene term before the parenthesis
EnrichedGenes_2$Gene_terms    <- sub(" \\[.*", "", EnrichedGenes_2$Gene_terms) # calls al of the string BEFORE an open bracket (in some cases the sttring has just an open bracket without the closed
EnrichedGenes_2$Gene_terms    <- gsub("\\[.*?\\]", "", EnrichedGenes_2$Gene_terms) # now removes all bracketted terms
EnrichedGenes_2$Gene_terms    <- tolower(EnrichedGenes_2$Gene_terms) # convert all to lower case to merge with Cgigas
EnrichedGenes_2 <- unique(EnrichedGenes_2) # call only unique occurances
Pgenerosa_gene_calls <- nrow(EnrichedGenes_2) # total genes called - use this to learn the percent merged with the C.gigas KEGG dataset
# merge and calculate the percent mapping
# Lets merge with the Cgigas genome!
# EnrichedGenes_2$Gene_terms <- gsub("[[]", "", EnrichedGenes_2$Gene_terms) - need to run this for turquoise - an open bracket [ in one of the genes
vector                 <- as.vector(EnrichedGenes_2$Gene_terms) # call the gene term as a vector
vector_with_asserts    <- paste("^", vector, "$", sep='') # assets help to call the exact beginning and end of the gene term in grep1 (exact mtatch!) - otheriwse grep will use an 'in it' like funciton and call any genes that contain the whole term in addition to extra string chracters
EnrichedGenes_Cgigas <- subset(Crass_gigas_genome_dataframe, grepl(paste("^",vector_with_asserts,"$", sep="", collapse= "|"), Gene_terms, ignore.case = TRUE)) # subset the C gigas genome by the common and exact match to gene terms (with sig GO enrichmetn from 'goseq'!) in the module of interest
length(unique(EnrichedGenes_Cgigas$Gene_terms)) # 243 calls
EnrichedGenes_Cgigas_removeduplicates = EnrichedGenes_Cgigas[!duplicated(EnrichedGenes_Cgigas$Gene_terms),]
Cgigas_gene_calls <- nrow(EnrichedGenes_Cgigas_removeduplicates) # total Pgen gens mapped to the Cgigas KEGG genome  - use this to learn the percent merged with the C.gigas KEGG dataset
# calculate the percent mapped and print this...
Percent_mapped <- (Cgigas_gene_calls / Pgenerosa_gene_calls) * 100
print(paste("Day21", modColor, " ", genes_per_module, " genes per module -->", Percent_mapped, "percent mapped to Cgigas KEGG of N =", Pgenerosa_gene_calls, "total genes", sep = ' '))
# Day 21 for loop ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::;;; #
Day21_WGCNA_sigmodules <- as.data.frame(c('blue','magenta', 'yellow', 'black', 'pink', 'red', 'turquoise'))
modColor <- Day21_WGCNA_sigmodules[7,1]
# call the module color in the Day 7 data
ModuleLoop <- d21_WGCNA_all %>% dplyr::filter(moduleColor %in% modColor)
genes_per_module <- nrow(ModuleLoop) # use this for the looped print out
# Prep the enriched genes of interest wihtin each module...
#NOTE: the master file contains PGEN gene IDs separated by ';' - each row of PGEN IDs contains all genes associated with signifcant GO terms following  GO enrichment (in 'goseq')
# thus, these genes are called as important due to their GO annotation and significant calls  from functional enrichment analysis
EnrichedGenes <- as.data.frame(ModuleLoop$geneSymbol) # split the genes for the significant goseq enrichment
colnames(EnrichedGenes)[1] <- 'Pgenerosa_Gene_IDs' # rename the single column in this call
EnrichedGenes_2 <- merge(Pgen_reference, EnrichedGenes, by ='Pgenerosa_Gene_IDs') # merge with the Pgen reference (Gene terms before the EC is stated!)
EnrichedGenes_2$Gene_terms    <- sub(" \\(.*", "", EnrichedGenes_2$Gene_terms) # removes all of gene term before the parenthesis
EnrichedGenes_2$Gene_terms    <- sub(" \\[.*", "", EnrichedGenes_2$Gene_terms) # calls al of the string BEFORE an open bracket (in some cases the sttring has just an open bracket without the closed
EnrichedGenes_2$Gene_terms    <- gsub("\\[.*?\\]", "", EnrichedGenes_2$Gene_terms) # now removes all bracketted terms
EnrichedGenes_2$Gene_terms    <- tolower(EnrichedGenes_2$Gene_terms) # convert all to lower case to merge with Cgigas
EnrichedGenes_2 <- unique(EnrichedGenes_2) # call only unique occurances
Pgenerosa_gene_calls <- nrow(EnrichedGenes_2) # total genes called - use this to learn the percent merged with the C.gigas KEGG dataset
# merge and calculate the percent mapping
# Lets merge with the Cgigas genome!
# EnrichedGenes_2$Gene_terms <- gsub("[[]", "", EnrichedGenes_2$Gene_terms) - need to run this for turquoise - an open bracket [ in one of the genes
vector                 <- as.vector(EnrichedGenes_2$Gene_terms) # call the gene term as a vector
vector_with_asserts    <- paste("^", vector, "$", sep='') # assets help to call the exact beginning and end of the gene term in grep1 (exact mtatch!) - otheriwse grep will use an 'in it' like funciton and call any genes that contain the whole term in addition to extra string chracters
EnrichedGenes_Cgigas <- subset(Crass_gigas_genome_dataframe, grepl(paste("^",vector_with_asserts,"$", sep="", collapse= "|"), Gene_terms, ignore.case = TRUE)) # subset the C gigas genome by the common and exact match to gene terms (with sig GO enrichmetn from 'goseq'!) in the module of interest
length(unique(EnrichedGenes_Cgigas$Gene_terms)) # 243 calls
EnrichedGenes_Cgigas_removeduplicates = EnrichedGenes_Cgigas[!duplicated(EnrichedGenes_Cgigas$Gene_terms),]
Cgigas_gene_calls <- nrow(EnrichedGenes_Cgigas_removeduplicates) # total Pgen gens mapped to the Cgigas KEGG genome  - use this to learn the percent merged with the C.gigas KEGG dataset
# calculate the percent mapped and print this...
Percent_mapped <- (Cgigas_gene_calls / Pgenerosa_gene_calls) * 100
print(paste("Day21", modColor, " ", genes_per_module, " genes per module -->", Percent_mapped, "percent mapped to Cgigas KEGG of N =", Pgenerosa_gene_calls, "total genes", sep = ' '))
modColor <- Day21_WGCNA_sigmodules[7,1]
# call the module color in the Day 7 data
ModuleLoop <- d21_WGCNA_all %>% dplyr::filter(moduleColor %in% modColor)
genes_per_module <- nrow(ModuleLoop) # use this for the looped print out
# Prep the enriched genes of interest wihtin each module...
#NOTE: the master file contains PGEN gene IDs separated by ';' - each row of PGEN IDs contains all genes associated with signifcant GO terms following  GO enrichment (in 'goseq')
# thus, these genes are called as important due to their GO annotation and significant calls  from functional enrichment analysis
EnrichedGenes <- as.data.frame(ModuleLoop$geneSymbol) # split the genes for the significant goseq enrichment
colnames(EnrichedGenes)[1] <- 'Pgenerosa_Gene_IDs' # rename the single column in this call
EnrichedGenes_2 <- merge(Pgen_reference, EnrichedGenes, by ='Pgenerosa_Gene_IDs') # merge with the Pgen reference (Gene terms before the EC is stated!)
EnrichedGenes_2$Gene_terms    <- sub(" \\(.*", "", EnrichedGenes_2$Gene_terms) # removes all of gene term before the parenthesis
EnrichedGenes_2$Gene_terms    <- sub(" \\[.*", "", EnrichedGenes_2$Gene_terms) # calls al of the string BEFORE an open bracket (in some cases the sttring has just an open bracket without the closed
EnrichedGenes_2$Gene_terms    <- gsub("\\[.*?\\]", "", EnrichedGenes_2$Gene_terms) # now removes all bracketted terms
EnrichedGenes_2$Gene_terms    <- tolower(EnrichedGenes_2$Gene_terms) # convert all to lower case to merge with Cgigas
EnrichedGenes_2 <- unique(EnrichedGenes_2) # call only unique occurances
Pgenerosa_gene_calls <- nrow(EnrichedGenes_2) # total genes called - use this to learn the percent merged with the C.gigas KEGG dataset
# merge and calculate the percent mapping
# Lets merge with the Cgigas genome!
EnrichedGenes_2$Gene_terms <- gsub("[[]", "", EnrichedGenes_2$Gene_terms) - need to run this for turquoise - an open bracket [ in one of the genes
vector                 <- as.vector(EnrichedGenes_2$Gene_terms) # call the gene term as a vector
vector_with_asserts    <- paste("^", vector, "$", sep='') # assets help to call the exact beginning and end of the gene term in grep1 (exact mtatch!) - otheriwse grep will use an 'in it' like funciton and call any genes that contain the whole term in addition to extra string chracters
EnrichedGenes_Cgigas <- subset(Crass_gigas_genome_dataframe, grepl(paste("^",vector_with_asserts,"$", sep="", collapse= "|"), Gene_terms, ignore.case = TRUE)) # subset the C gigas genome by the common and exact match to gene terms (with sig GO enrichmetn from 'goseq'!) in the module of interest
length(unique(EnrichedGenes_Cgigas$Gene_terms)) # 243 calls
EnrichedGenes_Cgigas_removeduplicates = EnrichedGenes_Cgigas[!duplicated(EnrichedGenes_Cgigas$Gene_terms),]
Cgigas_gene_calls <- nrow(EnrichedGenes_Cgigas_removeduplicates) # total Pgen gens mapped to the Cgigas KEGG genome  - use this to learn the percent merged with the C.gigas KEGG dataset
# calculate the percent mapped and print this...
Percent_mapped <- (Cgigas_gene_calls / Pgenerosa_gene_calls) * 100
print(paste("Day21", modColor, " ", genes_per_module, " genes per module -->", Percent_mapped, "percent mapped to Cgigas KEGG of N =", Pgenerosa_gene_calls, "total genes", sep = ' '))
# Lets merge with the Cgigas genome!
EnrichedGenes_2$Gene_terms <- gsub("[[]", "", EnrichedGenes_2$Gene_terms) # need to run this for turquoise - an open bracket [ in one of the genes
vector                 <- as.vector(EnrichedGenes_2$Gene_terms) # call the gene term as a vector
vector_with_asserts    <- paste("^", vector, "$", sep='') # assets help to call the exact beginning and end of the gene term in grep1 (exact mtatch!) - otheriwse grep will use an 'in it' like funciton and call any genes that contain the whole term in addition to extra string chracters
EnrichedGenes_Cgigas <- subset(Crass_gigas_genome_dataframe, grepl(paste("^",vector_with_asserts,"$", sep="", collapse= "|"), Gene_terms, ignore.case = TRUE)) # subset the C gigas genome by the common and exact match to gene terms (with sig GO enrichmetn from 'goseq'!) in the module of interest
length(unique(EnrichedGenes_Cgigas$Gene_terms)) # 243 calls
EnrichedGenes_Cgigas_removeduplicates = EnrichedGenes_Cgigas[!duplicated(EnrichedGenes_Cgigas$Gene_terms),]
Cgigas_gene_calls <- nrow(EnrichedGenes_Cgigas_removeduplicates) # total Pgen gens mapped to the Cgigas KEGG genome  - use this to learn the percent merged with the C.gigas KEGG dataset
# calculate the percent mapped and print this...
Percent_mapped <- (Cgigas_gene_calls / Pgenerosa_gene_calls) * 100
print(paste("Day21", modColor, " ", genes_per_module, " genes per module -->", Percent_mapped, "percent mapped to Cgigas KEGG of N =", Pgenerosa_gene_calls, "total genes", sep = ' '))
