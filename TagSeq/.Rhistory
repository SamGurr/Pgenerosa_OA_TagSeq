theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(title = "F1 Scallops: respiration rates 64 DPF)",
x = expression(Respiration~rate~"("~μmol~L^{-1}~O[2]%.%m^{-1}~shell~length%.% hr^{-1}~")"),
y = "Scaled density") +
scale_fill_manual(values=c("grey40", "grey40", "grey85", "grey85"))
ggplot(p.box.data) +
# manually plot flipped boxplot
geom_segment(aes(x = ymin, xend = ymax, y = -0.15, yend = -0.15)) +
geom_rect(aes(xmin = lower, xmax = upper, ymin = -0.3, ymax = 0,  fill = pHxFood),color = "black") +
# geom_point(data = . %>% unnest(outliers), aes(x = outliers, y = -0.15), color = "grey60", size = 1) +
# vertical lines at Q1 / Q2 / Q3
geom_vline(data = . %>% select(pHxFood, lower, mean, upper) %>% gather(key, value, -pHxFood), aes(xintercept = value)) +
# density plot
geom_density(data = Resp_0930, aes(x = resp_µmol_L_m_Length_hr, group=pHxFood, fill=pHxFood, ..scaled..), alpha=.4, adjust=1.5) +
#  theme
theme_classic() +
facet_grid(pHxFood ~ .) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(title = "F1 Scallops: respiration rates 64 DPF)",
x = expression(Respiration~rate~"("~μmol~L^{-1}~O[2]%.%m^{-1}~shell~length%.% hr^{-1}~")"),
y = "Scaled density") +
scale_fill_manual(values=c("grey40", "grey40", "grey85", "grey85"))
denisty_box_resp_64DPF <-ggplot(p.box.data) +
# manually plot flipped boxplot
geom_segment(aes(x = ymin, xend = ymax, y = -0.15, yend = -0.15)) +
geom_rect(aes(xmin = lower, xmax = upper, ymin = -0.3, ymax = 0,  fill = pHxFood),color = "black") +
# geom_point(data = . %>% unnest(outliers), aes(x = outliers, y = -0.15), color = "grey60", size = 1) +
# vertical lines at Q1 / Q2 / Q3
geom_vline(data = . %>% select(pHxFood, lower, mean, upper) %>% gather(key, value, -pHxFood), aes(xintercept = value)) +
# density plot
geom_density(data = Resp_0930, aes(x = resp_µmol_L_m_Length_hr, group=pHxFood, fill=pHxFood, ..scaled..), alpha=.4, adjust=1.5) +
#  theme
theme_classic() +
xlim(0, 0.2)
denisty_box_resp_64DPF <-ggplot(p.box.data) +
# manually plot flipped boxplot
geom_segment(aes(x = ymin, xend = ymax, y = -0.15, yend = -0.15)) +
geom_rect(aes(xmin = lower, xmax = upper, ymin = -0.3, ymax = 0,  fill = pHxFood),color = "black") +
# geom_point(data = . %>% unnest(outliers), aes(x = outliers, y = -0.15), color = "grey60", size = 1) +
# vertical lines at Q1 / Q2 / Q3
geom_vline(data = . %>% select(pHxFood, lower, mean, upper) %>% gather(key, value, -pHxFood), aes(xintercept = value)) +
# density plot
geom_density(data = Resp_0930, aes(x = resp_µmol_L_m_Length_hr, group=pHxFood, fill=pHxFood, ..scaled..), alpha=.4, adjust=1.5) +
#  theme
theme_classic() +
xlim(0, 0.2) +
facet_grid(pHxFood ~ .) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(title = "F1 Scallops: respiration rates 64 DPF)",
x = expression(Respiration~rate~"("~μmol~L^{-1}~O[2]%.%m^{-1}~shell~length%.% hr^{-1}~")"),
y = "Scaled density") +
scale_fill_manual(values=c("grey40", "grey40", "grey85", "grey85"))
denisty_box_resp_64DPF
denisty_box_resp_64DPF <-ggplot(p.box.data) +
# manually plot flipped boxplot
geom_segment(aes(x = ymin, xend = ymax, y = -0.15, yend = -0.15)) +
geom_rect(aes(xmin = lower, xmax = upper, ymin = -0.3, ymax = 0,  fill = pHxFood),color = "black") +
# geom_point(data = . %>% unnest(outliers), aes(x = outliers, y = -0.15), color = "grey60", size = 1) +
# vertical lines at Q1 / Q2 / Q3
geom_vline(data = . %>% select(pHxFood, lower, mean, upper) %>% gather(key, value, -pHxFood), aes(xintercept = value)) +
# density plot
geom_density(data = Resp_0930, aes(x = resp_µmol_L_m_Length_hr, group=pHxFood, fill=pHxFood, ..scaled..), alpha=.4, adjust=1.5) +
#  theme
theme_classic() +
xlim(0, 0.22) +
facet_grid(pHxFood ~ .) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(title = "F1 Scallops: respiration rates 64 DPF)",
x = expression(Respiration~rate~"("~μmol~L^{-1}~O[2]%.%m^{-1}~shell~length%.% hr^{-1}~")"),
y = "Scaled density") +
scale_fill_manual(values=c("grey40", "grey40", "grey85", "grey85"))
denisty_box_resp_64DPF
denisty_box_resp_64DPF <-ggplot(p.box.data) +
# manually plot flipped boxplot
geom_segment(aes(x = ymin, xend = ymax, y = -0.15, yend = -0.15)) +
geom_rect(aes(xmin = lower, xmax = upper, ymin = -0.3, ymax = 0,  fill = pHxFood),color = "black") +
# geom_point(data = . %>% unnest(outliers), aes(x = outliers, y = -0.15), color = "grey60", size = 1) +
# vertical lines at Q1 / Q2 / Q3
geom_vline(data = . %>% select(pHxFood, lower, mean, upper) %>% gather(key, value, -pHxFood), aes(xintercept = value)) +
# density plot
geom_density(data = Resp_0930, aes(x = resp_µmol_L_m_Length_hr, group=pHxFood, fill=pHxFood, ..scaled..), alpha=.4, adjust=1.5) +
#  theme
theme_classic() +
xlim(0.05, 0.22) +
facet_grid(pHxFood ~ .) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(title = "F1 Scallops: respiration rates 64 DPF)",
x = expression(Respiration~rate~"("~μmol~L^{-1}~O[2]%.%m^{-1}~shell~length%.% hr^{-1}~")"),
y = "Scaled density") +
scale_fill_manual(values=c("grey40", "grey40", "grey85", "grey85"))
denisty_box_resp_64DPF
denisty_box_resp_64DPF <-ggplot(p.box.data) +
# manually plot flipped boxplot
geom_segment(aes(x = ymin, xend = ymax, y = -0.15, yend = -0.15)) +
geom_rect(aes(xmin = lower, xmax = upper, ymin = -0.3, ymax = 0,  fill = pHxFood),color = "black") +
# geom_point(data = . %>% unnest(outliers), aes(x = outliers, y = -0.15), color = "grey60", size = 1) +
# vertical lines at Q1 / Q2 / Q3
geom_vline(data = . %>% select(pHxFood, lower, mean, upper) %>% gather(key, value, -pHxFood), aes(xintercept = value)) +
# density plot
geom_density(data = Resp_0930, aes(x = resp_µmol_L_m_Length_hr, group=pHxFood, fill=pHxFood, ..scaled..), alpha=.4, adjust=1.5) +
#  theme
theme_classic() +
xlim(0, 0.22) +
facet_grid(pHxFood ~ .) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(title = "F1 Scallops: respiration rates 64 DPF)",
x = expression(Respiration~rate~"("~μmol~L^{-1}~O[2]%.%m^{-1}~shell~length%.% hr^{-1}~")"),
y = "Scaled density") +
scale_fill_manual(values=c("grey40", "grey40", "grey85", "grey85"))
denisty_box_resp_64DPF
pdf(paste0(filename = "C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Respiration/20210930_figs_tables/20210930_resp_density_plot.pdf"), width = 5, height = 5)
pdf(paste0(filename = "C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Respiration/20210930_figs_tables/20210930_resp_density_plot.pdf"), width = 5, height = 5)
denisty_box_resp_64DPF # print the model diagnostics
dev.off()
LMEmod_0930_SL<-lme(resp_µmol_L_mm_Length_hr ~ pCO2 * Food, random=~1|Chamber_tank, data=Resp_0930)
LMEmod_0930_SL<-lm(resp_µmol_L_mm_Length_hr ~ pCO2 * Food, data=Resp_0930)
# |     &nbsp;      | numDF | denDF | F-value  | p-value |
# |:---------------:|:-----:|:-----:|:--------:|:-------:|
# | **(Intercept)** |   1   |  63   |  515.6   |    0    |
# |    **pCO2**     |   1   |   6   |  3.792   | 0.09943 |
# |    **Food**     |   1   |  63   |  4.029   | 0.04901 |
# |  **pCO2:Food**  |   1   |  63   | 0.009658 |  0.922  |
pander(anova(LMEmod_0930_SL), style='rmarkdown')
LMEmod_0930_SL<-lm(resp_µmol_L_mm_Length_hr ~ pCO2 * Food, random=~1|Chamber_tank, data=Resp_0930)
# |     &nbsp;      | numDF | denDF | F-value  | p-value |
# |:---------------:|:-----:|:-----:|:--------:|:-------:|
# | **(Intercept)** |   1   |  63   |  515.6   |    0    |
# |    **pCO2**     |   1   |   6   |  3.792   | 0.09943 |
# |    **Food**     |   1   |  63   |  4.029   | 0.04901 |
# |  **pCO2:Food**  |   1   |  63   | 0.009658 |  0.922  |
pander(anova(LMEmod_0930_SL), style='rmarkdown')
LMEmod_0930_SL<-lm(resp_µmol_L_mm_Length_hr ~ pCO2 * Food, random=~1|Chamber_tank, data=Resp_0930)
# |     &nbsp;      | numDF | denDF | F-value  | p-value |
# |:---------------:|:-----:|:-----:|:--------:|:-------:|
# | **(Intercept)** |   1   |  63   |  515.6   |    0    |
# |    **pCO2**     |   1   |   6   |  3.792   | 0.09943 |
# |    **Food**     |   1   |  63   |  4.029   | 0.04901 |
# |  **pCO2:Food**  |   1   |  63   | 0.009658 |  0.922  |
pander(anova(LMEmod_0930_SL), style='rmarkdown')
# |     &nbsp;      | numDF | denDF | F-value  | p-value |
# |:---------------:|:-----:|:-----:|:--------:|:-------:|
# | **(Intercept)** |   1   |  63   |  515.6   |    0    |
# |    **pCO2**     |   1   |   6   |  3.792   | 0.09943 |
# |    **Food**     |   1   |  63   |  4.029   | 0.04901 |
# |  **pCO2:Food**  |   1   |  63   | 0.009658 |  0.922  |
pander(anova(LMEmod_0930_SL), style='rmarkdown')
LMEmod_0930_SL<-lm(resp_µmol_L_mm_Length_hr ~ pCO2 * Food, data=Resp_0930)
# |     &nbsp;      | numDF | denDF | F-value  | p-value |
# |:---------------:|:-----:|:-----:|:--------:|:-------:|
# | **(Intercept)** |   1   |  63   |  515.6   |    0    |
# |    **pCO2**     |   1   |   6   |  3.792   | 0.09943 |
# |    **Food**     |   1   |  63   |  4.029   | 0.04901 |
# |  **pCO2:Food**  |   1   |  63   | 0.009658 |  0.922  |
pander(anova(LMEmod_0930_SL), style='rmarkdown')
# Linear mixed effects model with random effect of Replicate
LMEmod_0930_SL<-lme(resp_µmol_L_mm_Length_hr ~ pCO2 * Food, random=~1|Chamber_tank, data=Resp_0930)
# |     &nbsp;      | numDF | denDF | F-value  | p-value |
# |:---------------:|:-----:|:-----:|:--------:|:-------:|
# | **(Intercept)** |   1   |  63   |  515.6   |    0    |
# |    **pCO2**     |   1   |   6   |  3.792   | 0.09943 |
# |    **Food**     |   1   |  63   |  4.029   | 0.04901 |
# |  **pCO2:Food**  |   1   |  63   | 0.009658 |  0.922  |
pander(anova(LMEmod_0930_SL), style='rmarkdown')
Resp_0930
# Linear mixed effects model with random effect of Replicate
LMEmod_0930_SL<-lme(resp_µmol_L_mm_Length_hr ~ pCO2 * Food, random=~pCO2|Replicate, data=Resp_0930)
# |     &nbsp;      | numDF | denDF | F-value  | p-value |
# |:---------------:|:-----:|:-----:|:--------:|:-------:|
# | **(Intercept)** |   1   |  63   |  515.6   |    0    |
# |    **pCO2**     |   1   |   6   |  3.792   | 0.09943 |
# |    **Food**     |   1   |  63   |  4.029   | 0.04901 |
# |  **pCO2:Food**  |   1   |  63   | 0.009658 |  0.922  |
pander(anova(LMEmod_0930_SL), style='rmarkdown')
# Linear mixed effects model with random effect of Replicate
LMEmod_0930_SL<-lme(resp_µmol_L_mm_Length_hr ~ pCO2 * Food, random=~pCO2:Food|Replicate, data=Resp_0930) # replicate is labeled A, B , C, D for each pCO2 treatment (although different tanks!) you can next
# |     &nbsp;      | numDF | denDF | F-value  | p-value |
# |:---------------:|:-----:|:-----:|:--------:|:-------:|
# | **(Intercept)** |   1   |  63   |  515.6   |    0    |
# |    **pCO2**     |   1   |   6   |  3.792   | 0.09943 |
# |    **Food**     |   1   |  63   |  4.029   | 0.04901 |
# |  **pCO2:Food**  |   1   |  63   | 0.009658 |  0.922  |
pander(anova(LMEmod_0930_SL), style='rmarkdown')
Resp_0930
# Linear mixed effects model with random effect of Replicate
LMEmod_0930_SL<-lme(resp_µmol_L_mm_Length_hr ~ pCO2 * Food, random=~pCO2+Food|Replicate, data=Resp_0930) # replicate is labeled A, B , C, D for each pCO2 treatment (although different tanks!) you can next
Resp_0930 %>% dplyr::group_by(Chamber_tank, Food ) %>% dplyr::summarise(n()) # tank replication
Resp_0930
Resp_0930$random_fact <- as.factor(paste(Resp_0930$Chamber_tank, Resp_0930$Food, sep="_"))
# Linear mixed effects model with random effect of Replicate
LMEmod_0930_SL<-lme(resp_µmol_L_mm_Length_hr ~ pCO2 * Food, random=~1|random_fact, data=Resp_0930) # replicate is labeled A, B , C, D for each pCO2 treatment (although different tanks!) you can next
# |     &nbsp;      | numDF | denDF | F-value  | p-value |
# |:---------------:|:-----:|:-----:|:--------:|:-------:|
# | **(Intercept)** |   1   |  63   |  515.6   |    0    |
# |    **pCO2**     |   1   |   6   |  3.792   | 0.09943 |
# |    **Food**     |   1   |  63   |  4.029   | 0.04901 |
# |  **pCO2:Food**  |   1   |  63   | 0.009658 |  0.922  |
pander(anova(LMEmod_0930_SL), style='rmarkdown')
Resp_0930$random_fact
Resp_0930$random_fact <- as.factor(paste(Resp_0930$Chamber_tank, Resp_0930$Food, sep="_"))
# Linear mixed effects model with random effect of Replicate
Resp_0930$random_fact <- as.factor(paste(Resp_0930$Chamber_tank, Resp_0930$Food, sep="_"))
LMEmod_0930_SL<-lme(resp_µmol_L_mm_Length_hr ~ pCO2 * Food, random=~1|random_fact, data=Resp_0930)
# |     &nbsp;      | numDF | denDF | F-value  | p-value |
# |:---------------:|:-----:|:-----:|:--------:|:-------:|
# | **(Intercept)** |   1   |  63   |  515.6   |    0    |
# |    **pCO2**     |   1   |   6   |  3.792   | 0.09943 |
# |    **Food**     |   1   |  63   |  4.029   | 0.04901 |
# |  **pCO2:Food**  |   1   |  63   | 0.009658 |  0.922  |
pander(anova(LMEmod_0930_SL), style='rmarkdown')
kable(as.data.frame(anova(LMEmod_0930_SL))) %>%
kable_styling() %>%
save_kable(file = "C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Respiration/20210930_figs_tables/20210930_resp_LME_Table.png", zoom = 1.5)
pdf(paste0(filename = "C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Respiration/20210930_figs_tables/20210930_resp_LME_Diagnostics.pdf"))
check_model(LMEmod_0930_SL)
check_model(LMEmod_0930_SL)
dev.off()
# |     &nbsp;      | numDF | denDF | F-value  | p-value |
# |:---------------:|:-----:|:-----:|:--------:|:-------:|
# | **(Intercept)** |   1   |  63   |  515.6   |    0    |
# |    **pCO2**     |   1   |   6   |  3.792   | 0.09943 |
# |    **Food**     |   1   |  63   |  4.029   | 0.04901 |
# |  **pCO2:Food**  |   1   |  63   | 0.009658 |  0.922  |
pander(anova(LMEmod_0930_SL), style='rmarkdown')
# plot
Resp930_Length <- ggplot(Resp_0930, aes(x = factor(pCO2, level = c('500 μatm', '800 μatm')), resp_µmol_L_mm_Length_hr , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, width=0.5, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("white","grey50")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
scale_x_discrete(labels= c('~500 μatm', '~800 μatm')) +
#scale_y_continuous(expand = c(0, 0), limits = c(0, 120)) +
theme(axis.text=element_text(size=8),
axis.title=element_text(size=8,face="bold")) +
labs(title = "F1 Scallops: respiration rates on 20210930 (shell length stand.)",
y = expression(Respiration~rate~"("~μmol~L^{-1}~O[2]%.%m^{-1}~shell~length%.% hr^{-1}~")"),
x = expression(italic(p)*CO[2]~Treatment~"("~μ*atm~")"))  +
stat_summary(fun.y=mean, geom="point", shape=18, size=4, color="black", fill="white") +
facet_wrap(~factor(Fed_Unfed, level = c('Low food', 'High food')))
Resp930_Length
# Visualize the data with the random effet as treplicate
Resp_1026$pHxFood <- paste(Resp_1026$pH, Resp_1026$Food, sep = "_")
Res1026_Length_reps <- ggboxplot(Resp_1026, x = "pHxFood", y = "resp_µmol_L_mm_Length_hr", color = "Replicate",
add = c("mean_se", "dotplot"),
palette = c("#00AFBB", "#E7B800", "brown", "grey"))
Resp_1026 <- Resp.Master_OM %>%
dplyr::filter(Date %in% '10/26/2021')  %>% # call only 10/14
dplyr::select(-Center)
Resp_1026 %>% dplyr::group_by(Chamber_tank, Food ) %>% dplyr::summarise(n()) # tank replication
Resp_1026 <- Resp.Master_OM %>%
dplyr::filter(Date %in% '10/26/2021')  %>% # call only 10/14
dplyr::select(-Center)
Resp_1026 %>% dplyr::group_by(Chamber_tank, Food ) %>% dplyr::summarise(n()) # tank replication
Resp_1026 %>% summarySE(measurevar="resp_µmol_L_m_Length_hr", groupvars=(c("Food","pH"))) %>%
dplyr::mutate(pCO2 = case_when(pH == 8  ~ "500 μatm", pH == 7.5 ~ "800 μatm"))
# Visualize the data with the random effet as treplicate
Resp_1026$pHxFood <- paste(Resp_1026$pH, Resp_1026$Food, sep = "_")
Res1026_Length_reps <- ggboxplot(Resp_1026, x = "pHxFood", y = "resp_µmol_L_mm_Length_hr", color = "Replicate",
add = c("mean_se", "dotplot"),
palette = c("#00AFBB", "#E7B800", "brown", "grey"))
# Linear mixed effects model with random effect of Replicate
Resp_1026$random_fact <- as.factor(paste(Resp_1026$Chamber_tank, Resp_1026$Food, sep="_"))
LMEmod_1026_SL<-lme(resp_µmol_L_mm_Length_hr ~ pCO2 * Food, random=~1|random_fact, data=Resp_1026)
# |     &nbsp;      | numDF | denDF | F-value |  p-value  |
# |:---------------:|:-----:|:-----:|:-------:|:---------:|
# | **(Intercept)** |   1   |  24   |  765.4  |     0     |
# |    **pCO2**     |   1   |   6   |  32.19  | 0.001291  |
# |    **Food**     |   1   |  24   |  347.3  | 8.882e-16 |
# |  **pCO2:Food**  |   1   |  24   |  19.92  | 0.0001628 |
pander(anova(LMEmod_1026_SL), style='rmarkdown')
# |     &nbsp;      | numDF | denDF | F-value |  p-value  |
# |:---------------:|:-----:|:-----:|:-------:|:---------:|
# | **(Intercept)** |   1   |  18   |  765.4  | 3.331e-16 |
# |    **pCO2**     |   1   |  12   |  32.19  | 0.0001033 |
# |    **Food**     |   1   |  12   |  347.3  | 3.176e-10 |
# |  **pCO2:Food**  |   1   |  12   |  19.92  | 0.0007755 |
pander(anova(LMEmod_1026_SL), style='rmarkdown')
Resp_1026 <- Resp.Master_OM %>%
dplyr::filter(Date %in% '10/26/2021')  %>% # call only 10/14
dplyr::select(-Center) %>%
dplyr::mutate(pHxFood = paste(pH,Food, sep = "_")) %>%
dplyr::mutate(random_fact = as.factor(paste(Resp_1026$Chamber_tank, Resp_1026$Food, sep="_")))
Resp_1026 %>% dplyr::group_by(Chamber_tank, Food ) %>% dplyr::summarise(n()) # tank replication
Resp_1026 %>% summarySE(measurevar="resp_µmol_L_m_Length_hr", groupvars=(c("Food","pH"))) %>%
dplyr::mutate(pCO2 = case_when(pH == 8  ~ "500 μatm", pH == 7.5 ~ "800 μatm"))
Resp_1026 %>% dplyr::group_by(random_fact) %>% dplyr::summarise(n()) # tank replication
Resp_1026 %>% summarySE(measurevar="resp_µmol_L_m_Length_hr", groupvars=(c("Food","pH"))) %>%
dplyr::mutate(pCO2 = case_when(pH == 8  ~ "500 μatm", pH == 7.5 ~ "800 μatm"))
# Visualize the data with the random effet as treplicate
Res1026_Length_reps <- ggboxplot(Resp_1026, x = "pHxFood", y = "resp_µmol_L_mm_Length_hr", color = "Replicate",
add = c("mean_se", "dotplot"),
palette = c("#00AFBB", "#E7B800", "brown", "grey"))
Res1026_Length_reps
# Linear mixed effects model with random effect of Replicate
LMEmod_1026_SL<-lme(resp_µmol_L_mm_Length_hr ~ pCO2 * Food, random=~1|random_fact, data=Resp_1026)
# |     &nbsp;      | numDF | denDF | F-value |  p-value  |
# |:---------------:|:-----:|:-----:|:-------:|:---------:|
# | **(Intercept)** |   1   |  18   |  765.4  | 3.331e-16 |
# |    **pCO2**     |   1   |  12   |  32.19  | 0.0001033 |
# |    **Food**     |   1   |  12   |  347.3  | 3.176e-10 |
# |  **pCO2:Food**  |   1   |  12   |  19.92  | 0.0007755 |
pander(anova(LMEmod_1026_SL), style='rmarkdown')
kable(as.data.frame(anova(LMEmod_1026_SL))) %>%
kable_styling() %>%
save_kable(file = "C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Respiration/20211026_figs_tables/20211026_resp_LME_Table.png", zoom = 1.5)
pdf(paste0(filename = "C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Respiration/20211026_figs_tables/20211026_resp_LME_Diagnostics.pdf"))
check_model(LMEmod_1026_SL)
dev.off()
pdf(paste0(filename = "C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Respiration/20211026_figs_tables/20211026_resp_LME_Diagnostics.pdf"))
check_model(LMEmod_1026_SL)
dev.off()
# |     &nbsp;      | numDF | denDF | F-value |  p-value  |
# |:---------------:|:-----:|:-----:|:-------:|:---------:|
# | **(Intercept)** |   1   |  18   |  765.4  | 3.331e-16 |
# |    **pCO2**     |   1   |  12   |  32.19  | 0.0001033 |
# |    **Food**     |   1   |  12   |  347.3  | 3.176e-10 |
# |  **pCO2:Food**  |   1   |  12   |  19.92  | 0.0007755 |
pander(anova(LMEmod_1026_SL), style='rmarkdown')
# |     &nbsp;      | numDF | denDF | F-value |  p-value  |
# |:---------------:|:-----:|:-----:|:-------:|:---------:|
# | **(Intercept)** |   1   |  18   |  765.4  | 3.331e-16 |
# |    **pCO2**     |   1   |  12   |  32.19  | 0.0001033 |
# |    **Food**     |   1   |  12   |  347.3  | 3.176e-10 |
# |  **pCO2:Food**  |   1   |  12   |  19.92  | 0.0007755 |
pander(anova(LMEmod_1026_SL), style='rmarkdown')
# Linear mixed effects model with random effect of Replicate
LMEmod_1026_SL<-lme(resp_µmol_L_mm_Length_hr ~ pCO2 * Food, random=~1|random_fact, data=Resp_1026)
# |     &nbsp;      | numDF | denDF | F-value |  p-value  |
# |:---------------:|:-----:|:-----:|:-------:|:---------:|
# | **(Intercept)** |   1   |  18   |  765.4  | 3.331e-16 |
# |    **pCO2**     |   1   |  12   |  32.19  | 0.0001033 |
# |    **Food**     |   1   |  12   |  347.3  | 3.176e-10 |
# |  **pCO2:Food**  |   1   |  12   |  19.92  | 0.0007755 |
pander(anova(LMEmod_1026_SL), style='rmarkdown')
lsmeans(LMEmod_1026_SL, pairwise~pCO2 * Food, adjust="tukey") # Compute least-squares means
check_model(LMEmod_1026_SL)
check_model(LMEmod_1026_SL)
dev.off()
# tukey posthoc for lmer model
require('lsmeans')
lsmeans(LMEmod_1026_SL, pairwise~pCO2 * Food, adjust="tukey") # Compute least-squares means
Resp_0930 <- Resp.Master_OM %>%
dplyr::filter(Date %in% '9/30/2021')  %>% # call only 9/14
dplyr::select(-Center) %>%
dplyr::mutate(pHxFood = paste(pH,Food, sep = "_")) %>%
dplyr::mutate(random_fact = as.factor(paste(Resp_1026$Chamber_tank, Resp_1026$Food, sep="_")))
Resp_0930 <- Resp.Master_OM %>%
dplyr::filter(Date %in% '9/30/2021')  %>% # call only 9/14
dplyr::select(-Center) %>%
dplyr::mutate(pHxFood = paste(pH,Food, sep = "_")) %>%
dplyr::mutate(random_fact = as.factor(paste(Chamber_tank, Food, sep="_")))
# Visualize the data with the random effet as treplicate
Resp930_Length_reps <- ggboxplot(Resp_0930, x = "pHxFood", y = "resp_µmol_L_mm_Length_hr", color = "Replicate",
add = c("mean_se", "dotplot"),
palette = c("#00AFBB", "#E7B800", "brown", "grey"))
Resp930_Length_reps
# Linear mixed effects model with random effect of Replicate
LMEmod_0930_SL<-lme(resp_µmol_L_mm_Length_hr ~ pCO2 * Food, random=~1|random_fact, data=Resp_0930)
# |     &nbsp;      | numDF | denDF | F-value | p-value |
# |:---------------:|:-----:|:-----:|:-------:|:-------:|
# | **(Intercept)** |   1   |  57   |  560.5  |    0    |
# |    **pCO2**     |   1   |  12   |  4.064  | 0.06677 |
# |    **Food**     |   1   |  12   |  3.663  | 0.07977 |
# |  **pCO2:Food**  |   1   |  12   | 0.01109 | 0.9179  |
pander(anova(LMEmod_0930_SL), style='rmarkdown')
# Linear mixed effects model with random effect of Replicate
LMEmod_0930_SL<-lme(resp_µmol_L_mm_Length_hr ~ pCO2 * Food, random=~1|random_fact, data=Resp_0930)
# |     &nbsp;      | numDF | denDF | F-value | p-value |
# |:---------------:|:-----:|:-----:|:-------:|:-------:|
# | **(Intercept)** |   1   |  57   |  560.5  |    0    |
# |    **pCO2**     |   1   |  12   |  4.064  | 0.06677 |
# |    **Food**     |   1   |  12   |  3.663  | 0.07977 |
# |  **pCO2:Food**  |   1   |  12   | 0.01109 | 0.9179  |
pander(anova(LMEmod_0930_SL), style='rmarkdown')
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_OA/RAnalysis") # Work computer
# setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis") # Work computer
length                     <-read.csv(file="C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Data/Survival_Size/Lengths_50DPF_92DPF.csv", header = TRUE)
len.dryweight.CI_1026      <-read.csv(file="C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Data/Survival_Size/20211026_lengths_dryweights.csv", header = TRUE)
len.dryweight.CI_1202      <-read.csv(file="C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Data/Survival_Size/20211202_lengths_dryweights.csv", header = TRUE)
survival_juvenile          <-read.csv(file="C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Data/Survival_Size/Survival_50DPF_92DPF.csv", header = TRUE)
# Structure of the data - to check that variables are properly assigned to factor or variable
# str(length)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(car)
library(nlme)
library(multcompView)
library(agricolae)
library(Rmisc)
library(lmerTest)
library(lme4)
library(pander)
library(performance)
library(Rmisc)
library(maditr)
library(reshape2)
library(kableExtra)
library(ggpubr)
library(dplyr)
library(tidyr)
# setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis") # Work computer
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis") # Work computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_OA/RAnalysis") # Work computer
# setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis") # Work computer
length                     <-read.csv(file="C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Data/Survival_Size/Lengths_50DPF_92DPF.csv", header = TRUE)
len.dryweight.CI_1026      <-read.csv(file="C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Data/Survival_Size/20211026_lengths_dryweights.csv", header = TRUE)
len.dryweight.CI_1202      <-read.csv(file="C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Data/Survival_Size/20211202_lengths_dryweights.csv", header = TRUE)
survival_juvenile          <-read.csv(file="C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Data/Survival_Size/Survival_50DPF_92DPF.csv", header = TRUE)
# Structure of the data - to check that variables are properly assigned to factor or variable
# str(length)
# using lmer
library(lme4)
library(lmerTest)
# using lme
library(nlme)
library(car)
# call the data fro 50 DPF
data_51 <- length %>%
filter(Age_DPF=="51") %>%
dplyr::mutate(pCO2 = case_when(pH == 8 ~ "500 μatm",  pH == 7.5 ~ "800 μatm")) %>%
dplyr::mutate(Fed_Unfed = case_when(Fed_Unfed == "fed" ~ "High food",  Fed_Unfed == "unfed" ~ "Low food"))
data_51
# call the data fro 50 DPF
data_51 <- length %>%
filter(Age_DPF=="51") %>%
dplyr::mutate(pCO2 = case_when(pH == 8 ~ "500 μatm",  pH == 7.5 ~ "800 μatm")) %>%
dplyr::mutate(Fed_Unfed = case_when(Fed_Unfed == "fed" ~ "High food",  Fed_Unfed == "unfed" ~ "Low food")) %>%
dplyr::mutate(random_fact = ad.factor(paste(pCO2,Replicate, Fed_Unfed, sep = "_")))
# call the data fro 50 DPF
data_51 <- length %>%
filter(Age_DPF=="51") %>%
dplyr::mutate(pCO2 = case_when(pH == 8 ~ "500 μatm",  pH == 7.5 ~ "800 μatm")) %>%
dplyr::mutate(Fed_Unfed = case_when(Fed_Unfed == "fed" ~ "High food",  Fed_Unfed == "unfed" ~ "Low food")) %>%
dplyr::mutate(random_fact = as.factor(paste(pCO2,Replicate, Fed_Unfed, sep = "_")))
# call the data fro 50 DPF
data_51 <- length %>%
filter(Age_DPF=="51") %>%
dplyr::mutate(pCO2 = case_when(pH == 8 ~ "500 μatm",  pH == 7.5 ~ "800 μatm")) %>%
dplyr::mutate(Fed_Unfed = case_when(Fed_Unfed == "fed" ~ "High food",  Fed_Unfed == "unfed" ~ "Low food")) %>%
dplyr::mutate(random_fact = as.factor(paste(pCO2,Replicate, Fed_Unfed, sep = "_")))
data_51_AVG <- data_51 %>%  summarySE(measurevar="Length_um", groupvars= "pCO2")
data_51_AVG
# Linear mixed effects model with random effect of Replicate
ShellLengthMod_D51 = lme(Length_um ~ pCO2, random=~1|random_fact,data=data_51)
# output the model results
# |     &nbsp;      | numDF | denDF | F-value | p-value |
# |:---------------:|:-----:|:-----:|:-------:|:-------:|
# | **(Intercept)** |   1   |  629  |  1097   |    0    |
# |    **pCO2**     |   1   |   6   |  0.233  | 0.6464  |
pander(anova(ShellLengthMod_D51), style='rmarkdown') # anova table of lmer
data_51
# call the data fro 50 DPF
data_51 <- length %>%
filter(Age_DPF=="51") %>%
dplyr::mutate(pCO2 = case_when(pH == 8 ~ "500 μatm",  pH == 7.5 ~ "800 μatm")) %>%
dplyr::mutate(Fed_Unfed = case_when(Fed_Unfed == "fed" ~ "High food",  Fed_Unfed == "unfed" ~ "Low food")) %>%
dplyr::mutate(random_fact = as.factor(paste(pCO2,Replicate, sep = "_")))
# Linear mixed effects model with random effect of Replicate
ShellLengthMod_D51 = lme(Length_um ~ pCO2, random=~1|random_fact,data=data_51)
# output the model results
# |     &nbsp;      | numDF | denDF | F-value | p-value |
# |:---------------:|:-----:|:-----:|:-------:|:-------:|
# | **(Intercept)** |   1   |  629  |  1097   |    0    |
# |    **pCO2**     |   1   |   6   |  0.233  | 0.6464  |
pander(anova(ShellLengthMod_D51), style='rmarkdown') # anova table of lmer
# length data
data_64_length <- length %>%
filter(Age_DPF=="64") %>%
dplyr::mutate(pCO2 = case_when(pH == 8 ~ "500 μatm",  pH == 7.5 ~ "800 μatm")) %>%
dplyr::mutate(Fed_Unfed = case_when(Fed_Unfed == "fed" ~ "High food",  Fed_Unfed == "unfed" ~ "Low food")) %>%
dplyr::mutate(random_fact = as.factor(paste(pCO2,Replicate,Fed_Unfed, sep = "_")))
# Survival data
data_64_survival <- survival_juvenile %>%
dplyr::filter(Age_DPF=="64") %>%
dplyr::mutate(Fed_Unfed = as.factor(Food)) %>%
dplyr::mutate(pCO2 = as.factor(gsub("^(?:[^_]+_){1}([^_]+).*", "\\1", trt))) %>%
dplyr::rename(Length_um = Length) %>%
dplyr::mutate(random_fact = as.factor(paste(pCO2,Replicate,Fed_Unfed, sep = "_")))
# Survival data
data_64_survival <- survival_juvenile %>%
dplyr::filter(Age_DPF=="64") %>%
dplyr::mutate(Fed_Unfed = as.factor(Food)) %>%
dplyr::mutate(pCO2 = as.factor(gsub("^(?:[^_]+_){1}([^_]+).*", "\\1", trt))) %>%
dplyr::rename(Length_um = Length) %>%
dplyr::mutate(random_fact = as.factor(paste(pCO2,Rep,Fed_Unfed, sep = "_")))
levels(data_64_survival$Fed_Unfed) <- c("High food", "Low food")
levels(data_64_survival$pCO2) <- c("800 μatm", "500 μatm")
# Length:::::::::::::::::::::::::::::::::::::::::::::::
ShellLengthMod_D64 = lme(Length_um ~ pCO2 * Fed_Unfed, random=~1|random_fact,data=data_64_length)
---
# title: "WGCNA_frontloaded_genes.R"
# author: "Samuel Gurr"
# date: "January 8, 2021"
---
# LOAD PACKAGES
library(WGCNA) # note: this was previously installed with the command `BiocManager::install("WGCNA")`
library(dplyr)
library(tidyr)
library(tidyverse)
# SET WORKING DIRECTORY AND LOAD DATA
setwd("C:/Users/samjg/Documents/Github_repositories/Pgenerosa_TagSeq_Metabolomics/TagSeq/")
# LOAD DATA
annot = read.delim2(file = "Seq_details/Panopea-generosa-genes-annotations.txt",header = F);
PgenID_Gene <- annot %>% dplyr::select(c('V1', 'V7')) %>% dplyr::rename(Pgen_ID = V1) %>% dplyr::rename(gene = V7)
day7.ModMem   <- read.csv(file="Analysis/Output/WGCNA/subseq_treatments_all/Day7/d7.WGCNA_ModulMembership.csv", sep=',', header=TRUE)   %>%  dplyr::rename(Pgen_ID = X) %>%  mutate(Pgen_ID = as.character(Pgen_ID)) %>%  dplyr::select(c('Pgen_ID','moduleColor'))
day14.ModMem  <- read.csv(file="Analysis/Output/WGCNA/subseq_treatments_all/Day14/d14.WGCNA_ModulMembership.csv", sep=',', header=TRUE)  %>%  dplyr::rename(Pgen_ID = X) %>%  mutate(Pgen_ID = as.character(Pgen_ID)) %>%  dplyr::select(c('Pgen_ID','moduleColor'))
day21.ModMem  <- read.csv(file="Analysis/Output/WGCNA/subseq_treatments_all/Day21/d21.WGCNA_ModulMembership.csv", sep=',', header=TRUE)  %>%  dplyr::rename(Pgen_ID = X) %>%  mutate(Pgen_ID = as.character(Pgen_ID)) %>%  dplyr::select(c('Pgen_ID','moduleColor'))
# (1) Preexposed_modules # modules with higher expression by preexposed/acclimate/stress-primed animals (relative to naive animals)
day7.yellow   <- day7.ModMem %>% dplyr::filter(moduleColor %in% 'yellow')  %>% dplyr::mutate(day ='Day7')
day14.black   <- day14.ModMem %>% dplyr::filter(moduleColor %in% 'black')  %>% dplyr::mutate(day ='Day14')
day21.yellow  <- day21.ModMem %>% dplyr::filter(moduleColor %in% 'yellow') %>% dplyr::mutate(day ='Day21')
