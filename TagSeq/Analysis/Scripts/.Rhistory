d21.DOWN_BPslim <- mappedIds(d21.DOWN_slims_bp, d21.DOWN_BP_GO_collection, GOBPOFFSPRING)
d21.DOWN_MFslim <- mappedIds(d21.DOWN_slims_mf, d21.DOWN_MF_GO_collection, GOMFOFFSPRING)
# all
All.UP_BPslim <- mappedIds(All.UP_slims_bp, All.UP_BP_GO_collection, GOBPOFFSPRING)
All.UP_MFslim <- mappedIds(All.UP_slims_mf, All.UP_MF_GO_collection, GOMFOFFSPRING)
All.DOWN_BPslim <- mappedIds(All.DOWN_slims_bp, All.DOWN_BP_GO_collection, GOBPOFFSPRING)
All.DOWN_MFslim <- mappedIds(All.DOWN_slims_mf, All.DOWN_MF_GO_collection, GOMFOFFSPRING)
#BP
All.UP_BPslim <- filter(All.UP_BPslim, Count>0 & Term!="biological_process") #filter out empty slims and term "biological process"
head(All.UP_BPslim)
BPsplitted <- strsplit(as.character(All.UP_BPslim$go_terms), ";") #split into multiple GO ids
#BP
All.UP_BPslim <- filter(All.UP_BPslim, Count>0 & Term!="biological_process") #filter out empty slims and term "biological process"
head(All.UP_BPslim)
BPsplitted <- strsplit(as.character(All.UP_BPslim$go_terms), ";") #split into multiple GO ids
BPsplitted
All.UP_BPslimX <- data.frame(Term = rep.int(All.UP_BPslim$Term, sapply(BPsplitted, length)), go_term = unlist(BPsplitted)) #list all
All.UP_BPslimX
All.UP_BPslim[,c(1,3:4)]
All.UP_BPslimX <- merge(All.UP_BPslimX, All.UP_BPslim[,c(1,3:4)], by="Term") #Add back counts, term, and category info
All.UP_BPslimX
#BP
All.UP_BPslim <- filter(All.UP_BPslim, Count>0 & Term!="biological_process") #filter out empty slims and term "biological process"
BPsplitted <- strsplit(as.character(All.UP_BPslim$go_terms), ";") #split into multiple GO ids
All.UP_BPslimX <- data.frame(Term = rep.int(All.UP_BPslim$Term, sapply(BPsplitted, length)), go_term = unlist(BPsplitted)) #list all
View(All.UP_BPslimX)
View(All.UP_BPslimX)
View(All.UP_BPslimX)
View(All.UP_BPslimX)
All.UP_BPslimX
All.UP_BPslimX <- merge(All.UP_BPslimX, All.UP_BPslim[,c(1,3:4)], by="Term") #Add back counts, term, and category info
All.UP_BPslimX
MFslimX <- merge(MFslimX, MFslim[,c(1,3:4)], by="Term")  #Add back counts, term, and category info
All.UP_BPslimX <- merge(All.UP_BPslimX, All.UP_BPslim[,c(1,3:4)], by="Term") #Add back counts, term, and category info
All.UP_BPslimX
#BP
All.UP_BPslim <- filter(All.UP_BPslim, Count>0 & Term!="biological_process") #filter out empty slims and term "biological process"
BPsplitted <- strsplit(as.character(All.UP_BPslim$go_terms), ";") #split into multiple GO ids
All.UP_BPslimX <- data.frame(Term = rep.int(All.UP_BPslim$Term, sapply(BPsplitted, length)), go_term = unlist(BPsplitted)) #list all
All.UP_BPslimX <- merge(All.UP_BPslimX, All.UP_BPslim[,c(1,3:4)], by="Term") #Add back counts, term, and category info
All.UP_BPslimX
All.UP_BPslim[,c(1,3:4)]
m
All.UP_BPslimX <- unique(setDT(All.UP_BPslimX)[order(go_term, -Count)], by = "go_term") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
library(data.table)
All.UP_BPslimX <- unique(setDT(All.UP_BPslimX)[order(go_term, -Count)], by = "go_term") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
All.UP_BPslimX
All.UP_BPslim <- data.frame(slim_term=All.UP_BPslimX$Term, slim_cat=All.UP_BPslimX$category, category=All.UP_BPslimX$go_term) #rename columns
head(All.UP_BPslim)
All.UP_BPslimX <- unique(setDT(All.UP_BPslimX)[order(go_term, -Count)], by = "go_term") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
All.UP_BPslimX
All.UP_BPslimX <- All.UP_BPslimX %>%  dplyr::filter(Count > 5)
All.UP_BPslimX
All.UP_BPslimX <- All.UP_BPslimX %>%  dplyr::filter(Count > 5) # THRESHOLD FOR CATEGORY COUNTS (num of GO terms within each to call the slim downstream)
All.UP_BPslim <- data.frame(slim_term=All.UP_BPslimX$Term, slim_cat=All.UP_BPslimX$category, category=All.UP_BPslimX$go_term) #rename columns
head(All.UP_BPslim)
All.UP_MFslim <- filter(All.UP_MFslim, Count>0 & Term!="molecular_function") #filter out empty slims and term "molecular function"
MFsplitted <- strsplit(as.character(All.UP_MFslim$go_terms), ";") #split into multiple GO ids
All.UP_MFslimX <- data.frame(Term = rep.int(All.UP_MFslim$Term, sapply(MFsplitted, length)), go_term = unlist(MFsplitted)) #list all - add total count for each term in 'Count'
All.UP_MFslimX <- merge(All.UP_MFslimX, All.UP_MFslim[,c(1,3:4)], by="Term")  #Add back counts, term, and category info
All.UP_MFslimX <- unique(setDT(All.UP_MFslimX)[order(go_term, -Count)], by = "go_term")  #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
All.UP_MFslimX <- All.UP_MFslimX %>%  dplyr::filter(Count > 2) # THRESHOLD FOR CATEGORY COUNTS (num of GO terms within each to call the slim downstream)
All.UP_MFslim <- data.frame(slim_term=All.UP_MFslimX$Term, slim_cat=All.UP_MFslimX$category, category=All.UP_MFslimX$go_term) #rename columns
head(All.UP_MFslim)
All.UP_MFslimX
All.UP_MFslim <- filter(All.UP_MFslim, Count>0 & Term!="molecular_function") #filter out empty slims and term "molecular function"
All.UP_MFslim <- filter(All.UP_MFslim, Count>0 & Term!="molecular_function") #filter out empty slims and term "molecular function"
#MF
All.UP_MFslim <- filter(All.UP_MFslim, Count>0 & Term!="molecular_function") #filter out empty slims and term "molecular function"
All.UP_MFslim
MFsplitted <- strsplit(as.character(All.UP_MFslim$go_terms), ";") #split into multiple GO ids
All.UP_MFslimX <- data.frame(Term = rep.int(All.UP_MFslim$Term, sapply(MFsplitted, length)), go_term = unlist(MFsplitted)) #list all - add total count for each term in 'Count'
All.UP_MFslim
All.UP_MFslimX <- merge(All.UP_MFslimX, All.UP_MFslim[,c(1,3:4)], by="Term")  #Add back counts, term, and category info
All.UP_MFslimX <- unique(setDT(All.UP_MFslimX)[order(go_term, -Count)], by = "go_term")  #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
All.UP_MFslimX
All.UP_MFslim
All.UP_MFslim <- mappedIds(All.UP_slims_mf, All.UP_MF_GO_collection, GOMFOFFSPRING)
#MF
All.UP_MFslim <- filter(All.UP_MFslim, Count>0 & Term!="molecular_function") #filter out empty slims and term "molecular function"
MFsplitted <- strsplit(as.character(All.UP_MFslim$go_terms), ";") #split into multiple GO ids
All.UP_MFslimX <- data.frame(Term = rep.int(All.UP_MFslim$Term, sapply(MFsplitted, length)), go_term = unlist(MFsplitted)) #list all - add total count for each term in 'Count'
All.UP_MFslimX <- merge(All.UP_MFslimX, All.UP_MFslim[,c(1,3:4)], by="Term")  #Add back counts, term, and category info
All.UP_MFslimX <- unique(setDT(All.UP_MFslimX)[order(go_term, -Count)], by = "go_term")  #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
All.UP_MFslimX
All.UP_MFslimX <- All.UP_MFslimX %>%  dplyr::filter(Count > 2) # THRESHOLD FOR CATEGORY COUNTS (num of GO terms within each to call the slim downstream)
All.UP_MFslim <- data.frame(slim_term=All.UP_MFslimX$Term, slim_cat=All.UP_MFslimX$category, category=All.UP_MFslimX$go_term) #rename columns
head(All.UP_MFslim)
All.UP_MFslimX
ALL_Upreg_GO.BP <- right_join(All.UP_BPslim, filter(all.UP.05, ontology=="BP"), by="category") #add back GO enrichment info for each offspring term
ALL_Upreg_GO.MF <- right_join(All.UP_MFslim, filter(all.UP.05, ontology=="MF"), by="category") #add back GO enrichment info for each offspring term
ALL_Upreg_GO.BP
BPplot <- ALL_Upreg_GO.BP %>% filter(numInCat>5) %>% ggplot(aes(x = dir, y = term)) +
geom_tile(aes(fill=over_represented_pvalue, width = 1)) +
facet_grid(slim_term ~ ontology, scales = "free_y", labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 11, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=15),
axis.text = element_text(size = 12), legend.position = "None",
plot.margin = unit(c(0,1,0,0.25), "cm"))
BPplot
BPplot <- ALL_Upreg_GO.BP %>% filter(numInCat>5) %>% ggplot(aes(x = dir, y = term)) +
geom_tile(aes(fill=over_represented_pvalue, width = 1)) +
facet_grid(slim_term ~ ontology, scales = "free_y", labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 11, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=15),
axis.text = element_text(size = 12), legend.position = "None",
plot.margin = unit(c(0,1,0,0.25), "cm"))
ggsave("../Output/GO/goseq/All.PrimaryEffect.Upreg_BP.pdf", GO.plot_d14.Primary, width = 21, height = 21, units = c("in"))
BPplot <- ALL_Upreg_GO.BP %>% filter(numInCat>5) %>% ggplot(aes(x = dir, y = term)) +
geom_tile(aes(fill=over_represented_pvalue, width = 1)) +
facet_grid(slim_term ~ ontology, scales = "free_y", labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 11, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=15),
axis.text = element_text(size = 12), legend.position = "None",
plot.margin = unit(c(0,1,0,0.25), "cm"))
ggsave("../Output/GO/goseq/All.PrimaryEffect.Upreg_BP.pdf", BPplot, width = 25, height = 35, units = c("in"))
MFplot <- ALL_Upreg_GO.MF %>% filter(numInCat>5) %>% ggplot(aes(x = dir, y = term)) +
geom_tile(aes(fill=over_represented_pvalue, width = 1)) +
facet_grid(slim_term ~ ontology, scales = "free_y", labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 11, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=15),
axis.text = element_text(size = 12), legend.position = "None",
plot.margin = unit(c(0,1,0,0.25), "cm"))
ggsave("../Output/GO/goseq/All.PrimaryEffect.Upreg_MF.pdf", MFplot, width = 25, height = 35, units = c("in"))
ALL_Upreg_GO.BP
#MF
All.UP_MFslim <- filter(All.UP_MFslim, Count>0 & Term!="molecular_function") #filter out empty slims and term "molecular function"
head(All.UP_MFslim)
all.UP.05
View(ALL_Upreg_GO.BP)
View(all.UP.05)
All.UP_BPslim
all.UP.05
all.UP.05X <- all.UP.05 %>%  dplyr::filter(!dir)
all.UP.05X <- all.UP.05 %>%  dplyr::select(!dir)
all.UP.05X
ALL_Upreg_GO.BP <- right_join(All.UP_BPslim, filter(all.UP.05X, ontology=="BP"), by="category") #add back GO enrichment info for each offspring term
View(ALL_Upreg_GO.BP)
BPplot <- ALL_Upreg_GO.BP %>% filter(numInCat>1) %>% ggplot(aes(x = dir, y = term)) +
geom_tile(aes(fill=over_represented_pvalue, width = 1)) +
facet_grid(slim_term ~ ontology, scales = "free_y", labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 11, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=15),
axis.text = element_text(size = 12), legend.position = "None",
plot.margin = unit(c(0,1,0,0.25), "cm"))
ggsave("../Output/GO/goseq/All.PrimaryEffect.Upreg_BP.pdf", BPplot, width = 25, height = 35, units = c("in"))
ggsave("../Output/GO/goseq/All.PrimaryEffect.Upreg_BP.pdf", BPplot, width = 25, height = 35, units = c("in"))
BPplot <- ALL_Upreg_GO.BP %>% filter(numInCat>5) %>% ggplot(aes(x = dir, y = term)) +
geom_tile(aes(fill=over_represented_pvalue, width = 1)) +
facet_grid(slim_term ~ ontology, scales = "free_y", labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 11, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=15),
axis.text = element_text(size = 12), legend.position = "None",
plot.margin = unit(c(0,1,0,0.25), "cm"))
ggsave("../Output/GO/goseq/All.PrimaryEffect.Upreg_BP.pdf", BPplot, width = 25, height = 35, units = c("in"))
BPplot
all.UP.05X <- all.UP.05 %>%  dplyr::select(!dir)
ALL_Upreg_GO.BP <- right_join(All.UP_BPslim, filter(all.UP.05X, ontology=="BP"), by="category") #add back GO enrichment info for each offspring term
View(ALL_Upreg_GO.BP)
View(all.UP.05)
ALL_Upreg_GO.MF <- right_join(All.UP_MFslim, filter(all.UP.05, ontology=="MF"), by="category") #add back GO enrichment info for each offspring term
ALL_Upreg_GO.BP <- right_join(All.UP_BPslim, filter(all.UP.05, ontology=="BP"), by="category") #add back GO enrichment info for each offspring term
View(ALL_Upreg_GO.BP)
View(all.UP.05)
ALL_Upreg_GO.MF <- right_join(All.UP_MFslim, filter(all.UP.05, ontology=="MF"), by="category") #add back GO enrichment info for each offspring term
BPplot <- ALL_Upreg_GO.BP %>% filter(numInCat>1) %>% ggplot(aes(x = dir, y = term)) +
geom_tile(aes(fill=over_represented_pvalue, width = 1)) +
facet_grid(slim_term ~ ontology, scales = "free_y", labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 11, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=15),
axis.text = element_text(size = 12), legend.position = "None",
plot.margin = unit(c(0,1,0,0.25), "cm"))
ggsave("../Output/GO/goseq/All.PrimaryEffect.Upreg_BP.pdf", BPplot, width = 25, height = 35, units = c("in"))
ggsave("../Output/GO/goseq/All.PrimaryEffect.Upreg_BP.pdf", BPplot, width = 25, height = 50, units = c("in"))
BPplot <- ALL_Upreg_GO.BP %>% filter(numInCat>1) %>% ggplot(aes(x = dir, y = term)) +
geom_tile(aes(fill=over_represented_pvalue, width = 1)) +
facet_grid(slim_term ~ ontology, scales = "free_y", labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 11, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=15),
axis.text = element_text(size = 12), legend.position = "None",
plot.margin = unit(c(0,1,0,0.25), "cm"))
ggsave("../Output/GO/goseq/All.PrimaryEffect.Upreg_BP.pdf", BPplot, width = 25, height = 50, units = c("in"))
ggsave("../Output/GO/goseq/All.PrimaryEffect.Upreg_BP.pdf", BPplot, width = 25, height = 50, units = c("in"))
ggsave("../Output/GO/goseq/All.PrimaryEffect.Upreg_BP.pdf", BPplot, width = 25, height = 45, units = c("in"))
ALL_Upreg_GO.BP
BPplot <- ALL_Upreg_GO.BP %>% filter(numInCat>5) %>% ggplot(aes(x = dir, y = term)) +
geom_tile(aes(fill=over_represented_pvalue, width = 1)) +
facet_grid(slim_term ~ ontology, scales = "free_y", labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 11, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=15),
axis.text = element_text(size = 12), legend.position = "None",
plot.margin = unit(c(0,1,0,0.25), "cm"))
ggsave("../Output/GO/goseq/All.PrimaryEffect.Upreg_BP.pdf", BPplot, width = 25, height = 45, units = c("in"))
MFplot <- ALL_Upreg_GO.MF %>% filter(numInCat>5) %>% ggplot(aes(x = dir, y = term)) +
geom_tile(aes(fill=over_represented_pvalue, width = 1)) +
facet_grid(slim_term ~ ontology, scales = "free_y", labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 11, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=15),
axis.text = element_text(size = 12), legend.position = "None",
plot.margin = unit(c(0,1,0,0.25), "cm"))
ggsave("../Output/GO/goseq/All.PrimaryEffect.Upreg_MF.pdf", MFplot, width = 25, height = 35, units = c("in"))
all.UP.05
ALL_Upreg_GO.BP
ALL_Upreg_GO.BP
ALL_Upreg_GO.BP
All.UP_MFslimX
ALL_Upreg_GO.BP
-
# DAY 14
# Upregulated
Day14_BPplot <- d7.UP_BPslim %>% filter(numInCat>5) %>% ggplot(aes(x = dir, y = term)) +
geom_tile(aes(fill=over_represented_pvalue, width = 1)) +
facet_grid(slim_term ~ ontology, scales = "free_y", labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 11, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=15),
axis.text = element_text(size = 12), legend.position = "None",
plot.margin = unit(c(0,1,0,0.25), "cm"))
d7.UP_BPslim
# DAY 14
# Upregulated
Day14_BPplot <- d7.UP_BPslim %>% filter(numInCat>5) %>% ggplot(aes(x = dir, y = term)) +
geom_tile(aes(fill=over_represented_pvalue, width = 1)) +
facet_grid(slim_term ~ ontology, scales = "free_y", labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 11, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=15),
axis.text = element_text(size = 12), legend.position = "None",
plot.margin = unit(c(0,1,0,0.25), "cm"))
d7.UP_BPslim
d14.UP.05
d14.UPred_GO.BP <- right_join(d14.UP_BPslim, filter(d14.UP.05, ontology=="BP"), by="category") #add back GO enrichment info for each offspring term
d14.UPred_GO.BP
d14.UP_BPslim
d14.Upreg_GO.BP <- right_join(d14.UP_BPslim, filter(d14.UP.05, ontology=="BP"), by="category") #add back GO enrichment info for each offspring term
d14.Upreg_GO.BP
d14.Upreg_GO.MF <- right_join(d14.UP_MFslim, filter(d14.UP.05, ontology=="MF"), by="category") #add back GO enrichment info for each offspring term
d14.Upreg_GO.MF
d14.UP.05
d14.UP_MFslim
d14.UP.05
d14.UP_MFslim
d14.Upreg_GO.MF
ALL_Upreg_GO.MF
All.UP_MFslim
all.UP.05
d14.UP_MFslim
all.UP.05
ALL_Upreg_GO.BP
d14.UP_BPslim
d14.UP.05
d14.UP_BPslim
d14.UP.05
# all
All.UP_BPslim <- mappedIds(All.UP_slims_bp, All.UP_BP_GO_collection, GOBPOFFSPRING)
All.UP_MFslim <- mappedIds(All.UP_slims_mf, All.UP_MF_GO_collection, GOMFOFFSPRING)
All.DOWN_BPslim <- mappedIds(All.DOWN_slims_bp, All.DOWN_BP_GO_collection, GOBPOFFSPRING)
All.DOWN_MFslim <- mappedIds(All.DOWN_slims_mf, All.DOWN_MF_GO_collection, GOMFOFFSPRING)
#BP
All.UP_BPslim <- filter(All.UP_BPslim, Count>0 & Term!="biological_process") #filter out empty slims and term "biological process"
BPsplitted <- strsplit(as.character(All.UP_BPslim$go_terms), ";") #split into multiple GO ids
All.UP_BPslimX <- data.frame(Term = rep.int(All.UP_BPslim$Term, sapply(BPsplitted, length)), go_term = unlist(BPsplitted)) #list all
All.UP_BPslimX
All.UP_BPslimX <- merge(All.UP_BPslimX, All.UP_BPslim[,c(1,3:4)], by="Term") #Add back counts, term, and category info
All.UP_BPslimX
All.UP_BPslim
All.UP_BPslimX
All.UP_BPslim
All.UP_BPslimX <- merge(All.UP_BPslimX, All.UP_BPslim[,c(1,3:4)], by="Term") #Add back counts, term, and category info
All.UP_BPslimX
All.UP_BPslim <- mappedIds(All.UP_slims_bp, All.UP_BP_GO_collection, GOBPOFFSPRING)
All.UP_MFslim <- mappedIds(All.UP_slims_mf, All.UP_MF_GO_collection, GOMFOFFSPRING)
All.DOWN_BPslim <- mappedIds(All.DOWN_slims_bp, All.DOWN_BP_GO_collection, GOBPOFFSPRING)
All.DOWN_MFslim <- mappedIds(All.DOWN_slims_mf, All.DOWN_MF_GO_collection, GOMFOFFSPRING)
#BP
All.UP_BPslim <- filter(All.UP_BPslim, Count>0 & Term!="biological_process") #filter out empty slims and term "biological process"
BPsplitted <- strsplit(as.character(All.UP_BPslim$go_terms), ";") #split into multiple GO ids
All.UP_BPslimX <- data.frame(Term = rep.int(All.UP_BPslim$Term, sapply(BPsplitted, length)), go_term = unlist(BPsplitted)) #list all
All.UP_BPslimX <- merge(All.UP_BPslimX, All.UP_BPslim[,c(1,3:4)], by="Term") #Add back counts, term, and category info
All.UP_BPslimX
All.UP_BPslimX <- unique(setDT(All.UP_BPslimX)[order(go_term, -Count)], by = "go_term") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
All.UP_BPslimX <- All.UP_BPslimX %>%  dplyr::filter(Count > 5) # THRESHOLD FOR CATEGORY COUNTS (num of GO terms within each to call the slim downstream)
All.UP_BPslimX
All.UP_BPslim <- data.frame(slim_term=All.UP_BPslimX$Term, slim_cat=All.UP_BPslimX$category, category=All.UP_BPslimX$go_term) #rename columns
View(All.UP_BPslim)
View(All.UP_BPslimX)
All.UP_BPslim <- data.frame(slim_term=All.UP_BPslimX$Term, slim_cat=All.UP_BPslimX$category, category=All.UP_BPslimX$go_term, Count=All.UP_BPslimX$Count) #rename columns
View(All.UP_BPslim)
All.UP_BPslim
All.UP_BPslim <- mappedIds(All.UP_slims_bp, All.UP_BP_GO_collection, GOBPOFFSPRING)
All.UP_MFslim <- mappedIds(All.UP_slims_mf, All.UP_MF_GO_collection, GOMFOFFSPRING)
All.DOWN_BPslim <- mappedIds(All.DOWN_slims_bp, All.DOWN_BP_GO_collection, GOBPOFFSPRING)
All.DOWN_MFslim <- mappedIds(All.DOWN_slims_mf, All.DOWN_MF_GO_collection, GOMFOFFSPRING)
#BP
All.UP_BPslim <- filter(All.UP_BPslim, Count>0 & Term!="biological_process") #filter out empty slims and term "biological process"
BPsplitted <- strsplit(as.character(All.UP_BPslim$go_terms), ";") #split into multiple GO ids
All.UP_BPslimX <- data.frame(Term = rep.int(All.UP_BPslim$Term, sapply(BPsplitted, length)), go_term = unlist(BPsplitted)) #list all
All.UP_BPslimX <- merge(All.UP_BPslimX, All.UP_BPslim[,c(1,3:4)], by="Term") #Add back counts, term, and category info
All.UP_BPslimX
All.UP_BPslimX <- unique(setDT(All.UP_BPslimX)[order(go_term, Count)], by = "Count") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
All.UP_BPslimX
All.UP_BPslimX <- All.UP_BPslimX %>%  dplyr::filter(Count > 5) # THRESHOLD FOR CATEGORY COUNTS (num of GO terms within each to call the slim downstream)
All.UP_BPslimX
All.UP_BPslim <- data.frame(slim_term=All.UP_BPslimX$Term, slim_cat=All.UP_BPslimX$category, category=All.UP_BPslimX$go_term, Count=All.UP_BPslimX$Count) #rename columns
All.UP_BPslim
All.UP_BPslimX
All.UP_BPslim
All.UP_MFslim <- filter(All.UP_MFslim, Count>0 & Term!="molecular_function") #filter out empty slims and term "molecular function"
MFsplitted <- strsplit(as.character(All.UP_MFslim$go_terms), ";") #split into multiple GO ids
All.UP_MFslimX <- data.frame(Term = rep.int(All.UP_MFslim$Term, sapply(MFsplitted, length)), go_term = unlist(MFsplitted)) #list all - add total count for each term in 'Count'
All.UP_MFslimX <- merge(All.UP_MFslimX, All.UP_MFslim[,c(1,3:4)], by="Term")  #Add back counts, term, and category info
All.UP_MFslimX <- unique(setDT(All.UP_MFslimX)[order(go_term, Count)], by = "Count")  #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
All.UP_MFslimX <- All.UP_MFslimX %>%  dplyr::filter(Count > 2) # THRESHOLD FOR CATEGORY COUNTS (num of GO terms within each to call the slim downstream)
All.UP_MFslim <- data.frame(slim_term=All.UP_MFslimX$Term, slim_cat=All.UP_MFslimX$category, category=All.UP_MFslimX$go_term, Count=All.UP_MFslimX$Count) #rename columns
head(All.UP_MFslim)
All.UP_MFslimX
All.UP_BPslim
All.UP_MFslim
All.UP_BPslim <- mappedIds(All.UP_slims_bp, All.UP_BP_GO_collection, GOBPOFFSPRING)
All.UP_MFslim <- mappedIds(All.UP_slims_mf, All.UP_MF_GO_collection, GOMFOFFSPRING)
All.DOWN_BPslim <- mappedIds(All.DOWN_slims_bp, All.DOWN_BP_GO_collection, GOBPOFFSPRING)
All.DOWN_MFslim <- mappedIds(All.DOWN_slims_mf, All.DOWN_MF_GO_collection, GOMFOFFSPRING)
#BP
All.UP_BPslim <- filter(All.UP_BPslim, Count>0 & Term!="biological_process") #filter out empty slims and term "biological process"
All.UP_BPslim
#BP
All.UP_BPslim <- filter(All.UP_BPslim, Count>5 & Term!="biological_process") #filter out empty slims and term "biological process"
BPsplitted <- strsplit(as.character(All.UP_BPslim$go_terms), ";") #split into multiple GO ids
All.UP_BPslimX <- data.frame(Term = rep.int(All.UP_BPslim$Term, sapply(BPsplitted, length)), go_term = unlist(BPsplitted)) #list all
All.UP_BPslimX <- merge(All.UP_BPslimX, All.UP_BPslim[,c(1,3:4)], by="Term") #Add back counts, term, and category info
All.UP_BPslimX <- unique(setDT(All.UP_BPslimX)[order(go_term, Count)], by = "Count") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
All.UP_BPslimX
All.UP_BPslim_final <- data.frame(slim_term=All.UP_BPslimX$Term, slim_cat=All.UP_BPslimX$category, category=All.UP_BPslimX$go_term, Count=All.UP_BPslimX$Count) #rename columns
View(All.UP_BPslim_final)
View(All.UP_BPslim)
#MF
All.UP_MFslim <- filter(All.UP_MFslim, Count>2 & Term!="molecular_function") #filter out empty slims and term "molecular function"
MFsplitted <- strsplit(as.character(All.UP_MFslim$go_terms), ";") #split into multiple GO ids
All.UP_MFslimX <- data.frame(Term = rep.int(All.UP_MFslim$Term, sapply(MFsplitted, length)), go_term = unlist(MFsplitted)) #list all - add total count for each term in 'Count'
All.UP_MFslimX <- merge(All.UP_MFslimX, All.UP_MFslim[,c(1,3:4)], by="Term")  #Add back counts, term, and category info
All.UP_MFslimX <- unique(setDT(All.UP_MFslimX)[order(go_term, Count)], by = "Count")  #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
All.UP_MFslim_final <- data.frame(slim_term=All.UP_MFslimX$Term, slim_cat=All.UP_MFslimX$category, category=All.UP_MFslimX$go_term, Count=All.UP_MFslimX$Count) #rename columns
head(All.UP_MFslim_final)
ALL_Upreg_GO.BP <- right_join(All.UP_BPslim, filter(all.UP.05, ontology=="BP"), by="category") #add back GO enrichment info for each offspring term
ALL_Upreg_GO.MF <- right_join(All.UP_MFslim, filter(all.UP.05, ontology=="MF"), by="category") #add back GO enrichment info for each offspring term
ALL_Upreg_GO.BP
ALL_Upreg_GO.MF
All.UP_MFslim_final <- data.frame(slim_term=All.UP_MFslimX$term, slim_cat=All.UP_MFslimX$category, category=All.UP_MFslimX$go_term, Count=All.UP_MFslimX$Count) #rename columns
All.UP_MFslim_final <- data.frame(slim_term=All.UP_MFslimX$Term, slim_cat=All.UP_MFslimX$category, category=All.UP_MFslimX$go_term, Count=All.UP_MFslimX$Count) #rename columns
head(All.UP_MFslim_final)
ALL_Upreg_GO.BP <- right_join(All.UP_BPslim_final, filter(all.UP.05, ontology=="BP"), by="category") #add back GO enrichment info for each offspring term
ALL_Upreg_GO.BP
all.UP.05
all.UP.05
d21.DOWN.05
All.DOWN_slims_mf
All.UP_BPslim
All.UP_BP_GO_collection
All.UP_slims_bp
All.UP_BPslim
All.UP_MF_GO_collection
d14.DOWN_BP_GO_collection
d14.DOWN_MF_GO_collection
d21.UP_BP_GO_collection
d21.UP_MF_GO_collection
d21.UP_slims_bp
d21.UP_slims_mf
d14.UP_BP_GO_collection
d7.DOWN_BP_GO_collection
d7.DOWN_MF_GO_collection
d0.UP_BP_GO_collection
d0.UP_MF_GO_collection
d0.DOWN_BP_GO_collection
d0.DOWN_MF_GO_collection
All.UP_BP_GO_collection
d21.UP_BP_GO_collection
d14.UP_BP_GO_collection
d7.UP_BP_GO_collection
All.UP_BPslim
All.UP_MFslim
All.DOWN_BPslim
All.UP_BPslim
All.DOWN_BPslim
All.DOWN_MFslim
All.UP_MFslim
All.UP_slims_bp
mapped
View(All.UP_BPslim_final)
head(All.UP_MFslim_final)
All.UP_BPslim
All.UP_MFslim
All.UP_MFslim
All.UP_MFslim_final
ALL_Upreg_GO.MF
filter(all.UP.05, ontology=="BP")
All.UP_BPslim_final
All.UP_MFslim_final
All.UP_MFslim
All.UP_MFslim
All.UP_BP_GO_collection
All.UP_slims_bp
All.UP_BPslim
# all
All.UP_BPslim <- mappedIds(All.UP_slims_bp, All.UP_BP_GO_collection, GOBPOFFSPRING)
All.UP_BPslim
All.UP_BP_GO_collection
All.UP_BPslim
All.UP_BPslim_final
ALL_Upreg_GO.BP
All_BPplot <- All.UP_BPslim_final %>%
# filter(numInCat>5) %>%
ggplot(aes(x = dir, y = term)) +
geom_tile(aes(fill=over_represented_pvalue, width = 1)) +
facet_grid(slim_term ~ ontology, scales = "free_y", labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 11, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=15),
axis.text = element_text(size = 12), legend.position = "None",
plot.margin = unit(c(0,1,0,0.25), "cm"))
All_BPplot
All.UP_BPslim_final
ALL_Upreg_GO.BP <- right_join(All.UP_BPslim_final, filter(all.UP.05, ontology=="BP"), by="category") #add back GO enrichment info for each offspring term
ALL_Upreg_GO.BP
ALL_Upreg_GO.BP <- na.omit(ALL_Upreg_GO.BP)
ALL_Upreg_GO.BP
All_BPplot <- ALL_Upreg_GO.BP %>%
# filter(numInCat>5) %>%
ggplot(aes(x = dir, y = term)) +
geom_tile(aes(fill=over_represented_pvalue, width = 1)) +
facet_grid(slim_term ~ ontology, scales = "free_y", labeller = label_wrap_gen(width = 10, multi_line = TRUE))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
strip.text.y = element_text(angle=0, size = 11, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=15),
axis.text = element_text(size = 12), legend.position = "None",
plot.margin = unit(c(0,1,0,0.25), "cm"))
All_BPplot
ggsave("../Output/GO/goseq/All.PrimaryEffect.Upreg_MF.pdf", All_MFplot, width = 25, height = 35, units = c("in"))
ggsave("../Output/GO/goseq/All.PrimaryEffect.Upreg_BP.pdf", All_BPplot, width = 25, height = 45, units = c("in"))
ALL_Upreg_GO.BP
All.UP_BPslim_final
all.UP.05
ALL_Upreg_GO.BP <- right_join(All.UP_BPslim_final, filter(all.UP.05, ontology=="BP"), by="category") #add back GO enrichment info for each offspring term
ALL_Upreg_GO.BP
All.UP_BPslim <- filter(All.UP_BPslim, Count>5 & Term!="biological_process") #filter out empty slims and term "biological process"
BPsplitted <- strsplit(as.character(All.UP_BPslim$go_terms), ";") #split into multiple GO ids
All.UP_BPslimX <- data.frame(Term = rep.int(All.UP_BPslim$Term, sapply(BPsplitted, length)), go_term = unlist(BPsplitted)) #list all
All.UP_BPslimX <- merge(All.UP_BPslimX, All.UP_BPslim[,c(1,3:4)], by="Term") #Add back counts, term, and category info
All.UP_BPslimX <- unique(setDT(All.UP_BPslimX)[order(go_term, -Count)], by = "Count") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
All.UP_BPslim_final <- data.frame(slim_term=All.UP_BPslimX$Term, slim_cat=All.UP_BPslimX$category, category=All.UP_BPslimX$go_term, Count=All.UP_BPslimX$Count) #rename columns
View(All.UP_BPslim)
View(All.UP_BPslim_final)
View(All.UP_BPslim_final)
All.UP_BPslim <- filter(All.UP_BPslim, Count>5 & Term!="biological_process") #filter out empty slims and term "biological process"
BPsplitted <- strsplit(as.character(All.UP_BPslim$go_terms), ";") #split into multiple GO ids
All.UP_BPslimX <- data.frame(Term = rep.int(All.UP_BPslim$Term, sapply(BPsplitted, length)), go_term = unlist(BPsplitted)) #list all
All.UP_BPslimX <- merge(All.UP_BPslimX, All.UP_BPslim[,c(1,3:4)], by="Term") #Add back counts, term, and category info
All.UP_BPslimX <- unique(setDT(All.UP_BPslimX)[order(go_term, -Count)], by = "Count") #remove duplicate offspring terms, keeping only those in the larger umbrella term (Count number)
All.UP_BPslimX
All.UP_BPslim_final <- data.frame(slim_term=All.UP_BPslimX$Term, slim_cat=All.UP_BPslimX$category, category=All.UP_BPslimX$go_term, Count=All.UP_BPslimX$Count) #rename columns
All.UP_BPslim_final
