sec.axis = sec_axis(~total_genes, name="Total genes")) + # Add a second axis and specify its features
theme_ipsum()
DAY7_filterfig
DAY7_filterfig <- df_total %>%
dplyr::filter(Day %in% 7) %>%
# Start with a usual ggplot2 call:
ggplot(x=CPM_threshold, y=mean_reads_per_sample)
DAY7_filterfig
df_total
ggplot(x=CPM_threshold, y=mean_reads_per_sample)
df_total %>%
dplyr::filter(Day %in% 7) %>%
# Start with a usual ggplot2 call:
ggplot(x=CPM_threshold, y=mean_reads_per_sample)
df_total %>%
dplyr::filter(Day %in% 7) %>%
# Start with a usual ggplot2 call:
ggplot(x=CPM_threshold, y=mean_reads_per_sample) +
# Custom the Y scales:
scale_y_continuous(name = "Average reads sample-1", # Features of the first axis
sec.axis = sec_axis(~total_genes, name="Total genes"))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
ggplot(df_total, aes(CPM_threshold, mean_reads_per_sample)) +
geom_point()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
DAY7_filterfig <- df_total %>%
dplyr::filter(Day %in% 7) %>%
# Start with a usual ggplot2 call:
ggplot(aes(CPM_threshold, mean_reads_per_sample)) +
# Custom the Y scales:
scale_y_continuous(name = "Average reads sample-1", # Features of the first axis
sec.axis = sec_axis(~total_genes, name="Total genes")) + # Add a second axis and specify its features
theme_ipsum()
DAY7_filterfig
df_total
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
DAY7_filterfig <- df_total %>%
dplyr::filter(Day %in% 7) %>%
# Start with a usual ggplot2 call:
ggplot(aes(CPM_threshold, mean_reads_per_sample)) +
# Custom the Y scales:
scale_y_continuous(name = "Average reads sample-1", # Features of the first axis
sec.axis = sec_axis(~ . *total_genes, name="Total genes")) + # Add a second axis and specify its features
theme_ipsum()
DAY7_filterfig
df_total %>%
dplyr::filter(Day %in% 7)
df_total %>%
dplyr::filter(Day %in% 7) %>%
# Start with a usual ggplot2 call:
ggplot(aes(CPM_threshold, mean_reads_per_sample)) +
# Custom the Y scales:
scale_y_continuous(name = "Average reads sample-1", # Features of the first axis
sec.axis = sec_axis(~ . *total_genes, name="Total genes"))
df_total
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
DAY7_filterfig <- df_total %>%
dplyr::filter(Day %in% 7) %>%
# Start with a usual ggplot2 call:
ggplot(aes(CPM_threshold, mean_reads_per_sample)) +
# Custom the Y scales:
scale_y_continuous(name = "Average reads sample-1", # Features of the first axis
sec.axis = sec_axis(~ . *2, name="Total genes")) + # Add a second axis and specify its features
theme_ipsum()
DAY7_filterfig
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
DAY7_filterfig <- df_total %>%
dplyr::filter(Day %in% 7) %>%
# Start with a usual ggplot2 call:
ggplot(aes(CPM_threshold, mean_reads_per_sample)) +
geom_point() +
# Custom the Y scales:
scale_y_continuous(name = "Average reads sample-1", # Features of the first axis
sec.axis = sec_axis(~ . *2, name="Total genes")) + # Add a second axis and specify its features
theme_ipsum()
DAY7_filterfig
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
df_total
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
df_total
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
DAY7_filterfig <- df_total %>%
dplyr::filter(Day %in% 7) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
DAY7_filterfig <- df_total %>%
dplyr::filter(Day %in% 7) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = mean_reads_per_sample, colour = "means reads")) +
geom_line(aes(y = rel_hum/5, colour = "Total genes")) +
scale_y_continuous(sec.axis = sec_axis(~.*55, name = "gene count")) +
scale_colour_manual(values = c("blue", "red")) +
labs(y = "Average reads sample-1",
x = "CPM threshold",
colour = "Parameter") +
theme(legend.position = c(0.8, 0.9))
DAY7_filterfig
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
DAY7_filterfig <- df_total %>%
dplyr::filter(Day %in% 7) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = mean_reads_per_sample, colour = "means reads")) +
geom_line(aes(y = mean_reads_per_sample, colour = "Total genes")) +
scale_y_continuous(sec.axis = sec_axis(~.*55, name = "gene count")) +
scale_colour_manual(values = c("blue", "red")) +
labs(y = "Average reads sample-1",
x = "CPM threshold",
colour = "Parameter") +
theme(legend.position = c(0.8, 0.9))
DAY7_filterfig
df_total
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
DAY7_filterfig <- df_total %>%
dplyr::filter(Day %in% 7) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = mean_reads_per_sample, colour = "means reads")) +
geom_line(aes(y = mean_reads_per_sample, colour = "Total genes")) +
scale_y_continuous(sec.axis = sec_axis(~./55, name = "gene count")) +
scale_colour_manual(values = c("blue", "red")) +
labs(y = "Average reads sample-1",
x = "CPM threshold",
colour = "Parameter") +
theme(legend.position = c(0.8, 0.9))
DAY7_filterfig
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
df_total
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
DAY7_filterfig <- df_total %>%
dplyr::filter(Day %in% 7) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = mean_reads_per_sample, colour = "Mean reads per sample")) +
geom_line(aes(y = total_genes, colour = "Total genes")) +
scale_y_continuous(sec.axis = sec_axis(~./55, name = "gene count")) +
scale_colour_manual(values = c("blue", "red")) +
labs(y = "Average reads sample-1",
x = "CPM threshold",
colour = "Parameter") +
theme(legend.position = c(0.8, 0.9))
DAY7_filterfig
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
DAY7_filterfig <- df_total %>%
dplyr::filter(Day %in% 7) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = mean_reads_per_sample, colour = "Mean reads per sample")) +
facet_grid(. ~ total_genes)
DAY7_filterfig
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
df_total
df_total %>%
dplyr::filter(Day %in% 7)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
df_total %>%
dplyr::filter(Day %in% 7) %>%
dplyr::gather(variable, CPM_threshold, -Day)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
df_total %>%
dplyr::filter(Day %in% 7) %>%
gather(variable, CPM_threshold, -Day)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
df_total %>%
dplyr::filter(Day %in% 7) %>%
tidyr::gather(variable, CPM_threshold, -Day)
df_total
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
df_total %>%
dplyr::filter(Day %in% 7) %>%
tidyr::gather(total_genes, CPM_threshold, -mean_reads_per_sample)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
df_total %>%
dplyr::filter(Day %in% 7) %>%
tidyr::gather(variable, CPM_threshold, -Day)
df_total
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
df_total %>%
dplyr::filter(Day %in% 7) %>%
tidyr::gather(variable, total_genes, mean_reads_per_sample, -Day)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
df_total %>%
dplyr::filter(Day %in% 7) %>%
tidyr::gather(variable, total_genes, mean_reads_per_sample)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
df_total %>%
dplyr::filter(Day %in% 7) %>%
tidyr::gather(variable, c(total_genes, mean_reads_per_sample))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
df_total
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
df_total %>%
dplyr::filter(Day %in% 7) %>%
tidyr::gather(key = "CPM_threshold", value = "measurement",
total_genes, mean_reads_per_sample)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
df_total %>%
dplyr::filter(Day %in% 7) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_sample, -Day)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
DAY7_filterfig <- df_total %>%
dplyr::filter(Day %in% 7) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_sample, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
facet_grid(. ~ variable)
DAY7_filterfig
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
DAY7_filterfig <- df_total %>%
dplyr::filter(Day %in% 7) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_sample, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
facet_grid(. ~ variable, scales="free")
DAY7_filterfig
DAY7_filterfig <- df_total %>%
dplyr::filter(Day %in% 7) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_sample, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
facet_grid(. ~ variable, scales="free")
DAY7_filterfig
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
DAY7_filterfig <- df_total %>%
dplyr::filter(Day %in% 7) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_sample, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
facet_wrap(. ~ variable, scales="free")
DAY7_filterfig
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
DAY14_filterfig <- df_total %>%
dplyr::filter(Day %in% 14) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_sample, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
facet_wrap(. ~ variable, scales="free")
DAY14_filterfig
DAY21_filterfig <- df_total %>%
dplyr::filter(Day %in% 21) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_sample, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
facet_wrap(. ~ variable, scales="free")
DAY21_filterfig
d21_total_genes
DAY7_filterfig <- df_total %>%
dplyr::filter(Day %in% 7) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_sample, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
facet_wrap(. ~ variable, scales="free")
DAY7_filterfig
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
df_total <- data.frame() # start dataframe
loop.table <- data.frame(matrix(nrow = 3, ncol = 4)) # create dataframe to save cumunalitively during for loop
colnames(loop.table)<-c('CPM_threshold', 'Day', 'total_genes', 'mean_reads_per_sample') # names for comuns in the for loop
CPM_loop <- c(0:50)
CPM_loop <- data.frame(CPM_loop)
for (i in 1:nrow(CPM_loop)) {
var <- CPM_loop[i,1]
# ==========================================================
#
# DAY 7
# ==========================================================
cts.merged.d7 <- raw_counts.merged.as.table[,c(1,na.omit(match(exp.data.d7$Sample.Name, colnames(raw_counts.merged.as.table))))]
cts.merged.d7 <- data.frame(cts.merged.d7[,-1], row.names=cts.merged.d7[,1])
cts.matrix.d7  <-as.matrix(cts.merged.d7, row.names="transcript_id")
CPM.d7 <- cpm(cts.matrix.d7) # Obtain CPMs (counts oer million) using egdeR
thresh.d7 <- CPM.d7 > var # Which values in myCPM are greater than 3?
keep.d7 <- rowSums(thresh.d7) >= (ncol(thresh.d7)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
rowSums(head(thresh.d7)) # Summary of how many TRUEs there are in each row
table(rowSums(thresh.d7)) # 6880 genes with TRUE in all 36 samples
cts.matrix.d7.LOOPED <- cts.matrix.d7[keep.d7,]
d7_total_genes           <- nrow(cts.matrix.d7.LOOPED)
d7_mean_reads_per_sample <- mean(colSums(cts.matrix.d7.LOOPED))
# ==========================================================
#
# DAY 14
# ==========================================================
cts.merged.d14 <- raw_counts.merged.as.table[,c(1,na.omit(match(exp.data.d14$Sample.Name, colnames(raw_counts.merged.as.table))))]
cts.merged.d14 <- data.frame(cts.merged.d14[,-1], row.names=cts.merged.d14[,1])
cts.matrix.d14  <-as.matrix(cts.merged.d14, row.names="transcript_id")
CPM.d14 <- cpm(cts.matrix.d14) # Obtain CPMs (counts oer million) using egdeR
thresh.d14 <- CPM.d14 > var # Which values in myCPM are greater than 3?
keep.d14 <- rowSums(thresh.d14) >= (ncol(thresh.d14)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
cts.matrix.d14.LOOPED <- cts.matrix.d14[keep.d14,]
d14_total_genes           <- nrow(cts.matrix.d14.LOOPED)
d14_mean_reads_per_sample <- mean(colSums(cts.matrix.d14.LOOPED))
# ==========================================================
#
# DAY 21
# ==========================================================
cts.merged.d21 <- raw_counts.merged.as.table[,c(1,na.omit(match(exp.data.d21$Sample.Name, colnames(raw_counts.merged.as.table))))]
cts.merged.d21 <- data.frame(cts.merged.d21[,-1], row.names=cts.merged.d21[,1])
cts.matrix.d21  <-as.matrix(cts.merged.d21, row.names="transcript_id")
CPM.d21 <- cpm(cts.matrix.d21) # Obtain CPMs (counts oer million) using egdeR
thresh.d21 <- CPM.d21 > var # Which values in myCPM are greater than 3?
keep.d21 <- rowSums(thresh.d21) >= (ncol(thresh.d21)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
cts.matrix.d21.LOOPED <- cts.matrix.d21[keep.d21,]
d21_total_genes           <- nrow(cts.matrix.d21.LOOPED)
d21_mean_reads_per_sample <- mean(colSums(cts.matrix.d21.LOOPED))
loop.table$CPM_threshold           <- c(var, var, var)
loop.table$Day                     <- c(7, 14, 21)
loop.table$total_genes             <- c(d7_total_genes, d14_total_genes, d21_total_genes)
loop.table$mean_reads_per_sample   <- c(d7_mean_reads_per_sample, d14_mean_reads_per_sample, d21_mean_reads_per_sample)
df <- data.frame(loop.table) # name dataframe for this singl e row
df_total <- rbind(df_total,df) #bind to a cumulative list dataframe
print(df_total) # print to monitor progress
}
DAY7_filterfig <- df_total %>%
dplyr::filter(Day %in% 7) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_sample, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
facet_wrap(. ~ variable, scales="free")
DAY7_filterfig
DAY21_filterfig <- df_total %>%
dplyr::filter(Day %in% 21) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_sample, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
facet_wrap(. ~ variable, scales="free")
DAY21_filterfig
DAY14_filterfig <- df_total %>%
dplyr::filter(Day %in% 14) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_sample, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
facet_wrap(. ~ variable, scales="free")
DAY14_filterfig
DAY21_filterfig <- df_total %>%
dplyr::filter(Day %in% 21) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_sample, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
facet_wrap(. ~ variable, scales="free")
DAY21_filterfig
cts.matrix.d21.LOOPED
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
df_total <- data.frame() # start dataframe
loop.table <- data.frame(matrix(nrow = 3, ncol = 4)) # create dataframe to save cumunalitively during for loop
colnames(loop.table)<-c('CPM_threshold', 'Day', 'total_genes', 'mean_reads_per_sample') # names for comuns in the for loop
CPM_loop <- c(0:50)
CPM_loop <- data.frame(CPM_loop)
for (i in 1:nrow(CPM_loop)) {
for (i in 1:nrow(CPM_loop)) {
var <- CPM_loop[i,1]
# ==========================================================
#
# DAY 7
# ==========================================================
cts.merged.d7 <- raw_counts.merged.as.table[,c(1,na.omit(match(exp.data.d7$Sample.Name, colnames(raw_counts.merged.as.table))))]
cts.merged.d7 <- data.frame(cts.merged.d7[,-1], row.names=cts.merged.d7[,1])
cts.matrix.d7  <-as.matrix(cts.merged.d7, row.names="transcript_id")
CPM.d7 <- cpm(cts.matrix.d7) # Obtain CPMs (counts oer million) using egdeR
thresh.d7 <- CPM.d7 > var # Which values in myCPM are greater than 3?
keep.d7 <- rowSums(thresh.d7) >= (ncol(thresh.d7)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
rowSums(head(thresh.d7)) # Summary of how many TRUEs there are in each row
table(rowSums(thresh.d7)) # 6880 genes with TRUE in all 36 samples
cts.matrix.d7.LOOPED <- cts.matrix.d7[keep.d7,]
d7_total_genes           <- nrow(cts.matrix.d7.LOOPED)
d7_mean_reads_per_sample <- mean(colSums(cts.matrix.d7.LOOPED))
# ==========================================================
#
# DAY 14
# ==========================================================
cts.merged.d14 <- raw_counts.merged.as.table[,c(1,na.omit(match(exp.data.d14$Sample.Name, colnames(raw_counts.merged.as.table))))]
cts.merged.d14 <- data.frame(cts.merged.d14[,-1], row.names=cts.merged.d14[,1])
cts.matrix.d14  <-as.matrix(cts.merged.d14, row.names="transcript_id")
CPM.d14 <- cpm(cts.matrix.d14) # Obtain CPMs (counts oer million) using egdeR
thresh.d14 <- CPM.d14 > var # Which values in myCPM are greater than 3?
keep.d14 <- rowSums(thresh.d14) >= (ncol(thresh.d14)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
cts.matrix.d14.LOOPED <- cts.matrix.d14[keep.d14,]
d14_total_genes           <- nrow(cts.matrix.d14.LOOPED)
d14_mean_reads_per_sample <- mean(colSums(cts.matrix.d14.LOOPED))
# ==========================================================
#
# DAY 21
# ==========================================================
cts.merged.d21 <- raw_counts.merged.as.table[,c(1,na.omit(match(exp.data.d21$Sample.Name, colnames(raw_counts.merged.as.table))))]
cts.merged.d21 <- data.frame(cts.merged.d21[,-1], row.names=cts.merged.d21[,1])
cts.matrix.d21  <-as.matrix(cts.merged.d21, row.names="transcript_id")
CPM.d21 <- cpm(cts.matrix.d21) # Obtain CPMs (counts oer million) using egdeR
thresh.d21 <- CPM.d21 > var # Which values in myCPM are greater than 3?
keep.d21 <- rowSums(thresh.d21) >= (ncol(thresh.d21)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
cts.matrix.d21.LOOPED <- cts.matrix.d21[keep.d21,]
d21_total_genes           <- nrow(cts.matrix.d21.LOOPED)
d21_mean_reads_per_gene <- mean(rowSums(cts.matrix.d21.LOOPED))
loop.table$CPM_threshold           <- c(var, var, var)
loop.table$Day                     <- c(7, 14, 21)
loop.table$total_genes             <- c(d7_total_genes, d14_total_genes, d21_total_genes)
loop.table$mean_reads_per_gene   <- c(d7_mean_reads_per_gene, d14_mean_reads_per_gene, d21_mean_reads_per_gene)
df <- data.frame(loop.table) # name dataframe for this singl e row
df_total <- rbind(df_total,df) #bind to a cumulative list dataframe
#print(df_total) # print to monitor progress
}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
for (i in 1:nrow(CPM_loop)) {
var <- CPM_loop[i,1]
# ==========================================================
#
# DAY 7
# ==========================================================
cts.merged.d7 <- raw_counts.merged.as.table[,c(1,na.omit(match(exp.data.d7$Sample.Name, colnames(raw_counts.merged.as.table))))]
cts.merged.d7 <- data.frame(cts.merged.d7[,-1], row.names=cts.merged.d7[,1])
cts.matrix.d7  <-as.matrix(cts.merged.d7, row.names="transcript_id")
CPM.d7 <- cpm(cts.matrix.d7) # Obtain CPMs (counts oer million) using egdeR
thresh.d7 <- CPM.d7 > var # Which values in myCPM are greater than 3?
keep.d7 <- rowSums(thresh.d7) >= (ncol(thresh.d7)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
rowSums(head(thresh.d7)) # Summary of how many TRUEs there are in each row
table(rowSums(thresh.d7)) # 6880 genes with TRUE in all 36 samples
cts.matrix.d7.LOOPED <- cts.matrix.d7[keep.d7,]
d7_total_genes           <- nrow(cts.matrix.d7.LOOPED)
d7_mean_reads_per_gene <- mean(rowSums(cts.matrix.d7.LOOPED))
# ==========================================================
#
# DAY 14
# ==========================================================
cts.merged.d14 <- raw_counts.merged.as.table[,c(1,na.omit(match(exp.data.d14$Sample.Name, colnames(raw_counts.merged.as.table))))]
cts.merged.d14 <- data.frame(cts.merged.d14[,-1], row.names=cts.merged.d14[,1])
cts.matrix.d14  <-as.matrix(cts.merged.d14, row.names="transcript_id")
CPM.d14 <- cpm(cts.matrix.d14) # Obtain CPMs (counts oer million) using egdeR
thresh.d14 <- CPM.d14 > var # Which values in myCPM are greater than 3?
keep.d14 <- rowSums(thresh.d14) >= (ncol(thresh.d14)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
cts.matrix.d14.LOOPED <- cts.matrix.d14[keep.d14,]
d14_total_genes           <- nrow(cts.matrix.d14.LOOPED)
d14_mean_reads_per_gene <- mean(rowSums(cts.matrix.d14.LOOPED))
# ==========================================================
#
# DAY 21
# ==========================================================
cts.merged.d21 <- raw_counts.merged.as.table[,c(1,na.omit(match(exp.data.d21$Sample.Name, colnames(raw_counts.merged.as.table))))]
cts.merged.d21 <- data.frame(cts.merged.d21[,-1], row.names=cts.merged.d21[,1])
cts.matrix.d21  <-as.matrix(cts.merged.d21, row.names="transcript_id")
CPM.d21 <- cpm(cts.matrix.d21) # Obtain CPMs (counts oer million) using egdeR
thresh.d21 <- CPM.d21 > var # Which values in myCPM are greater than 3?
keep.d21 <- rowSums(thresh.d21) >= (ncol(thresh.d21)/2) # we would like to keep genes that have at least 50% TRUES in each row of thresh
cts.matrix.d21.LOOPED <- cts.matrix.d21[keep.d21,]
d21_total_genes           <- nrow(cts.matrix.d21.LOOPED)
d21_mean_reads_per_gene <- mean(rowSums(cts.matrix.d21.LOOPED))
loop.table$CPM_threshold           <- c(var, var, var)
loop.table$Day                     <- c(7, 14, 21)
loop.table$total_genes             <- c(d7_total_genes, d14_total_genes, d21_total_genes)
loop.table$mean_reads_per_gene   <- c(d7_mean_reads_per_gene, d14_mean_reads_per_gene, d21_mean_reads_per_gene)
df <- data.frame(loop.table) # name dataframe for this singl e row
df_total <- rbind(df_total,df) #bind to a cumulative list dataframe
#print(df_total) # print to monitor progress
}
DAY7_filterfig <- df_total %>%
dplyr::filter(Day %in% 7) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_gene, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
facet_wrap(. ~ variable, scales="free")
DAY7_filterfig
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
DAY14_filterfig <- df_total %>%
dplyr::filter(Day %in% 14) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_gene, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
facet_wrap(. ~ variable, scales="free")
DAY14_filterfig
DAY21_filterfig <- df_total %>%
dplyr::filter(Day %in% 21) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_gene, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
facet_wrap(. ~ variable, scales="free")
DAY21_filterfig
DAY14_filterfig <- df_total %>%
dplyr::filter(Day %in% 14) %>%
tidyr::gather(key = "variable", value = "measurement",
total_genes, mean_reads_per_gene, -Day) %>%
# Start with a usual ggplot2 call:
ggplot(aes(x = CPM_threshold)) +
geom_line(aes(y = measurement)) +
facet_wrap(. ~ variable, scales="free")
DAY14_filterfig
